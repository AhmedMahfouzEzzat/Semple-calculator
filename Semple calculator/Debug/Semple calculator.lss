
Semple calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000015c4  00001638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000271  00000000  00000000  00001f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002554  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001147  00000000  00000000  000046ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001804  00000000  00000000  00005835  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  0000703c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  0000729c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c25  00000000  00000000  00007759  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000060e  00000000  00000000  0000837e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000098  00000000  00000000  0000898c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ec       	ldi	r30, 0xC4	; 196
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 31       	cpi	r26, 0x1E	; 30
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
      8a:	0e 94 00 04 	call	0x800	; 0x800 <main>
      8e:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <write_to_calc>:
#define start_1st_line 0x80
#define start_2nd_line 0xC0
#define shift_cutsor_lift 0x10
#define shift_cutsor_right 0x14
//macros to interface with IC 8055
void write_to_calc(uint8_t addr, uint8_t source){
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	df 93       	push	r29
      9c:	cf 93       	push	r28
      9e:	cd b7       	in	r28, 0x3d	; 61
      a0:	de b7       	in	r29, 0x3e	; 62
      a2:	6a 97       	sbiw	r28, 0x1a	; 26
      a4:	0f b6       	in	r0, 0x3f	; 63
      a6:	f8 94       	cli
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	0f be       	out	0x3f, r0	; 63
      ac:	cd bf       	out	0x3d, r28	; 61
      ae:	89 8f       	std	Y+25, r24	; 0x19
      b0:	6a 8f       	std	Y+26, r22	; 0x1a
	calc_ctrl_port = IDLE; 	
      b2:	88 e2       	ldi	r24, 0x28	; 40
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	2f ef       	ldi	r18, 0xFF	; 255
      b8:	fc 01       	movw	r30, r24
      ba:	20 83       	st	Z, r18
	calc_data_mode = OUTPUT; 
      bc:	8a e2       	ldi	r24, 0x2A	; 42
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	2f ef       	ldi	r18, 0xFF	; 255
      c2:	fc 01       	movw	r30, r24
      c4:	20 83       	st	Z, r18
	calc_addr_port = addr ; 
      c6:	85 e2       	ldi	r24, 0x25	; 37
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	29 8d       	ldd	r18, Y+25	; 0x19
      cc:	fc 01       	movw	r30, r24
      ce:	20 83       	st	Z, r18
	calc_data_out_port = source ; 
      d0:	8b e2       	ldi	r24, 0x2B	; 43
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	2a 8d       	ldd	r18, Y+26	; 0x1a
      d6:	fc 01       	movw	r30, r24
      d8:	20 83       	st	Z, r18
	calc_ctrl_port = WRITE ; 
      da:	88 e2       	ldi	r24, 0x28	; 40
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	2d ef       	ldi	r18, 0xFD	; 253
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	a0 e8       	ldi	r26, 0x80	; 128
      ea:	bf e3       	ldi	r27, 0x3F	; 63
      ec:	89 83       	std	Y+1, r24	; 0x01
      ee:	9a 83       	std	Y+2, r25	; 0x02
      f0:	ab 83       	std	Y+3, r26	; 0x03
      f2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
      f4:	69 81       	ldd	r22, Y+1	; 0x01
      f6:	7a 81       	ldd	r23, Y+2	; 0x02
      f8:	8b 81       	ldd	r24, Y+3	; 0x03
      fa:	9c 81       	ldd	r25, Y+4	; 0x04
      fc:	2b ea       	ldi	r18, 0xAB	; 171
      fe:	3a ea       	ldi	r19, 0xAA	; 170
     100:	4a ea       	ldi	r20, 0xAA	; 170
     102:	50 e4       	ldi	r21, 0x40	; 64
     104:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     108:	dc 01       	movw	r26, r24
     10a:	cb 01       	movw	r24, r22
     10c:	8d 83       	std	Y+5, r24	; 0x05
     10e:	9e 83       	std	Y+6, r25	; 0x06
     110:	af 83       	std	Y+7, r26	; 0x07
     112:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	6d 81       	ldd	r22, Y+5	; 0x05
     118:	7e 81       	ldd	r23, Y+6	; 0x06
     11a:	8f 81       	ldd	r24, Y+7	; 0x07
     11c:	98 85       	ldd	r25, Y+8	; 0x08
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	40 e8       	ldi	r20, 0x80	; 128
     124:	5f e3       	ldi	r21, 0x3F	; 63
     126:	0e 94 97 08 	call	0x112e	; 0x112e <__ltsf2>
     12a:	88 23       	and	r24, r24
     12c:	0c f0       	brlt	.+2      	; 0x130 <write_to_calc+0x9a>
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	11 23       	and	r17, r17
     132:	19 f0       	breq	.+6      	; 0x13a <write_to_calc+0xa4>
		__ticks = 1;
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	89 87       	std	Y+9, r24	; 0x09
     138:	a3 c0       	rjmp	.+326    	; 0x280 <write_to_calc+0x1ea>
	else if (__tmp > 255)
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	6d 81       	ldd	r22, Y+5	; 0x05
     13e:	7e 81       	ldd	r23, Y+6	; 0x06
     140:	8f 81       	ldd	r24, Y+7	; 0x07
     142:	98 85       	ldd	r25, Y+8	; 0x08
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	53 e4       	ldi	r21, 0x43	; 67
     14c:	0e 94 37 08 	call	0x106e	; 0x106e <__gtsf2>
     150:	18 16       	cp	r1, r24
     152:	0c f0       	brlt	.+2      	; 0x156 <write_to_calc+0xc0>
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	11 23       	and	r17, r17
     158:	09 f4       	brne	.+2      	; 0x15c <write_to_calc+0xc6>
     15a:	89 c0       	rjmp	.+274    	; 0x26e <write_to_calc+0x1d8>
	{
		_delay_ms(__us / 1000.0);
     15c:	69 81       	ldd	r22, Y+1	; 0x01
     15e:	7a 81       	ldd	r23, Y+2	; 0x02
     160:	8b 81       	ldd	r24, Y+3	; 0x03
     162:	9c 81       	ldd	r25, Y+4	; 0x04
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	4a e7       	ldi	r20, 0x7A	; 122
     16a:	54 e4       	ldi	r21, 0x44	; 68
     16c:	0e 94 89 07 	call	0xf12	; 0xf12 <__divsf3>
     170:	dc 01       	movw	r26, r24
     172:	cb 01       	movw	r24, r22
     174:	8a 87       	std	Y+10, r24	; 0x0a
     176:	9b 87       	std	Y+11, r25	; 0x0b
     178:	ac 87       	std	Y+12, r26	; 0x0c
     17a:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     17c:	6a 85       	ldd	r22, Y+10	; 0x0a
     17e:	7b 85       	ldd	r23, Y+11	; 0x0b
     180:	8c 85       	ldd	r24, Y+12	; 0x0c
     182:	9d 85       	ldd	r25, Y+13	; 0x0d
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	4a e7       	ldi	r20, 0x7A	; 122
     18a:	55 e4       	ldi	r21, 0x45	; 69
     18c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     190:	dc 01       	movw	r26, r24
     192:	cb 01       	movw	r24, r22
     194:	8e 87       	std	Y+14, r24	; 0x0e
     196:	9f 87       	std	Y+15, r25	; 0x0f
     198:	a8 8b       	std	Y+16, r26	; 0x10
     19a:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	6e 85       	ldd	r22, Y+14	; 0x0e
     1a0:	7f 85       	ldd	r23, Y+15	; 0x0f
     1a2:	88 89       	ldd	r24, Y+16	; 0x10
     1a4:	99 89       	ldd	r25, Y+17	; 0x11
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	40 e8       	ldi	r20, 0x80	; 128
     1ac:	5f e3       	ldi	r21, 0x3F	; 63
     1ae:	0e 94 97 08 	call	0x112e	; 0x112e <__ltsf2>
     1b2:	88 23       	and	r24, r24
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <write_to_calc+0x122>
     1b6:	10 e0       	ldi	r17, 0x00	; 0
     1b8:	11 23       	and	r17, r17
     1ba:	29 f0       	breq	.+10     	; 0x1c6 <write_to_calc+0x130>
		__ticks = 1;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	9b 8b       	std	Y+19, r25	; 0x13
     1c2:	8a 8b       	std	Y+18, r24	; 0x12
     1c4:	46 c0       	rjmp	.+140    	; 0x252 <write_to_calc+0x1bc>
	else if (__tmp > 65535)
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	6e 85       	ldd	r22, Y+14	; 0x0e
     1ca:	7f 85       	ldd	r23, Y+15	; 0x0f
     1cc:	88 89       	ldd	r24, Y+16	; 0x10
     1ce:	99 89       	ldd	r25, Y+17	; 0x11
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	3f ef       	ldi	r19, 0xFF	; 255
     1d4:	4f e7       	ldi	r20, 0x7F	; 127
     1d6:	57 e4       	ldi	r21, 0x47	; 71
     1d8:	0e 94 37 08 	call	0x106e	; 0x106e <__gtsf2>
     1dc:	18 16       	cp	r1, r24
     1de:	0c f0       	brlt	.+2      	; 0x1e2 <write_to_calc+0x14c>
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	11 23       	and	r17, r17
     1e4:	61 f1       	breq	.+88     	; 0x23e <write_to_calc+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1e6:	6a 85       	ldd	r22, Y+10	; 0x0a
     1e8:	7b 85       	ldd	r23, Y+11	; 0x0b
     1ea:	8c 85       	ldd	r24, Y+12	; 0x0c
     1ec:	9d 85       	ldd	r25, Y+13	; 0x0d
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e2       	ldi	r20, 0x20	; 32
     1f4:	51 e4       	ldi	r21, 0x41	; 65
     1f6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     1fa:	dc 01       	movw	r26, r24
     1fc:	cb 01       	movw	r24, r22
     1fe:	bc 01       	movw	r22, r24
     200:	cd 01       	movw	r24, r26
     202:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     206:	dc 01       	movw	r26, r24
     208:	cb 01       	movw	r24, r22
     20a:	9b 8b       	std	Y+19, r25	; 0x13
     20c:	8a 8b       	std	Y+18, r24	; 0x12
     20e:	12 c0       	rjmp	.+36     	; 0x234 <write_to_calc+0x19e>
     210:	80 e9       	ldi	r24, 0x90	; 144
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	9d 8b       	std	Y+21, r25	; 0x15
     216:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     218:	8c 89       	ldd	r24, Y+20	; 0x14
     21a:	9d 89       	ldd	r25, Y+21	; 0x15
     21c:	8c 01       	movw	r16, r24
     21e:	c8 01       	movw	r24, r16
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <write_to_calc+0x18a>
     224:	8c 01       	movw	r16, r24
     226:	1d 8b       	std	Y+21, r17	; 0x15
     228:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     22a:	8a 89       	ldd	r24, Y+18	; 0x12
     22c:	9b 89       	ldd	r25, Y+19	; 0x13
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	9b 8b       	std	Y+19, r25	; 0x13
     232:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     234:	8a 89       	ldd	r24, Y+18	; 0x12
     236:	9b 89       	ldd	r25, Y+19	; 0x13
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	51 f7       	brne	.-44     	; 0x210 <write_to_calc+0x17a>
     23c:	28 c0       	rjmp	.+80     	; 0x28e <write_to_calc+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     23e:	6e 85       	ldd	r22, Y+14	; 0x0e
     240:	7f 85       	ldd	r23, Y+15	; 0x0f
     242:	88 89       	ldd	r24, Y+16	; 0x10
     244:	99 89       	ldd	r25, Y+17	; 0x11
     246:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     24a:	dc 01       	movw	r26, r24
     24c:	cb 01       	movw	r24, r22
     24e:	9b 8b       	std	Y+19, r25	; 0x13
     250:	8a 8b       	std	Y+18, r24	; 0x12
     252:	8a 89       	ldd	r24, Y+18	; 0x12
     254:	9b 89       	ldd	r25, Y+19	; 0x13
     256:	9f 8b       	std	Y+23, r25	; 0x17
     258:	8e 8b       	std	Y+22, r24	; 0x16
     25a:	8e 89       	ldd	r24, Y+22	; 0x16
     25c:	9f 89       	ldd	r25, Y+23	; 0x17
     25e:	8c 01       	movw	r16, r24
     260:	f8 01       	movw	r30, r16
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <write_to_calc+0x1cc>
     266:	8f 01       	movw	r16, r30
     268:	1f 8b       	std	Y+23, r17	; 0x17
     26a:	0e 8b       	std	Y+22, r16	; 0x16
     26c:	10 c0       	rjmp	.+32     	; 0x28e <write_to_calc+0x1f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     26e:	6d 81       	ldd	r22, Y+5	; 0x05
     270:	7e 81       	ldd	r23, Y+6	; 0x06
     272:	8f 81       	ldd	r24, Y+7	; 0x07
     274:	98 85       	ldd	r25, Y+8	; 0x08
     276:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	89 87       	std	Y+9, r24	; 0x09
     280:	89 85       	ldd	r24, Y+9	; 0x09
     282:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     284:	88 8d       	ldd	r24, Y+24	; 0x18
     286:	18 2f       	mov	r17, r24
     288:	1a 95       	dec	r17
     28a:	f1 f7       	brne	.-4      	; 0x288 <write_to_calc+0x1f2>
     28c:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1); 
	calc_ctrl_port = IDLE;	
     28e:	88 e2       	ldi	r24, 0x28	; 40
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	2f ef       	ldi	r18, 0xFF	; 255
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18
}			
     298:	6a 96       	adiw	r28, 0x1a	; 26
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	cf 91       	pop	r28
     2a6:	df 91       	pop	r29
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	08 95       	ret

000002ae <read_from_calc>:

uint8_t read_from_calc(uint8_t addr)  {
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	df 93       	push	r29
     2b4:	cf 93       	push	r28
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	69 97       	sbiw	r28, 0x19	; 25
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	cd bf       	out	0x3d, r28	; 61
     2c6:	89 8f       	std	Y+25, r24	; 0x19
	calc_ctrl_port = IDLE; 
     2c8:	88 e2       	ldi	r24, 0x28	; 40
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	2f ef       	ldi	r18, 0xFF	; 255
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
	calc_data_mode = INPUT; 
     2d2:	8a e2       	ldi	r24, 0x2A	; 42
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	fc 01       	movw	r30, r24
     2d8:	10 82       	st	Z, r1
	calc_data_out_port = 0xFF; 	// turn on pullup resestor
     2da:	8b e2       	ldi	r24, 0x2B	; 43
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	2f ef       	ldi	r18, 0xFF	; 255
     2e0:	fc 01       	movw	r30, r24
     2e2:	20 83       	st	Z, r18
	calc_addr_port = (addr) ; 
     2e4:	85 e2       	ldi	r24, 0x25	; 37
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	29 8d       	ldd	r18, Y+25	; 0x19
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
	calc_ctrl_port = READ ; 
     2ee:	88 e2       	ldi	r24, 0x28	; 40
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	2e ef       	ldi	r18, 0xFE	; 254
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 83       	st	Z, r18
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	a0 e8       	ldi	r26, 0x80	; 128
     2fe:	bf e3       	ldi	r27, 0x3F	; 63
     300:	89 83       	std	Y+1, r24	; 0x01
     302:	9a 83       	std	Y+2, r25	; 0x02
     304:	ab 83       	std	Y+3, r26	; 0x03
     306:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     308:	69 81       	ldd	r22, Y+1	; 0x01
     30a:	7a 81       	ldd	r23, Y+2	; 0x02
     30c:	8b 81       	ldd	r24, Y+3	; 0x03
     30e:	9c 81       	ldd	r25, Y+4	; 0x04
     310:	2b ea       	ldi	r18, 0xAB	; 171
     312:	3a ea       	ldi	r19, 0xAA	; 170
     314:	4a ea       	ldi	r20, 0xAA	; 170
     316:	50 e4       	ldi	r21, 0x40	; 64
     318:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	8d 83       	std	Y+5, r24	; 0x05
     322:	9e 83       	std	Y+6, r25	; 0x06
     324:	af 83       	std	Y+7, r26	; 0x07
     326:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     328:	11 e0       	ldi	r17, 0x01	; 1
     32a:	6d 81       	ldd	r22, Y+5	; 0x05
     32c:	7e 81       	ldd	r23, Y+6	; 0x06
     32e:	8f 81       	ldd	r24, Y+7	; 0x07
     330:	98 85       	ldd	r25, Y+8	; 0x08
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e8       	ldi	r20, 0x80	; 128
     338:	5f e3       	ldi	r21, 0x3F	; 63
     33a:	0e 94 97 08 	call	0x112e	; 0x112e <__ltsf2>
     33e:	88 23       	and	r24, r24
     340:	0c f0       	brlt	.+2      	; 0x344 <read_from_calc+0x96>
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	11 23       	and	r17, r17
     346:	19 f0       	breq	.+6      	; 0x34e <read_from_calc+0xa0>
		__ticks = 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	89 87       	std	Y+9, r24	; 0x09
     34c:	a3 c0       	rjmp	.+326    	; 0x494 <read_from_calc+0x1e6>
	else if (__tmp > 255)
     34e:	11 e0       	ldi	r17, 0x01	; 1
     350:	6d 81       	ldd	r22, Y+5	; 0x05
     352:	7e 81       	ldd	r23, Y+6	; 0x06
     354:	8f 81       	ldd	r24, Y+7	; 0x07
     356:	98 85       	ldd	r25, Y+8	; 0x08
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	4f e7       	ldi	r20, 0x7F	; 127
     35e:	53 e4       	ldi	r21, 0x43	; 67
     360:	0e 94 37 08 	call	0x106e	; 0x106e <__gtsf2>
     364:	18 16       	cp	r1, r24
     366:	0c f0       	brlt	.+2      	; 0x36a <read_from_calc+0xbc>
     368:	10 e0       	ldi	r17, 0x00	; 0
     36a:	11 23       	and	r17, r17
     36c:	09 f4       	brne	.+2      	; 0x370 <read_from_calc+0xc2>
     36e:	89 c0       	rjmp	.+274    	; 0x482 <read_from_calc+0x1d4>
	{
		_delay_ms(__us / 1000.0);
     370:	69 81       	ldd	r22, Y+1	; 0x01
     372:	7a 81       	ldd	r23, Y+2	; 0x02
     374:	8b 81       	ldd	r24, Y+3	; 0x03
     376:	9c 81       	ldd	r25, Y+4	; 0x04
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	4a e7       	ldi	r20, 0x7A	; 122
     37e:	54 e4       	ldi	r21, 0x44	; 68
     380:	0e 94 89 07 	call	0xf12	; 0xf12 <__divsf3>
     384:	dc 01       	movw	r26, r24
     386:	cb 01       	movw	r24, r22
     388:	8a 87       	std	Y+10, r24	; 0x0a
     38a:	9b 87       	std	Y+11, r25	; 0x0b
     38c:	ac 87       	std	Y+12, r26	; 0x0c
     38e:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     390:	6a 85       	ldd	r22, Y+10	; 0x0a
     392:	7b 85       	ldd	r23, Y+11	; 0x0b
     394:	8c 85       	ldd	r24, Y+12	; 0x0c
     396:	9d 85       	ldd	r25, Y+13	; 0x0d
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	4a e7       	ldi	r20, 0x7A	; 122
     39e:	55 e4       	ldi	r21, 0x45	; 69
     3a0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     3a4:	dc 01       	movw	r26, r24
     3a6:	cb 01       	movw	r24, r22
     3a8:	8e 87       	std	Y+14, r24	; 0x0e
     3aa:	9f 87       	std	Y+15, r25	; 0x0f
     3ac:	a8 8b       	std	Y+16, r26	; 0x10
     3ae:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     3b0:	11 e0       	ldi	r17, 0x01	; 1
     3b2:	6e 85       	ldd	r22, Y+14	; 0x0e
     3b4:	7f 85       	ldd	r23, Y+15	; 0x0f
     3b6:	88 89       	ldd	r24, Y+16	; 0x10
     3b8:	99 89       	ldd	r25, Y+17	; 0x11
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e8       	ldi	r20, 0x80	; 128
     3c0:	5f e3       	ldi	r21, 0x3F	; 63
     3c2:	0e 94 97 08 	call	0x112e	; 0x112e <__ltsf2>
     3c6:	88 23       	and	r24, r24
     3c8:	0c f0       	brlt	.+2      	; 0x3cc <read_from_calc+0x11e>
     3ca:	10 e0       	ldi	r17, 0x00	; 0
     3cc:	11 23       	and	r17, r17
     3ce:	29 f0       	breq	.+10     	; 0x3da <read_from_calc+0x12c>
		__ticks = 1;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	9b 8b       	std	Y+19, r25	; 0x13
     3d6:	8a 8b       	std	Y+18, r24	; 0x12
     3d8:	46 c0       	rjmp	.+140    	; 0x466 <read_from_calc+0x1b8>
	else if (__tmp > 65535)
     3da:	11 e0       	ldi	r17, 0x01	; 1
     3dc:	6e 85       	ldd	r22, Y+14	; 0x0e
     3de:	7f 85       	ldd	r23, Y+15	; 0x0f
     3e0:	88 89       	ldd	r24, Y+16	; 0x10
     3e2:	99 89       	ldd	r25, Y+17	; 0x11
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	3f ef       	ldi	r19, 0xFF	; 255
     3e8:	4f e7       	ldi	r20, 0x7F	; 127
     3ea:	57 e4       	ldi	r21, 0x47	; 71
     3ec:	0e 94 37 08 	call	0x106e	; 0x106e <__gtsf2>
     3f0:	18 16       	cp	r1, r24
     3f2:	0c f0       	brlt	.+2      	; 0x3f6 <read_from_calc+0x148>
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	11 23       	and	r17, r17
     3f8:	61 f1       	breq	.+88     	; 0x452 <read_from_calc+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3fa:	6a 85       	ldd	r22, Y+10	; 0x0a
     3fc:	7b 85       	ldd	r23, Y+11	; 0x0b
     3fe:	8c 85       	ldd	r24, Y+12	; 0x0c
     400:	9d 85       	ldd	r25, Y+13	; 0x0d
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e2       	ldi	r20, 0x20	; 32
     408:	51 e4       	ldi	r21, 0x41	; 65
     40a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	bc 01       	movw	r22, r24
     414:	cd 01       	movw	r24, r26
     416:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     41a:	dc 01       	movw	r26, r24
     41c:	cb 01       	movw	r24, r22
     41e:	9b 8b       	std	Y+19, r25	; 0x13
     420:	8a 8b       	std	Y+18, r24	; 0x12
     422:	12 c0       	rjmp	.+36     	; 0x448 <read_from_calc+0x19a>
     424:	80 e9       	ldi	r24, 0x90	; 144
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	9d 8b       	std	Y+21, r25	; 0x15
     42a:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     42c:	8c 89       	ldd	r24, Y+20	; 0x14
     42e:	9d 89       	ldd	r25, Y+21	; 0x15
     430:	8c 01       	movw	r16, r24
     432:	c8 01       	movw	r24, r16
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <read_from_calc+0x186>
     438:	8c 01       	movw	r16, r24
     43a:	1d 8b       	std	Y+21, r17	; 0x15
     43c:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     43e:	8a 89       	ldd	r24, Y+18	; 0x12
     440:	9b 89       	ldd	r25, Y+19	; 0x13
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	9b 8b       	std	Y+19, r25	; 0x13
     446:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     448:	8a 89       	ldd	r24, Y+18	; 0x12
     44a:	9b 89       	ldd	r25, Y+19	; 0x13
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	51 f7       	brne	.-44     	; 0x424 <read_from_calc+0x176>
     450:	28 c0       	rjmp	.+80     	; 0x4a2 <read_from_calc+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     452:	6e 85       	ldd	r22, Y+14	; 0x0e
     454:	7f 85       	ldd	r23, Y+15	; 0x0f
     456:	88 89       	ldd	r24, Y+16	; 0x10
     458:	99 89       	ldd	r25, Y+17	; 0x11
     45a:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     45e:	dc 01       	movw	r26, r24
     460:	cb 01       	movw	r24, r22
     462:	9b 8b       	std	Y+19, r25	; 0x13
     464:	8a 8b       	std	Y+18, r24	; 0x12
     466:	8a 89       	ldd	r24, Y+18	; 0x12
     468:	9b 89       	ldd	r25, Y+19	; 0x13
     46a:	9f 8b       	std	Y+23, r25	; 0x17
     46c:	8e 8b       	std	Y+22, r24	; 0x16
     46e:	8e 89       	ldd	r24, Y+22	; 0x16
     470:	9f 89       	ldd	r25, Y+23	; 0x17
     472:	8c 01       	movw	r16, r24
     474:	f8 01       	movw	r30, r16
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <read_from_calc+0x1c8>
     47a:	8f 01       	movw	r16, r30
     47c:	1f 8b       	std	Y+23, r17	; 0x17
     47e:	0e 8b       	std	Y+22, r16	; 0x16
     480:	10 c0       	rjmp	.+32     	; 0x4a2 <read_from_calc+0x1f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     482:	6d 81       	ldd	r22, Y+5	; 0x05
     484:	7e 81       	ldd	r23, Y+6	; 0x06
     486:	8f 81       	ldd	r24, Y+7	; 0x07
     488:	98 85       	ldd	r25, Y+8	; 0x08
     48a:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	89 87       	std	Y+9, r24	; 0x09
     494:	89 85       	ldd	r24, Y+9	; 0x09
     496:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     498:	88 8d       	ldd	r24, Y+24	; 0x18
     49a:	18 2f       	mov	r17, r24
     49c:	1a 95       	dec	r17
     49e:	f1 f7       	brne	.-4      	; 0x49c <read_from_calc+0x1ee>
     4a0:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1); 
	calc_ctrl_port = IDLE ; 
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	2f ef       	ldi	r18, 0xFF	; 255
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
	return calc_data_in_port; 
     4ac:	89 e2       	ldi	r24, 0x29	; 41
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	80 81       	ld	r24, Z
}			
     4b4:	69 96       	adiw	r28, 0x19	; 25
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	cf 91       	pop	r28
     4c2:	df 91       	pop	r29
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	08 95       	ret

000004ca <SEND_TO_LCD>:
					{'8','5','2','0'},
					{'9','6','3','='},
					{'/','x','-','+'}};

void SEND_TO_LCD(char data , uint8_t mode )
{
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	61 97       	sbiw	r28, 0x11	; 17
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	88 8b       	std	Y+16, r24	; 0x10
     4e4:	69 8b       	std	Y+17, r22	; 0x11
	uint8_t control_lcd = 0 ;
     4e6:	19 82       	std	Y+1, r1	; 0x01
	write_to_calc(lcd_data_port,data);
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	68 89       	ldd	r22, Y+16	; 0x10
     4ec:	0e 94 4b 00 	call	0x96	; 0x96 <write_to_calc>
	control_lcd = mode ;			//CMD => RS=0 ,DATA =>RS =1 
     4f0:	89 89       	ldd	r24, Y+17	; 0x11
     4f2:	89 83       	std	Y+1, r24	; 0x01
	control_lcd |= 2;				// EN = 1
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	82 60       	ori	r24, 0x02	; 2
     4f8:	89 83       	std	Y+1, r24	; 0x01
	write_to_calc(lcd_ctrl_port,control_lcd);
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	69 81       	ldd	r22, Y+1	; 0x01
     4fe:	0e 94 4b 00 	call	0x96	; 0x96 <write_to_calc>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	a0 e8       	ldi	r26, 0x80	; 128
     508:	bf e3       	ldi	r27, 0x3F	; 63
     50a:	8a 83       	std	Y+2, r24	; 0x02
     50c:	9b 83       	std	Y+3, r25	; 0x03
     50e:	ac 83       	std	Y+4, r26	; 0x04
     510:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     512:	6a 81       	ldd	r22, Y+2	; 0x02
     514:	7b 81       	ldd	r23, Y+3	; 0x03
     516:	8c 81       	ldd	r24, Y+4	; 0x04
     518:	9d 81       	ldd	r25, Y+5	; 0x05
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	4a e7       	ldi	r20, 0x7A	; 122
     520:	55 e4       	ldi	r21, 0x45	; 69
     522:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	8e 83       	std	Y+6, r24	; 0x06
     52c:	9f 83       	std	Y+7, r25	; 0x07
     52e:	a8 87       	std	Y+8, r26	; 0x08
     530:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     532:	11 e0       	ldi	r17, 0x01	; 1
     534:	6e 81       	ldd	r22, Y+6	; 0x06
     536:	7f 81       	ldd	r23, Y+7	; 0x07
     538:	88 85       	ldd	r24, Y+8	; 0x08
     53a:	99 85       	ldd	r25, Y+9	; 0x09
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e8       	ldi	r20, 0x80	; 128
     542:	5f e3       	ldi	r21, 0x3F	; 63
     544:	0e 94 97 08 	call	0x112e	; 0x112e <__ltsf2>
     548:	88 23       	and	r24, r24
     54a:	0c f0       	brlt	.+2      	; 0x54e <SEND_TO_LCD+0x84>
     54c:	10 e0       	ldi	r17, 0x00	; 0
     54e:	11 23       	and	r17, r17
     550:	29 f0       	breq	.+10     	; 0x55c <SEND_TO_LCD+0x92>
		__ticks = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	9b 87       	std	Y+11, r25	; 0x0b
     558:	8a 87       	std	Y+10, r24	; 0x0a
     55a:	46 c0       	rjmp	.+140    	; 0x5e8 <SEND_TO_LCD+0x11e>
	else if (__tmp > 65535)
     55c:	11 e0       	ldi	r17, 0x01	; 1
     55e:	6e 81       	ldd	r22, Y+6	; 0x06
     560:	7f 81       	ldd	r23, Y+7	; 0x07
     562:	88 85       	ldd	r24, Y+8	; 0x08
     564:	99 85       	ldd	r25, Y+9	; 0x09
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	3f ef       	ldi	r19, 0xFF	; 255
     56a:	4f e7       	ldi	r20, 0x7F	; 127
     56c:	57 e4       	ldi	r21, 0x47	; 71
     56e:	0e 94 37 08 	call	0x106e	; 0x106e <__gtsf2>
     572:	18 16       	cp	r1, r24
     574:	0c f0       	brlt	.+2      	; 0x578 <SEND_TO_LCD+0xae>
     576:	10 e0       	ldi	r17, 0x00	; 0
     578:	11 23       	and	r17, r17
     57a:	61 f1       	breq	.+88     	; 0x5d4 <SEND_TO_LCD+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     57c:	6a 81       	ldd	r22, Y+2	; 0x02
     57e:	7b 81       	ldd	r23, Y+3	; 0x03
     580:	8c 81       	ldd	r24, Y+4	; 0x04
     582:	9d 81       	ldd	r25, Y+5	; 0x05
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	40 e2       	ldi	r20, 0x20	; 32
     58a:	51 e4       	ldi	r21, 0x41	; 65
     58c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	bc 01       	movw	r22, r24
     596:	cd 01       	movw	r24, r26
     598:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     59c:	dc 01       	movw	r26, r24
     59e:	cb 01       	movw	r24, r22
     5a0:	9b 87       	std	Y+11, r25	; 0x0b
     5a2:	8a 87       	std	Y+10, r24	; 0x0a
     5a4:	12 c0       	rjmp	.+36     	; 0x5ca <SEND_TO_LCD+0x100>
     5a6:	80 e9       	ldi	r24, 0x90	; 144
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	9d 87       	std	Y+13, r25	; 0x0d
     5ac:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5ae:	8c 85       	ldd	r24, Y+12	; 0x0c
     5b0:	9d 85       	ldd	r25, Y+13	; 0x0d
     5b2:	8c 01       	movw	r16, r24
     5b4:	c8 01       	movw	r24, r16
     5b6:	01 97       	sbiw	r24, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <SEND_TO_LCD+0xec>
     5ba:	8c 01       	movw	r16, r24
     5bc:	1d 87       	std	Y+13, r17	; 0x0d
     5be:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     5c2:	9b 85       	ldd	r25, Y+11	; 0x0b
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	9b 87       	std	Y+11, r25	; 0x0b
     5c8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     5cc:	9b 85       	ldd	r25, Y+11	; 0x0b
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	51 f7       	brne	.-44     	; 0x5a6 <SEND_TO_LCD+0xdc>
     5d2:	17 c0       	rjmp	.+46     	; 0x602 <SEND_TO_LCD+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d4:	6e 81       	ldd	r22, Y+6	; 0x06
     5d6:	7f 81       	ldd	r23, Y+7	; 0x07
     5d8:	88 85       	ldd	r24, Y+8	; 0x08
     5da:	99 85       	ldd	r25, Y+9	; 0x09
     5dc:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	9b 87       	std	Y+11, r25	; 0x0b
     5e6:	8a 87       	std	Y+10, r24	; 0x0a
     5e8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ea:	9b 85       	ldd	r25, Y+11	; 0x0b
     5ec:	9f 87       	std	Y+15, r25	; 0x0f
     5ee:	8e 87       	std	Y+14, r24	; 0x0e
     5f0:	8e 85       	ldd	r24, Y+14	; 0x0e
     5f2:	9f 85       	ldd	r25, Y+15	; 0x0f
     5f4:	8c 01       	movw	r16, r24
     5f6:	c8 01       	movw	r24, r16
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <SEND_TO_LCD+0x12e>
     5fc:	8c 01       	movw	r16, r24
     5fe:	1f 87       	std	Y+15, r17	; 0x0f
     600:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(1);
	control_lcd &= ~2 ;				// EN =0
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	8d 7f       	andi	r24, 0xFD	; 253
     606:	89 83       	std	Y+1, r24	; 0x01
	write_to_calc(lcd_ctrl_port,control_lcd);
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	69 81       	ldd	r22, Y+1	; 0x01
     60c:	0e 94 4b 00 	call	0x96	; 0x96 <write_to_calc>
}
     610:	61 96       	adiw	r28, 0x11	; 17
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	08 95       	ret

00000626 <INIT_LCD>:

void INIT_LCD()
{
     626:	df 93       	push	r29
     628:	cf 93       	push	r28
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
	SEND_TO_LCD(set_size,CMD);
     62e:	88 e3       	ldi	r24, 0x38	; 56
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	0e 94 65 02 	call	0x4ca	; 0x4ca <SEND_TO_LCD>
	SEND_TO_LCD(clr,CMD);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	0e 94 65 02 	call	0x4ca	; 0x4ca <SEND_TO_LCD>
	SEND_TO_LCD(display_on,CMD)	;
     63e:	8e e0       	ldi	r24, 0x0E	; 14
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	0e 94 65 02 	call	0x4ca	; 0x4ca <SEND_TO_LCD>
}
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	08 95       	ret

0000064c <write_to_LCD>:

void write_to_LCD(char ch){
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	0f 92       	push	r0
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	89 83       	std	Y+1, r24	; 0x01
	SEND_TO_LCD(ch,DATA);
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	0e 94 65 02 	call	0x4ca	; 0x4ca <SEND_TO_LCD>
}
     660:	0f 90       	pop	r0
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	08 95       	ret

00000668 <print_to_LCD>:

void print_to_LCD(char *str){
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	00 d0       	rcall	.+0      	; 0x66e <print_to_LCD+0x6>
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	9a 83       	std	Y+2, r25	; 0x02
     674:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
     676:	0b c0       	rjmp	.+22     	; 0x68e <print_to_LCD+0x26>
	{
		write_to_LCD(*str);
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	9a 81       	ldd	r25, Y+2	; 0x02
     67c:	fc 01       	movw	r30, r24
     67e:	80 81       	ld	r24, Z
     680:	0e 94 26 03 	call	0x64c	; 0x64c <write_to_LCD>
		str++;
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	9a 83       	std	Y+2, r25	; 0x02
     68c:	89 83       	std	Y+1, r24	; 0x01
void write_to_LCD(char ch){
	SEND_TO_LCD(ch,DATA);
}

void print_to_LCD(char *str){
	while(*str != '\0')
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	fc 01       	movw	r30, r24
     694:	80 81       	ld	r24, Z
     696:	88 23       	and	r24, r24
     698:	79 f7       	brne	.-34     	; 0x678 <print_to_LCD+0x10>
	{
		write_to_LCD(*str);
		str++;
	}
}
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	cf 91       	pop	r28
     6a0:	df 91       	pop	r29
     6a2:	08 95       	ret

000006a4 <get_key_presed>:

char get_key_presed(){
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	2b 97       	sbiw	r28, 0x0b	; 11
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
	uint8_t OUT_VAL[4] ={0XEF,0XDF,0XBF,0X7F};
     6b8:	8f ee       	ldi	r24, 0xEF	; 239
     6ba:	8c 83       	std	Y+4, r24	; 0x04
     6bc:	8f ed       	ldi	r24, 0xDF	; 223
     6be:	8d 83       	std	Y+5, r24	; 0x05
     6c0:	8f eb       	ldi	r24, 0xBF	; 191
     6c2:	8e 83       	std	Y+6, r24	; 0x06
     6c4:	8f e7       	ldi	r24, 0x7F	; 127
     6c6:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t IN_VAL[4] ={0XE,0XD,0XB,0X7};
     6c8:	8e e0       	ldi	r24, 0x0E	; 14
     6ca:	88 87       	std	Y+8, r24	; 0x08
     6cc:	8d e0       	ldi	r24, 0x0D	; 13
     6ce:	89 87       	std	Y+9, r24	; 0x09
     6d0:	8b e0       	ldi	r24, 0x0B	; 11
     6d2:	8a 87       	std	Y+10, r24	; 0x0a
     6d4:	87 e0       	ldi	r24, 0x07	; 7
     6d6:	8b 87       	std	Y+11, r24	; 0x0b
	while (1)
	{
			for (uint8_t i=0,tmp;i<4;i++)
     6d8:	19 82       	std	Y+1, r1	; 0x01
     6da:	49 c0       	rjmp	.+146    	; 0x76e <get_key_presed+0xca>
			{
				write_to_calc(keypad_port,OUT_VAL[i]);
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	88 2f       	mov	r24, r24
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	9e 01       	movw	r18, r28
     6e4:	2c 5f       	subi	r18, 0xFC	; 252
     6e6:	3f 4f       	sbci	r19, 0xFF	; 255
     6e8:	82 0f       	add	r24, r18
     6ea:	93 1f       	adc	r25, r19
     6ec:	fc 01       	movw	r30, r24
     6ee:	90 81       	ld	r25, Z
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	69 2f       	mov	r22, r25
     6f4:	0e 94 4b 00 	call	0x96	; 0x96 <write_to_calc>
				tmp = read_from_calc(keypad_port);
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	0e 94 57 01 	call	0x2ae	; 0x2ae <read_from_calc>
     6fe:	8b 83       	std	Y+3, r24	; 0x03
				tmp &= 0X0F;
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	8f 70       	andi	r24, 0x0F	; 15
     704:	8b 83       	std	Y+3, r24	; 0x03
				for(uint8_t j=0;j<4;j++)
     706:	1a 82       	std	Y+2, r1	; 0x02
     708:	2c c0       	rjmp	.+88     	; 0x762 <get_key_presed+0xbe>
				{
					if(tmp == IN_VAL[j]) return MyKeypad[i-4][j];
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	88 2f       	mov	r24, r24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	9e 01       	movw	r18, r28
     712:	28 5f       	subi	r18, 0xF8	; 248
     714:	3f 4f       	sbci	r19, 0xFF	; 255
     716:	82 0f       	add	r24, r18
     718:	93 1f       	adc	r25, r19
     71a:	fc 01       	movw	r30, r24
     71c:	90 81       	ld	r25, Z
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	98 17       	cp	r25, r24
     722:	e1 f4       	brne	.+56     	; 0x75c <get_key_presed+0xb8>
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	9c 01       	movw	r18, r24
     72c:	24 50       	subi	r18, 0x04	; 4
     72e:	30 40       	sbci	r19, 0x00	; 0
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	22 0f       	add	r18, r18
     738:	33 1f       	adc	r19, r19
     73a:	22 0f       	add	r18, r18
     73c:	33 1f       	adc	r19, r19
     73e:	82 0f       	add	r24, r18
     740:	93 1f       	adc	r25, r19
     742:	80 50       	subi	r24, 0x00	; 0
     744:	9f 4f       	sbci	r25, 0xFF	; 255
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
				}					
			}
	}
}
     74a:	2b 96       	adiw	r28, 0x0b	; 11
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	cf 91       	pop	r28
     758:	df 91       	pop	r29
     75a:	08 95       	ret
			for (uint8_t i=0,tmp;i<4;i++)
			{
				write_to_calc(keypad_port,OUT_VAL[i]);
				tmp = read_from_calc(keypad_port);
				tmp &= 0X0F;
				for(uint8_t j=0;j<4;j++)
     75c:	8a 81       	ldd	r24, Y+2	; 0x02
     75e:	8f 5f       	subi	r24, 0xFF	; 255
     760:	8a 83       	std	Y+2, r24	; 0x02
     762:	8a 81       	ldd	r24, Y+2	; 0x02
     764:	84 30       	cpi	r24, 0x04	; 4
     766:	88 f2       	brcs	.-94     	; 0x70a <get_key_presed+0x66>
char get_key_presed(){
	uint8_t OUT_VAL[4] ={0XEF,0XDF,0XBF,0X7F};
	uint8_t IN_VAL[4] ={0XE,0XD,0XB,0X7};
	while (1)
	{
			for (uint8_t i=0,tmp;i<4;i++)
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	84 30       	cpi	r24, 0x04	; 4
     772:	08 f4       	brcc	.+2      	; 0x776 <get_key_presed+0xd2>
     774:	b3 cf       	rjmp	.-154    	; 0x6dc <get_key_presed+0x38>
				for(uint8_t j=0;j<4;j++)
				{
					if(tmp == IN_VAL[j]) return MyKeypad[i-4][j];
				}					
			}
	}
     776:	b0 cf       	rjmp	.-160    	; 0x6d8 <get_key_presed+0x34>

00000778 <Sign_to_Unsign>:
}

int Sign_to_Unsign(char *sign,int Num ,int x){
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	00 d0       	rcall	.+0      	; 0x77e <Sign_to_Unsign+0x6>
     77e:	00 d0       	rcall	.+0      	; 0x780 <Sign_to_Unsign+0x8>
     780:	00 d0       	rcall	.+0      	; 0x782 <Sign_to_Unsign+0xa>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	89 83       	std	Y+1, r24	; 0x01
     78a:	7c 83       	std	Y+4, r23	; 0x04
     78c:	6b 83       	std	Y+3, r22	; 0x03
     78e:	5e 83       	std	Y+6, r21	; 0x06
     790:	4d 83       	std	Y+5, r20	; 0x05
		ret+=sign[Num]-'0';
		ret*=10;
		Num++;
	}
	return (ret/10)*mul;*/
}
     792:	26 96       	adiw	r28, 0x06	; 6
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <res>:
 
int res(int firNum ,int SecNum,char op){
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <res+0x6>
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <res+0x8>
     7ac:	0f 92       	push	r0
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	7c 83       	std	Y+4, r23	; 0x04
     7b8:	6b 83       	std	Y+3, r22	; 0x03
     7ba:	4d 83       	std	Y+5, r20	; 0x05
			if(SecNum=0)
			  write_to_LCD(Error);
			else
			  return firNum/SecNum;  
		} */			
}
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <operate>:

void operate(){
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
				break;
			}
			if (arr[i]=='=') return ;
		}
	}*/
}
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	08 95       	ret

000007da <to_string>:

void to_string(int in){ 
     7da:	df 93       	push	r29
     7dc:	cf 93       	push	r28
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <to_string+0x6>
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	9a 83       	std	Y+2, r25	; 0x02
     7e6:	89 83       	std	Y+1, r24	; 0x01
		tarr[ptr++]=(in%10)+'0';
		in/=10;
	}
	if (tmp<0) tarr[ptr++]='-';
	for (int i=0;i<ptr;i++) arr[i]=tarr[ptr-1-i];*/
}
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <calculate>:

int calculate(){
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
		f=Sign_to_Unsign(arr,0,pos-1);
		s=Sign_to_Unsign(arr,pos+1,sz-2);
		return res(f,s,op);
	}
*/
}
     7fa:	cf 91       	pop	r28
     7fc:	df 91       	pop	r29
     7fe:	08 95       	ret

00000800 <main>:

int main(void)
{
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	df 93       	push	r29
     806:	cf 93       	push	r28
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	2f 97       	sbiw	r28, 0x0f	; 15
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
	init_calc();
     818:	84 e2       	ldi	r24, 0x24	; 36
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	2f ef       	ldi	r18, 0xFF	; 255
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
     822:	87 e2       	ldi	r24, 0x27	; 39
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	2f ef       	ldi	r18, 0xFF	; 255
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	61 e8       	ldi	r22, 0x81	; 129
     830:	0e 94 4b 00 	call	0x96	; 0x96 <write_to_calc>
	INIT_LCD();
     834:	0e 94 13 03 	call	0x626	; 0x626 <INIT_LCD>
	print_to_LCD("hello");
     838:	80 e1       	ldi	r24, 0x10	; 16
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 34 03 	call	0x668	; 0x668 <print_to_LCD>
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	aa e7       	ldi	r26, 0x7A	; 122
     846:	b4 e4       	ldi	r27, 0x44	; 68
     848:	8a 83       	std	Y+2, r24	; 0x02
     84a:	9b 83       	std	Y+3, r25	; 0x03
     84c:	ac 83       	std	Y+4, r26	; 0x04
     84e:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     850:	6a 81       	ldd	r22, Y+2	; 0x02
     852:	7b 81       	ldd	r23, Y+3	; 0x03
     854:	8c 81       	ldd	r24, Y+4	; 0x04
     856:	9d 81       	ldd	r25, Y+5	; 0x05
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	4a e7       	ldi	r20, 0x7A	; 122
     85e:	55 e4       	ldi	r21, 0x45	; 69
     860:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8e 83       	std	Y+6, r24	; 0x06
     86a:	9f 83       	std	Y+7, r25	; 0x07
     86c:	a8 87       	std	Y+8, r26	; 0x08
     86e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     870:	11 e0       	ldi	r17, 0x01	; 1
     872:	6e 81       	ldd	r22, Y+6	; 0x06
     874:	7f 81       	ldd	r23, Y+7	; 0x07
     876:	88 85       	ldd	r24, Y+8	; 0x08
     878:	99 85       	ldd	r25, Y+9	; 0x09
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e8       	ldi	r20, 0x80	; 128
     880:	5f e3       	ldi	r21, 0x3F	; 63
     882:	0e 94 97 08 	call	0x112e	; 0x112e <__ltsf2>
     886:	88 23       	and	r24, r24
     888:	0c f0       	brlt	.+2      	; 0x88c <main+0x8c>
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	11 23       	and	r17, r17
     88e:	29 f0       	breq	.+10     	; 0x89a <main+0x9a>
		__ticks = 1;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	9b 87       	std	Y+11, r25	; 0x0b
     896:	8a 87       	std	Y+10, r24	; 0x0a
     898:	46 c0       	rjmp	.+140    	; 0x926 <__stack+0x27>
	else if (__tmp > 65535)
     89a:	11 e0       	ldi	r17, 0x01	; 1
     89c:	6e 81       	ldd	r22, Y+6	; 0x06
     89e:	7f 81       	ldd	r23, Y+7	; 0x07
     8a0:	88 85       	ldd	r24, Y+8	; 0x08
     8a2:	99 85       	ldd	r25, Y+9	; 0x09
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	3f ef       	ldi	r19, 0xFF	; 255
     8a8:	4f e7       	ldi	r20, 0x7F	; 127
     8aa:	57 e4       	ldi	r21, 0x47	; 71
     8ac:	0e 94 37 08 	call	0x106e	; 0x106e <__gtsf2>
     8b0:	18 16       	cp	r1, r24
     8b2:	0c f0       	brlt	.+2      	; 0x8b6 <main+0xb6>
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	11 23       	and	r17, r17
     8b8:	61 f1       	breq	.+88     	; 0x912 <__stack+0x13>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ba:	6a 81       	ldd	r22, Y+2	; 0x02
     8bc:	7b 81       	ldd	r23, Y+3	; 0x03
     8be:	8c 81       	ldd	r24, Y+4	; 0x04
     8c0:	9d 81       	ldd	r25, Y+5	; 0x05
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e2       	ldi	r20, 0x20	; 32
     8c8:	51 e4       	ldi	r21, 0x41	; 65
     8ca:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	bc 01       	movw	r22, r24
     8d4:	cd 01       	movw	r24, r26
     8d6:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	9b 87       	std	Y+11, r25	; 0x0b
     8e0:	8a 87       	std	Y+10, r24	; 0x0a
     8e2:	12 c0       	rjmp	.+36     	; 0x908 <__stack+0x9>
     8e4:	80 e9       	ldi	r24, 0x90	; 144
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	9d 87       	std	Y+13, r25	; 0x0d
     8ea:	8c 87       	std	Y+12, r24	; 0x0c
     8ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ee:	9d 85       	ldd	r25, Y+13	; 0x0d
     8f0:	8c 01       	movw	r16, r24
     8f2:	c8 01       	movw	r24, r16
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <main+0xf4>
     8f8:	8c 01       	movw	r16, r24
     8fa:	1d 87       	std	Y+13, r17	; 0x0d
     8fc:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fe:	8a 85       	ldd	r24, Y+10	; 0x0a
     900:	9b 85       	ldd	r25, Y+11	; 0x0b
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	9b 87       	std	Y+11, r25	; 0x0b
     906:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     908:	8a 85       	ldd	r24, Y+10	; 0x0a
     90a:	9b 85       	ldd	r25, Y+11	; 0x0b
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	51 f7       	brne	.-44     	; 0x8e4 <main+0xe4>
     910:	17 c0       	rjmp	.+46     	; 0x940 <__stack+0x41>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     912:	6e 81       	ldd	r22, Y+6	; 0x06
     914:	7f 81       	ldd	r23, Y+7	; 0x07
     916:	88 85       	ldd	r24, Y+8	; 0x08
     918:	99 85       	ldd	r25, Y+9	; 0x09
     91a:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
     91e:	dc 01       	movw	r26, r24
     920:	cb 01       	movw	r24, r22
     922:	9b 87       	std	Y+11, r25	; 0x0b
     924:	8a 87       	std	Y+10, r24	; 0x0a
     926:	8a 85       	ldd	r24, Y+10	; 0x0a
     928:	9b 85       	ldd	r25, Y+11	; 0x0b
     92a:	9f 87       	std	Y+15, r25	; 0x0f
     92c:	8e 87       	std	Y+14, r24	; 0x0e
     92e:	8e 85       	ldd	r24, Y+14	; 0x0e
     930:	9f 85       	ldd	r25, Y+15	; 0x0f
     932:	8c 01       	movw	r16, r24
     934:	f8 01       	movw	r30, r16
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <__stack+0x37>
     93a:	8f 01       	movw	r16, r30
     93c:	1f 87       	std	Y+15, r17	; 0x0f
     93e:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(1000);
	SEND_TO_LCD(clr,CMD);
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	0e 94 65 02 	call	0x4ca	; 0x4ca <SEND_TO_LCD>
	SEND_TO_LCD(start_1st_line,CMD);
     948:	80 e8       	ldi	r24, 0x80	; 128
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	0e 94 65 02 	call	0x4ca	; 0x4ca <SEND_TO_LCD>
	char ch = get_key_presed();
     950:	0e 94 52 03 	call	0x6a4	; 0x6a4 <get_key_presed>
     954:	89 83       	std	Y+1, r24	; 0x01
	write_to_LCD(ch);
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	0e 94 26 03 	call	0x64c	; 0x64c <write_to_LCD>
	return 0;
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	2f 96       	adiw	r28, 0x0f	; 15
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	cf 91       	pop	r28
     96e:	df 91       	pop	r29
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <__fixunssfsi>:
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	7b 01       	movw	r14, r22
     980:	8c 01       	movw	r16, r24
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	5f e4       	ldi	r21, 0x4F	; 79
     98a:	0e 94 67 08 	call	0x10ce	; 0x10ce <__gesf2>
     98e:	87 fd       	sbrc	r24, 7
     990:	11 c0       	rjmp	.+34     	; 0x9b4 <__fixunssfsi+0x3e>
     992:	c8 01       	movw	r24, r16
     994:	b7 01       	movw	r22, r14
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	5f e4       	ldi	r21, 0x4F	; 79
     99e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__subsf3>
     9a2:	0e 94 c7 08 	call	0x118e	; 0x118e <__fixsfsi>
     9a6:	9b 01       	movw	r18, r22
     9a8:	ac 01       	movw	r20, r24
     9aa:	20 50       	subi	r18, 0x00	; 0
     9ac:	30 40       	sbci	r19, 0x00	; 0
     9ae:	40 40       	sbci	r20, 0x00	; 0
     9b0:	50 48       	sbci	r21, 0x80	; 128
     9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <__fixunssfsi+0x4a>
     9b4:	c8 01       	movw	r24, r16
     9b6:	b7 01       	movw	r22, r14
     9b8:	0e 94 c7 08 	call	0x118e	; 0x118e <__fixsfsi>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	b9 01       	movw	r22, r18
     9c2:	ca 01       	movw	r24, r20
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	08 95       	ret

000009ce <_fpadd_parts>:
     9ce:	a0 e0       	ldi	r26, 0x00	; 0
     9d0:	b0 e0       	ldi	r27, 0x00	; 0
     9d2:	ed ee       	ldi	r30, 0xED	; 237
     9d4:	f4 e0       	ldi	r31, 0x04	; 4
     9d6:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__prologue_saves__+0x8>
     9da:	fc 01       	movw	r30, r24
     9dc:	ea 01       	movw	r28, r20
     9de:	80 81       	ld	r24, Z
     9e0:	82 30       	cpi	r24, 0x02	; 2
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <_fpadd_parts+0x18>
     9e4:	38 c1       	rjmp	.+624    	; 0xc56 <_fpadd_parts+0x288>
     9e6:	db 01       	movw	r26, r22
     9e8:	9c 91       	ld	r25, X
     9ea:	92 30       	cpi	r25, 0x02	; 2
     9ec:	08 f4       	brcc	.+2      	; 0x9f0 <_fpadd_parts+0x22>
     9ee:	30 c1       	rjmp	.+608    	; 0xc50 <_fpadd_parts+0x282>
     9f0:	84 30       	cpi	r24, 0x04	; 4
     9f2:	59 f4       	brne	.+22     	; 0xa0a <_fpadd_parts+0x3c>
     9f4:	94 30       	cpi	r25, 0x04	; 4
     9f6:	09 f0       	breq	.+2      	; 0x9fa <_fpadd_parts+0x2c>
     9f8:	2e c1       	rjmp	.+604    	; 0xc56 <_fpadd_parts+0x288>
     9fa:	91 81       	ldd	r25, Z+1	; 0x01
     9fc:	11 96       	adiw	r26, 0x01	; 1
     9fe:	8c 91       	ld	r24, X
     a00:	11 97       	sbiw	r26, 0x01	; 1
     a02:	98 17       	cp	r25, r24
     a04:	09 f0       	breq	.+2      	; 0xa08 <_fpadd_parts+0x3a>
     a06:	21 c1       	rjmp	.+578    	; 0xc4a <_fpadd_parts+0x27c>
     a08:	26 c1       	rjmp	.+588    	; 0xc56 <_fpadd_parts+0x288>
     a0a:	94 30       	cpi	r25, 0x04	; 4
     a0c:	09 f4       	brne	.+2      	; 0xa10 <_fpadd_parts+0x42>
     a0e:	20 c1       	rjmp	.+576    	; 0xc50 <_fpadd_parts+0x282>
     a10:	92 30       	cpi	r25, 0x02	; 2
     a12:	b1 f4       	brne	.+44     	; 0xa40 <_fpadd_parts+0x72>
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	09 f0       	breq	.+2      	; 0xa1a <_fpadd_parts+0x4c>
     a18:	1e c1       	rjmp	.+572    	; 0xc56 <_fpadd_parts+0x288>
     a1a:	ca 01       	movw	r24, r20
     a1c:	af 01       	movw	r20, r30
     a1e:	28 e0       	ldi	r18, 0x08	; 8
     a20:	da 01       	movw	r26, r20
     a22:	0d 90       	ld	r0, X+
     a24:	ad 01       	movw	r20, r26
     a26:	dc 01       	movw	r26, r24
     a28:	0d 92       	st	X+, r0
     a2a:	cd 01       	movw	r24, r26
     a2c:	21 50       	subi	r18, 0x01	; 1
     a2e:	c1 f7       	brne	.-16     	; 0xa20 <_fpadd_parts+0x52>
     a30:	db 01       	movw	r26, r22
     a32:	11 96       	adiw	r26, 0x01	; 1
     a34:	8c 91       	ld	r24, X
     a36:	11 97       	sbiw	r26, 0x01	; 1
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	89 23       	and	r24, r25
     a3c:	89 83       	std	Y+1, r24	; 0x01
     a3e:	0a c1       	rjmp	.+532    	; 0xc54 <_fpadd_parts+0x286>
     a40:	82 30       	cpi	r24, 0x02	; 2
     a42:	09 f4       	brne	.+2      	; 0xa46 <_fpadd_parts+0x78>
     a44:	05 c1       	rjmp	.+522    	; 0xc50 <_fpadd_parts+0x282>
     a46:	c2 80       	ldd	r12, Z+2	; 0x02
     a48:	d3 80       	ldd	r13, Z+3	; 0x03
     a4a:	db 01       	movw	r26, r22
     a4c:	12 96       	adiw	r26, 0x02	; 2
     a4e:	6d 90       	ld	r6, X+
     a50:	7c 90       	ld	r7, X
     a52:	13 97       	sbiw	r26, 0x03	; 3
     a54:	24 81       	ldd	r18, Z+4	; 0x04
     a56:	35 81       	ldd	r19, Z+5	; 0x05
     a58:	46 81       	ldd	r20, Z+6	; 0x06
     a5a:	57 81       	ldd	r21, Z+7	; 0x07
     a5c:	14 96       	adiw	r26, 0x04	; 4
     a5e:	ed 90       	ld	r14, X+
     a60:	fd 90       	ld	r15, X+
     a62:	0d 91       	ld	r16, X+
     a64:	1c 91       	ld	r17, X
     a66:	17 97       	sbiw	r26, 0x07	; 7
     a68:	c6 01       	movw	r24, r12
     a6a:	86 19       	sub	r24, r6
     a6c:	97 09       	sbc	r25, r7
     a6e:	5c 01       	movw	r10, r24
     a70:	97 ff       	sbrs	r25, 7
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <_fpadd_parts+0xae>
     a74:	aa 24       	eor	r10, r10
     a76:	bb 24       	eor	r11, r11
     a78:	a8 1a       	sub	r10, r24
     a7a:	b9 0a       	sbc	r11, r25
     a7c:	b0 e2       	ldi	r27, 0x20	; 32
     a7e:	ab 16       	cp	r10, r27
     a80:	b1 04       	cpc	r11, r1
     a82:	0c f0       	brlt	.+2      	; 0xa86 <_fpadd_parts+0xb8>
     a84:	61 c0       	rjmp	.+194    	; 0xb48 <_fpadd_parts+0x17a>
     a86:	18 16       	cp	r1, r24
     a88:	19 06       	cpc	r1, r25
     a8a:	6c f5       	brge	.+90     	; 0xae6 <_fpadd_parts+0x118>
     a8c:	37 01       	movw	r6, r14
     a8e:	48 01       	movw	r8, r16
     a90:	0a 2c       	mov	r0, r10
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <_fpadd_parts+0xce>
     a94:	96 94       	lsr	r9
     a96:	87 94       	ror	r8
     a98:	77 94       	ror	r7
     a9a:	67 94       	ror	r6
     a9c:	0a 94       	dec	r0
     a9e:	d2 f7       	brpl	.-12     	; 0xa94 <_fpadd_parts+0xc6>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	0a 2c       	mov	r0, r10
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <_fpadd_parts+0xe6>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	aa 1f       	adc	r26, r26
     ab2:	bb 1f       	adc	r27, r27
     ab4:	0a 94       	dec	r0
     ab6:	d2 f7       	brpl	.-12     	; 0xaac <_fpadd_parts+0xde>
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	a1 09       	sbc	r26, r1
     abc:	b1 09       	sbc	r27, r1
     abe:	8e 21       	and	r24, r14
     ac0:	9f 21       	and	r25, r15
     ac2:	a0 23       	and	r26, r16
     ac4:	b1 23       	and	r27, r17
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	e3 94       	inc	r14
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	a1 05       	cpc	r26, r1
     ad2:	b1 05       	cpc	r27, r1
     ad4:	19 f4       	brne	.+6      	; 0xadc <_fpadd_parts+0x10e>
     ad6:	ee 24       	eor	r14, r14
     ad8:	ff 24       	eor	r15, r15
     ada:	87 01       	movw	r16, r14
     adc:	e6 28       	or	r14, r6
     ade:	f7 28       	or	r15, r7
     ae0:	08 29       	or	r16, r8
     ae2:	19 29       	or	r17, r9
     ae4:	3c c0       	rjmp	.+120    	; 0xb5e <_fpadd_parts+0x190>
     ae6:	00 97       	sbiw	r24, 0x00	; 0
     ae8:	d1 f1       	breq	.+116    	; 0xb5e <_fpadd_parts+0x190>
     aea:	ca 0c       	add	r12, r10
     aec:	db 1c       	adc	r13, r11
     aee:	39 01       	movw	r6, r18
     af0:	4a 01       	movw	r8, r20
     af2:	0a 2c       	mov	r0, r10
     af4:	04 c0       	rjmp	.+8      	; 0xafe <_fpadd_parts+0x130>
     af6:	96 94       	lsr	r9
     af8:	87 94       	ror	r8
     afa:	77 94       	ror	r7
     afc:	67 94       	ror	r6
     afe:	0a 94       	dec	r0
     b00:	d2 f7       	brpl	.-12     	; 0xaf6 <_fpadd_parts+0x128>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	0a 2c       	mov	r0, r10
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <_fpadd_parts+0x148>
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	aa 1f       	adc	r26, r26
     b14:	bb 1f       	adc	r27, r27
     b16:	0a 94       	dec	r0
     b18:	d2 f7       	brpl	.-12     	; 0xb0e <_fpadd_parts+0x140>
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	a1 09       	sbc	r26, r1
     b1e:	b1 09       	sbc	r27, r1
     b20:	82 23       	and	r24, r18
     b22:	93 23       	and	r25, r19
     b24:	a4 23       	and	r26, r20
     b26:	b5 23       	and	r27, r21
     b28:	21 e0       	ldi	r18, 0x01	; 1
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	19 f4       	brne	.+6      	; 0xb3e <_fpadd_parts+0x170>
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	a9 01       	movw	r20, r18
     b3e:	26 29       	or	r18, r6
     b40:	37 29       	or	r19, r7
     b42:	48 29       	or	r20, r8
     b44:	59 29       	or	r21, r9
     b46:	0b c0       	rjmp	.+22     	; 0xb5e <_fpadd_parts+0x190>
     b48:	6c 14       	cp	r6, r12
     b4a:	7d 04       	cpc	r7, r13
     b4c:	24 f4       	brge	.+8      	; 0xb56 <_fpadd_parts+0x188>
     b4e:	ee 24       	eor	r14, r14
     b50:	ff 24       	eor	r15, r15
     b52:	87 01       	movw	r16, r14
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <_fpadd_parts+0x190>
     b56:	63 01       	movw	r12, r6
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	a9 01       	movw	r20, r18
     b5e:	81 81       	ldd	r24, Z+1	; 0x01
     b60:	fb 01       	movw	r30, r22
     b62:	91 81       	ldd	r25, Z+1	; 0x01
     b64:	89 17       	cp	r24, r25
     b66:	09 f4       	brne	.+2      	; 0xb6a <_fpadd_parts+0x19c>
     b68:	45 c0       	rjmp	.+138    	; 0xbf4 <_fpadd_parts+0x226>
     b6a:	88 23       	and	r24, r24
     b6c:	49 f0       	breq	.+18     	; 0xb80 <_fpadd_parts+0x1b2>
     b6e:	d8 01       	movw	r26, r16
     b70:	c7 01       	movw	r24, r14
     b72:	82 1b       	sub	r24, r18
     b74:	93 0b       	sbc	r25, r19
     b76:	a4 0b       	sbc	r26, r20
     b78:	b5 0b       	sbc	r27, r21
     b7a:	9c 01       	movw	r18, r24
     b7c:	ad 01       	movw	r20, r26
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <_fpadd_parts+0x1ba>
     b80:	2e 19       	sub	r18, r14
     b82:	3f 09       	sbc	r19, r15
     b84:	40 0b       	sbc	r20, r16
     b86:	51 0b       	sbc	r21, r17
     b88:	57 fd       	sbrc	r21, 7
     b8a:	04 c0       	rjmp	.+8      	; 0xb94 <_fpadd_parts+0x1c6>
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	db 82       	std	Y+3, r13	; 0x03
     b90:	ca 82       	std	Y+2, r12	; 0x02
     b92:	0b c0       	rjmp	.+22     	; 0xbaa <_fpadd_parts+0x1dc>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	89 83       	std	Y+1, r24	; 0x01
     b98:	db 82       	std	Y+3, r13	; 0x03
     b9a:	ca 82       	std	Y+2, r12	; 0x02
     b9c:	50 95       	com	r21
     b9e:	40 95       	com	r20
     ba0:	30 95       	com	r19
     ba2:	21 95       	neg	r18
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	4f 4f       	sbci	r20, 0xFF	; 255
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	2c 83       	std	Y+4, r18	; 0x04
     bac:	3d 83       	std	Y+5, r19	; 0x05
     bae:	4e 83       	std	Y+6, r20	; 0x06
     bb0:	5f 83       	std	Y+7, r21	; 0x07
     bb2:	0d c0       	rjmp	.+26     	; 0xbce <_fpadd_parts+0x200>
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	aa 1f       	adc	r26, r26
     bba:	bb 1f       	adc	r27, r27
     bbc:	8c 83       	std	Y+4, r24	; 0x04
     bbe:	9d 83       	std	Y+5, r25	; 0x05
     bc0:	ae 83       	std	Y+6, r26	; 0x06
     bc2:	bf 83       	std	Y+7, r27	; 0x07
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	9b 81       	ldd	r25, Y+3	; 0x03
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	9b 83       	std	Y+3, r25	; 0x03
     bcc:	8a 83       	std	Y+2, r24	; 0x02
     bce:	8c 81       	ldd	r24, Y+4	; 0x04
     bd0:	9d 81       	ldd	r25, Y+5	; 0x05
     bd2:	ae 81       	ldd	r26, Y+6	; 0x06
     bd4:	bf 81       	ldd	r27, Y+7	; 0x07
     bd6:	9c 01       	movw	r18, r24
     bd8:	ad 01       	movw	r20, r26
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	30 40       	sbci	r19, 0x00	; 0
     bde:	40 40       	sbci	r20, 0x00	; 0
     be0:	50 40       	sbci	r21, 0x00	; 0
     be2:	2f 3f       	cpi	r18, 0xFF	; 255
     be4:	ef ef       	ldi	r30, 0xFF	; 255
     be6:	3e 07       	cpc	r19, r30
     be8:	ef ef       	ldi	r30, 0xFF	; 255
     bea:	4e 07       	cpc	r20, r30
     bec:	ef e3       	ldi	r30, 0x3F	; 63
     bee:	5e 07       	cpc	r21, r30
     bf0:	08 f3       	brcs	.-62     	; 0xbb4 <_fpadd_parts+0x1e6>
     bf2:	0b c0       	rjmp	.+22     	; 0xc0a <_fpadd_parts+0x23c>
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	db 82       	std	Y+3, r13	; 0x03
     bf8:	ca 82       	std	Y+2, r12	; 0x02
     bfa:	2e 0d       	add	r18, r14
     bfc:	3f 1d       	adc	r19, r15
     bfe:	40 1f       	adc	r20, r16
     c00:	51 1f       	adc	r21, r17
     c02:	2c 83       	std	Y+4, r18	; 0x04
     c04:	3d 83       	std	Y+5, r19	; 0x05
     c06:	4e 83       	std	Y+6, r20	; 0x06
     c08:	5f 83       	std	Y+7, r21	; 0x07
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	88 83       	st	Y, r24
     c0e:	2c 81       	ldd	r18, Y+4	; 0x04
     c10:	3d 81       	ldd	r19, Y+5	; 0x05
     c12:	4e 81       	ldd	r20, Y+6	; 0x06
     c14:	5f 81       	ldd	r21, Y+7	; 0x07
     c16:	57 ff       	sbrs	r21, 7
     c18:	1d c0       	rjmp	.+58     	; 0xc54 <_fpadd_parts+0x286>
     c1a:	da 01       	movw	r26, r20
     c1c:	c9 01       	movw	r24, r18
     c1e:	81 70       	andi	r24, 0x01	; 1
     c20:	90 70       	andi	r25, 0x00	; 0
     c22:	a0 70       	andi	r26, 0x00	; 0
     c24:	b0 70       	andi	r27, 0x00	; 0
     c26:	56 95       	lsr	r21
     c28:	47 95       	ror	r20
     c2a:	37 95       	ror	r19
     c2c:	27 95       	ror	r18
     c2e:	82 2b       	or	r24, r18
     c30:	93 2b       	or	r25, r19
     c32:	a4 2b       	or	r26, r20
     c34:	b5 2b       	or	r27, r21
     c36:	8c 83       	std	Y+4, r24	; 0x04
     c38:	9d 83       	std	Y+5, r25	; 0x05
     c3a:	ae 83       	std	Y+6, r26	; 0x06
     c3c:	bf 83       	std	Y+7, r27	; 0x07
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	9b 81       	ldd	r25, Y+3	; 0x03
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	9b 83       	std	Y+3, r25	; 0x03
     c46:	8a 83       	std	Y+2, r24	; 0x02
     c48:	05 c0       	rjmp	.+10     	; 0xc54 <_fpadd_parts+0x286>
     c4a:	e6 e1       	ldi	r30, 0x16	; 22
     c4c:	f1 e0       	ldi	r31, 0x01	; 1
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <_fpadd_parts+0x288>
     c50:	fb 01       	movw	r30, r22
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <_fpadd_parts+0x288>
     c54:	fe 01       	movw	r30, r28
     c56:	cf 01       	movw	r24, r30
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	ee e0       	ldi	r30, 0x0E	; 14
     c5e:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__epilogue_restores__+0x8>

00000c62 <__addsf3>:
     c62:	a0 e2       	ldi	r26, 0x20	; 32
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e3       	ldi	r30, 0x37	; 55
     c68:	f6 e0       	ldi	r31, 0x06	; 6
     c6a:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__prologue_saves__+0x18>
     c6e:	69 83       	std	Y+1, r22	; 0x01
     c70:	7a 83       	std	Y+2, r23	; 0x02
     c72:	8b 83       	std	Y+3, r24	; 0x03
     c74:	9c 83       	std	Y+4, r25	; 0x04
     c76:	2d 83       	std	Y+5, r18	; 0x05
     c78:	3e 83       	std	Y+6, r19	; 0x06
     c7a:	4f 83       	std	Y+7, r20	; 0x07
     c7c:	58 87       	std	Y+8, r21	; 0x08
     c7e:	89 e0       	ldi	r24, 0x09	; 9
     c80:	e8 2e       	mov	r14, r24
     c82:	f1 2c       	mov	r15, r1
     c84:	ec 0e       	add	r14, r28
     c86:	fd 1e       	adc	r15, r29
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	b7 01       	movw	r22, r14
     c8e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
     c92:	8e 01       	movw	r16, r28
     c94:	0f 5e       	subi	r16, 0xEF	; 239
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	ce 01       	movw	r24, r28
     c9a:	05 96       	adiw	r24, 0x05	; 5
     c9c:	b8 01       	movw	r22, r16
     c9e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
     ca2:	c7 01       	movw	r24, r14
     ca4:	b8 01       	movw	r22, r16
     ca6:	ae 01       	movw	r20, r28
     ca8:	47 5e       	subi	r20, 0xE7	; 231
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_fpadd_parts>
     cb0:	0e 94 19 09 	call	0x1232	; 0x1232 <__pack_f>
     cb4:	a0 96       	adiw	r28, 0x20	; 32
     cb6:	e6 e0       	ldi	r30, 0x06	; 6
     cb8:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__+0x18>

00000cbc <__subsf3>:
     cbc:	a0 e2       	ldi	r26, 0x20	; 32
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e4 e6       	ldi	r30, 0x64	; 100
     cc2:	f6 e0       	ldi	r31, 0x06	; 6
     cc4:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__prologue_saves__+0x18>
     cc8:	69 83       	std	Y+1, r22	; 0x01
     cca:	7a 83       	std	Y+2, r23	; 0x02
     ccc:	8b 83       	std	Y+3, r24	; 0x03
     cce:	9c 83       	std	Y+4, r25	; 0x04
     cd0:	2d 83       	std	Y+5, r18	; 0x05
     cd2:	3e 83       	std	Y+6, r19	; 0x06
     cd4:	4f 83       	std	Y+7, r20	; 0x07
     cd6:	58 87       	std	Y+8, r21	; 0x08
     cd8:	8e 01       	movw	r16, r28
     cda:	07 5f       	subi	r16, 0xF7	; 247
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	b8 01       	movw	r22, r16
     ce4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
     ce8:	91 e1       	ldi	r25, 0x11	; 17
     cea:	e9 2e       	mov	r14, r25
     cec:	f1 2c       	mov	r15, r1
     cee:	ec 0e       	add	r14, r28
     cf0:	fd 1e       	adc	r15, r29
     cf2:	ce 01       	movw	r24, r28
     cf4:	05 96       	adiw	r24, 0x05	; 5
     cf6:	b7 01       	movw	r22, r14
     cf8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
     cfc:	8a 89       	ldd	r24, Y+18	; 0x12
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	89 27       	eor	r24, r25
     d02:	8a 8b       	std	Y+18, r24	; 0x12
     d04:	c8 01       	movw	r24, r16
     d06:	b7 01       	movw	r22, r14
     d08:	ae 01       	movw	r20, r28
     d0a:	47 5e       	subi	r20, 0xE7	; 231
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_fpadd_parts>
     d12:	0e 94 19 09 	call	0x1232	; 0x1232 <__pack_f>
     d16:	a0 96       	adiw	r28, 0x20	; 32
     d18:	e6 e0       	ldi	r30, 0x06	; 6
     d1a:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__+0x18>

00000d1e <__mulsf3>:
     d1e:	a0 e2       	ldi	r26, 0x20	; 32
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e9       	ldi	r30, 0x95	; 149
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__prologue_saves__>
     d2a:	69 83       	std	Y+1, r22	; 0x01
     d2c:	7a 83       	std	Y+2, r23	; 0x02
     d2e:	8b 83       	std	Y+3, r24	; 0x03
     d30:	9c 83       	std	Y+4, r25	; 0x04
     d32:	2d 83       	std	Y+5, r18	; 0x05
     d34:	3e 83       	std	Y+6, r19	; 0x06
     d36:	4f 83       	std	Y+7, r20	; 0x07
     d38:	58 87       	std	Y+8, r21	; 0x08
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	be 01       	movw	r22, r28
     d40:	67 5f       	subi	r22, 0xF7	; 247
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
     d48:	ce 01       	movw	r24, r28
     d4a:	05 96       	adiw	r24, 0x05	; 5
     d4c:	be 01       	movw	r22, r28
     d4e:	6f 5e       	subi	r22, 0xEF	; 239
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
     d56:	99 85       	ldd	r25, Y+9	; 0x09
     d58:	92 30       	cpi	r25, 0x02	; 2
     d5a:	78 f0       	brcs	.+30     	; 0xd7a <__mulsf3+0x5c>
     d5c:	89 89       	ldd	r24, Y+17	; 0x11
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	c0 f0       	brcs	.+48     	; 0xd92 <__mulsf3+0x74>
     d62:	94 30       	cpi	r25, 0x04	; 4
     d64:	19 f4       	brne	.+6      	; 0xd6c <__mulsf3+0x4e>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	41 f4       	brne	.+16     	; 0xd7a <__mulsf3+0x5c>
     d6a:	cb c0       	rjmp	.+406    	; 0xf02 <__mulsf3+0x1e4>
     d6c:	84 30       	cpi	r24, 0x04	; 4
     d6e:	19 f4       	brne	.+6      	; 0xd76 <__mulsf3+0x58>
     d70:	92 30       	cpi	r25, 0x02	; 2
     d72:	79 f4       	brne	.+30     	; 0xd92 <__mulsf3+0x74>
     d74:	c6 c0       	rjmp	.+396    	; 0xf02 <__mulsf3+0x1e4>
     d76:	92 30       	cpi	r25, 0x02	; 2
     d78:	51 f4       	brne	.+20     	; 0xd8e <__mulsf3+0x70>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	2a 85       	ldd	r18, Y+10	; 0x0a
     d7e:	9a 89       	ldd	r25, Y+18	; 0x12
     d80:	29 17       	cp	r18, r25
     d82:	09 f4       	brne	.+2      	; 0xd86 <__mulsf3+0x68>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	8a 87       	std	Y+10, r24	; 0x0a
     d88:	ce 01       	movw	r24, r28
     d8a:	09 96       	adiw	r24, 0x09	; 9
     d8c:	bc c0       	rjmp	.+376    	; 0xf06 <__mulsf3+0x1e8>
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	51 f4       	brne	.+20     	; 0xda6 <__mulsf3+0x88>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	2a 85       	ldd	r18, Y+10	; 0x0a
     d96:	9a 89       	ldd	r25, Y+18	; 0x12
     d98:	29 17       	cp	r18, r25
     d9a:	09 f4       	brne	.+2      	; 0xd9e <__mulsf3+0x80>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	8a 8b       	std	Y+18, r24	; 0x12
     da0:	ce 01       	movw	r24, r28
     da2:	41 96       	adiw	r24, 0x11	; 17
     da4:	b0 c0       	rjmp	.+352    	; 0xf06 <__mulsf3+0x1e8>
     da6:	6d 84       	ldd	r6, Y+13	; 0x0d
     da8:	7e 84       	ldd	r7, Y+14	; 0x0e
     daa:	8f 84       	ldd	r8, Y+15	; 0x0f
     dac:	98 88       	ldd	r9, Y+16	; 0x10
     dae:	ed 88       	ldd	r14, Y+21	; 0x15
     db0:	fe 88       	ldd	r15, Y+22	; 0x16
     db2:	0f 89       	ldd	r16, Y+23	; 0x17
     db4:	18 8d       	ldd	r17, Y+24	; 0x18
     db6:	e0 e2       	ldi	r30, 0x20	; 32
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	dc 01       	movw	r26, r24
     dc0:	aa 24       	eor	r10, r10
     dc2:	bb 24       	eor	r11, r11
     dc4:	65 01       	movw	r12, r10
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	a9 01       	movw	r20, r18
     dcc:	b3 01       	movw	r22, r6
     dce:	61 70       	andi	r22, 0x01	; 1
     dd0:	70 70       	andi	r23, 0x00	; 0
     dd2:	61 15       	cp	r22, r1
     dd4:	71 05       	cpc	r23, r1
     dd6:	d1 f0       	breq	.+52     	; 0xe0c <__mulsf3+0xee>
     dd8:	2e 0d       	add	r18, r14
     dda:	3f 1d       	adc	r19, r15
     ddc:	40 1f       	adc	r20, r16
     dde:	51 1f       	adc	r21, r17
     de0:	15 01       	movw	r2, r10
     de2:	26 01       	movw	r4, r12
     de4:	28 0e       	add	r2, r24
     de6:	39 1e       	adc	r3, r25
     de8:	4a 1e       	adc	r4, r26
     dea:	5b 1e       	adc	r5, r27
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	2e 15       	cp	r18, r14
     df6:	3f 05       	cpc	r19, r15
     df8:	40 07       	cpc	r20, r16
     dfa:	51 07       	cpc	r21, r17
     dfc:	18 f0       	brcs	.+6      	; 0xe04 <__mulsf3+0xe6>
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	dc 01       	movw	r26, r24
     e04:	82 0d       	add	r24, r2
     e06:	93 1d       	adc	r25, r3
     e08:	a4 1d       	adc	r26, r4
     e0a:	b5 1d       	adc	r27, r5
     e0c:	aa 0c       	add	r10, r10
     e0e:	bb 1c       	adc	r11, r11
     e10:	cc 1c       	adc	r12, r12
     e12:	dd 1c       	adc	r13, r13
     e14:	17 ff       	sbrs	r17, 7
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <__mulsf3+0x10c>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	26 2e       	mov	r2, r22
     e1c:	31 2c       	mov	r3, r1
     e1e:	41 2c       	mov	r4, r1
     e20:	51 2c       	mov	r5, r1
     e22:	a2 28       	or	r10, r2
     e24:	b3 28       	or	r11, r3
     e26:	c4 28       	or	r12, r4
     e28:	d5 28       	or	r13, r5
     e2a:	31 97       	sbiw	r30, 0x01	; 1
     e2c:	49 f0       	breq	.+18     	; 0xe40 <__mulsf3+0x122>
     e2e:	ee 0c       	add	r14, r14
     e30:	ff 1c       	adc	r15, r15
     e32:	00 1f       	adc	r16, r16
     e34:	11 1f       	adc	r17, r17
     e36:	96 94       	lsr	r9
     e38:	87 94       	ror	r8
     e3a:	77 94       	ror	r7
     e3c:	67 94       	ror	r6
     e3e:	c6 cf       	rjmp	.-116    	; 0xdcc <__mulsf3+0xae>
     e40:	6b 89       	ldd	r22, Y+19	; 0x13
     e42:	7c 89       	ldd	r23, Y+20	; 0x14
     e44:	eb 85       	ldd	r30, Y+11	; 0x0b
     e46:	fc 85       	ldd	r31, Y+12	; 0x0c
     e48:	6e 0f       	add	r22, r30
     e4a:	7f 1f       	adc	r23, r31
     e4c:	6e 5f       	subi	r22, 0xFE	; 254
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	7c 8f       	std	Y+28, r23	; 0x1c
     e52:	6b 8f       	std	Y+27, r22	; 0x1b
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	ea 85       	ldd	r30, Y+10	; 0x0a
     e58:	7a 89       	ldd	r23, Y+18	; 0x12
     e5a:	e7 17       	cp	r30, r23
     e5c:	09 f4       	brne	.+2      	; 0xe60 <__mulsf3+0x142>
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	6a 8f       	std	Y+26, r22	; 0x1a
     e62:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e64:	7c 8d       	ldd	r23, Y+28	; 0x1c
     e66:	10 c0       	rjmp	.+32     	; 0xe88 <__mulsf3+0x16a>
     e68:	fc 01       	movw	r30, r24
     e6a:	e1 70       	andi	r30, 0x01	; 1
     e6c:	f0 70       	andi	r31, 0x00	; 0
     e6e:	30 97       	sbiw	r30, 0x00	; 0
     e70:	29 f0       	breq	.+10     	; 0xe7c <__mulsf3+0x15e>
     e72:	56 95       	lsr	r21
     e74:	47 95       	ror	r20
     e76:	37 95       	ror	r19
     e78:	27 95       	ror	r18
     e7a:	50 68       	ori	r21, 0x80	; 128
     e7c:	b6 95       	lsr	r27
     e7e:	a7 95       	ror	r26
     e80:	97 95       	ror	r25
     e82:	87 95       	ror	r24
     e84:	6f 5f       	subi	r22, 0xFF	; 255
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	b7 fd       	sbrc	r27, 7
     e8a:	ee cf       	rjmp	.-36     	; 0xe68 <__mulsf3+0x14a>
     e8c:	0c c0       	rjmp	.+24     	; 0xea6 <__mulsf3+0x188>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	aa 1f       	adc	r26, r26
     e94:	bb 1f       	adc	r27, r27
     e96:	57 fd       	sbrc	r21, 7
     e98:	81 60       	ori	r24, 0x01	; 1
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	44 1f       	adc	r20, r20
     ea0:	55 1f       	adc	r21, r21
     ea2:	61 50       	subi	r22, 0x01	; 1
     ea4:	70 40       	sbci	r23, 0x00	; 0
     ea6:	80 30       	cpi	r24, 0x00	; 0
     ea8:	e0 e0       	ldi	r30, 0x00	; 0
     eaa:	9e 07       	cpc	r25, r30
     eac:	e0 e0       	ldi	r30, 0x00	; 0
     eae:	ae 07       	cpc	r26, r30
     eb0:	e0 e4       	ldi	r30, 0x40	; 64
     eb2:	be 07       	cpc	r27, r30
     eb4:	60 f3       	brcs	.-40     	; 0xe8e <__mulsf3+0x170>
     eb6:	6b 8f       	std	Y+27, r22	; 0x1b
     eb8:	7c 8f       	std	Y+28, r23	; 0x1c
     eba:	6f e7       	ldi	r22, 0x7F	; 127
     ebc:	e6 2e       	mov	r14, r22
     ebe:	f1 2c       	mov	r15, r1
     ec0:	01 2d       	mov	r16, r1
     ec2:	11 2d       	mov	r17, r1
     ec4:	e8 22       	and	r14, r24
     ec6:	f9 22       	and	r15, r25
     ec8:	0a 23       	and	r16, r26
     eca:	1b 23       	and	r17, r27
     ecc:	60 e4       	ldi	r22, 0x40	; 64
     ece:	e6 16       	cp	r14, r22
     ed0:	f1 04       	cpc	r15, r1
     ed2:	01 05       	cpc	r16, r1
     ed4:	11 05       	cpc	r17, r1
     ed6:	61 f4       	brne	.+24     	; 0xef0 <__mulsf3+0x1d2>
     ed8:	87 fd       	sbrc	r24, 7
     eda:	0a c0       	rjmp	.+20     	; 0xef0 <__mulsf3+0x1d2>
     edc:	21 15       	cp	r18, r1
     ede:	31 05       	cpc	r19, r1
     ee0:	41 05       	cpc	r20, r1
     ee2:	51 05       	cpc	r21, r1
     ee4:	29 f0       	breq	.+10     	; 0xef0 <__mulsf3+0x1d2>
     ee6:	80 5c       	subi	r24, 0xC0	; 192
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	af 4f       	sbci	r26, 0xFF	; 255
     eec:	bf 4f       	sbci	r27, 0xFF	; 255
     eee:	80 78       	andi	r24, 0x80	; 128
     ef0:	8d 8f       	std	Y+29, r24	; 0x1d
     ef2:	9e 8f       	std	Y+30, r25	; 0x1e
     ef4:	af 8f       	std	Y+31, r26	; 0x1f
     ef6:	b8 a3       	std	Y+32, r27	; 0x20
     ef8:	83 e0       	ldi	r24, 0x03	; 3
     efa:	89 8f       	std	Y+25, r24	; 0x19
     efc:	ce 01       	movw	r24, r28
     efe:	49 96       	adiw	r24, 0x19	; 25
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <__mulsf3+0x1e8>
     f02:	86 e1       	ldi	r24, 0x16	; 22
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 19 09 	call	0x1232	; 0x1232 <__pack_f>
     f0a:	a0 96       	adiw	r28, 0x20	; 32
     f0c:	e2 e1       	ldi	r30, 0x12	; 18
     f0e:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__epilogue_restores__>

00000f12 <__divsf3>:
     f12:	a8 e1       	ldi	r26, 0x18	; 24
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ef e8       	ldi	r30, 0x8F	; 143
     f18:	f7 e0       	ldi	r31, 0x07	; 7
     f1a:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__prologue_saves__+0x10>
     f1e:	69 83       	std	Y+1, r22	; 0x01
     f20:	7a 83       	std	Y+2, r23	; 0x02
     f22:	8b 83       	std	Y+3, r24	; 0x03
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	2d 83       	std	Y+5, r18	; 0x05
     f28:	3e 83       	std	Y+6, r19	; 0x06
     f2a:	4f 83       	std	Y+7, r20	; 0x07
     f2c:	58 87       	std	Y+8, r21	; 0x08
     f2e:	8e 01       	movw	r16, r28
     f30:	07 5f       	subi	r16, 0xF7	; 247
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	b8 01       	movw	r22, r16
     f3a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
     f3e:	81 e1       	ldi	r24, 0x11	; 17
     f40:	e8 2e       	mov	r14, r24
     f42:	f1 2c       	mov	r15, r1
     f44:	ec 0e       	add	r14, r28
     f46:	fd 1e       	adc	r15, r29
     f48:	ce 01       	movw	r24, r28
     f4a:	05 96       	adiw	r24, 0x05	; 5
     f4c:	b7 01       	movw	r22, r14
     f4e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
     f52:	99 85       	ldd	r25, Y+9	; 0x09
     f54:	92 30       	cpi	r25, 0x02	; 2
     f56:	08 f4       	brcc	.+2      	; 0xf5a <__divsf3+0x48>
     f58:	83 c0       	rjmp	.+262    	; 0x1060 <__divsf3+0x14e>
     f5a:	89 89       	ldd	r24, Y+17	; 0x11
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	08 f4       	brcc	.+2      	; 0xf62 <__divsf3+0x50>
     f60:	7b c0       	rjmp	.+246    	; 0x1058 <__divsf3+0x146>
     f62:	2a 85       	ldd	r18, Y+10	; 0x0a
     f64:	3a 89       	ldd	r19, Y+18	; 0x12
     f66:	23 27       	eor	r18, r19
     f68:	2a 87       	std	Y+10, r18	; 0x0a
     f6a:	94 30       	cpi	r25, 0x04	; 4
     f6c:	11 f0       	breq	.+4      	; 0xf72 <__divsf3+0x60>
     f6e:	92 30       	cpi	r25, 0x02	; 2
     f70:	21 f4       	brne	.+8      	; 0xf7a <__divsf3+0x68>
     f72:	98 17       	cp	r25, r24
     f74:	09 f0       	breq	.+2      	; 0xf78 <__divsf3+0x66>
     f76:	6c c0       	rjmp	.+216    	; 0x1050 <__divsf3+0x13e>
     f78:	71 c0       	rjmp	.+226    	; 0x105c <__divsf3+0x14a>
     f7a:	84 30       	cpi	r24, 0x04	; 4
     f7c:	39 f4       	brne	.+14     	; 0xf8c <__divsf3+0x7a>
     f7e:	1d 86       	std	Y+13, r1	; 0x0d
     f80:	1e 86       	std	Y+14, r1	; 0x0e
     f82:	1f 86       	std	Y+15, r1	; 0x0f
     f84:	18 8a       	std	Y+16, r1	; 0x10
     f86:	1c 86       	std	Y+12, r1	; 0x0c
     f88:	1b 86       	std	Y+11, r1	; 0x0b
     f8a:	6a c0       	rjmp	.+212    	; 0x1060 <__divsf3+0x14e>
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	19 f4       	brne	.+6      	; 0xf96 <__divsf3+0x84>
     f90:	84 e0       	ldi	r24, 0x04	; 4
     f92:	89 87       	std	Y+9, r24	; 0x09
     f94:	65 c0       	rjmp	.+202    	; 0x1060 <__divsf3+0x14e>
     f96:	8b 85       	ldd	r24, Y+11	; 0x0b
     f98:	9c 85       	ldd	r25, Y+12	; 0x0c
     f9a:	2b 89       	ldd	r18, Y+19	; 0x13
     f9c:	3c 89       	ldd	r19, Y+20	; 0x14
     f9e:	82 1b       	sub	r24, r18
     fa0:	93 0b       	sbc	r25, r19
     fa2:	9c 87       	std	Y+12, r25	; 0x0c
     fa4:	8b 87       	std	Y+11, r24	; 0x0b
     fa6:	2d 85       	ldd	r18, Y+13	; 0x0d
     fa8:	3e 85       	ldd	r19, Y+14	; 0x0e
     faa:	4f 85       	ldd	r20, Y+15	; 0x0f
     fac:	58 89       	ldd	r21, Y+16	; 0x10
     fae:	ed 88       	ldd	r14, Y+21	; 0x15
     fb0:	fe 88       	ldd	r15, Y+22	; 0x16
     fb2:	0f 89       	ldd	r16, Y+23	; 0x17
     fb4:	18 8d       	ldd	r17, Y+24	; 0x18
     fb6:	2e 15       	cp	r18, r14
     fb8:	3f 05       	cpc	r19, r15
     fba:	40 07       	cpc	r20, r16
     fbc:	51 07       	cpc	r21, r17
     fbe:	38 f4       	brcc	.+14     	; 0xfce <__divsf3+0xbc>
     fc0:	22 0f       	add	r18, r18
     fc2:	33 1f       	adc	r19, r19
     fc4:	44 1f       	adc	r20, r20
     fc6:	55 1f       	adc	r21, r21
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9c 87       	std	Y+12, r25	; 0x0c
     fcc:	8b 87       	std	Y+11, r24	; 0x0b
     fce:	6f e1       	ldi	r22, 0x1F	; 31
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	a1 2c       	mov	r10, r1
     fd4:	b1 2c       	mov	r11, r1
     fd6:	c1 2c       	mov	r12, r1
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	da 2e       	mov	r13, r26
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	dc 01       	movw	r26, r24
     fe2:	2e 15       	cp	r18, r14
     fe4:	3f 05       	cpc	r19, r15
     fe6:	40 07       	cpc	r20, r16
     fe8:	51 07       	cpc	r21, r17
     fea:	40 f0       	brcs	.+16     	; 0xffc <__divsf3+0xea>
     fec:	8a 29       	or	r24, r10
     fee:	9b 29       	or	r25, r11
     ff0:	ac 29       	or	r26, r12
     ff2:	bd 29       	or	r27, r13
     ff4:	2e 19       	sub	r18, r14
     ff6:	3f 09       	sbc	r19, r15
     ff8:	40 0b       	sbc	r20, r16
     ffa:	51 0b       	sbc	r21, r17
     ffc:	d6 94       	lsr	r13
     ffe:	c7 94       	ror	r12
    1000:	b7 94       	ror	r11
    1002:	a7 94       	ror	r10
    1004:	22 0f       	add	r18, r18
    1006:	33 1f       	adc	r19, r19
    1008:	44 1f       	adc	r20, r20
    100a:	55 1f       	adc	r21, r21
    100c:	61 50       	subi	r22, 0x01	; 1
    100e:	70 40       	sbci	r23, 0x00	; 0
    1010:	41 f7       	brne	.-48     	; 0xfe2 <__divsf3+0xd0>
    1012:	6f e7       	ldi	r22, 0x7F	; 127
    1014:	e6 2e       	mov	r14, r22
    1016:	f1 2c       	mov	r15, r1
    1018:	01 2d       	mov	r16, r1
    101a:	11 2d       	mov	r17, r1
    101c:	e8 22       	and	r14, r24
    101e:	f9 22       	and	r15, r25
    1020:	0a 23       	and	r16, r26
    1022:	1b 23       	and	r17, r27
    1024:	60 e4       	ldi	r22, 0x40	; 64
    1026:	e6 16       	cp	r14, r22
    1028:	f1 04       	cpc	r15, r1
    102a:	01 05       	cpc	r16, r1
    102c:	11 05       	cpc	r17, r1
    102e:	61 f4       	brne	.+24     	; 0x1048 <__divsf3+0x136>
    1030:	87 fd       	sbrc	r24, 7
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <__divsf3+0x136>
    1034:	21 15       	cp	r18, r1
    1036:	31 05       	cpc	r19, r1
    1038:	41 05       	cpc	r20, r1
    103a:	51 05       	cpc	r21, r1
    103c:	29 f0       	breq	.+10     	; 0x1048 <__divsf3+0x136>
    103e:	80 5c       	subi	r24, 0xC0	; 192
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	af 4f       	sbci	r26, 0xFF	; 255
    1044:	bf 4f       	sbci	r27, 0xFF	; 255
    1046:	80 78       	andi	r24, 0x80	; 128
    1048:	8d 87       	std	Y+13, r24	; 0x0d
    104a:	9e 87       	std	Y+14, r25	; 0x0e
    104c:	af 87       	std	Y+15, r26	; 0x0f
    104e:	b8 8b       	std	Y+16, r27	; 0x10
    1050:	8e 01       	movw	r16, r28
    1052:	07 5f       	subi	r16, 0xF7	; 247
    1054:	1f 4f       	sbci	r17, 0xFF	; 255
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <__divsf3+0x14e>
    1058:	87 01       	movw	r16, r14
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <__divsf3+0x14e>
    105c:	06 e1       	ldi	r16, 0x16	; 22
    105e:	11 e0       	ldi	r17, 0x01	; 1
    1060:	c8 01       	movw	r24, r16
    1062:	0e 94 19 09 	call	0x1232	; 0x1232 <__pack_f>
    1066:	68 96       	adiw	r28, 0x18	; 24
    1068:	ea e0       	ldi	r30, 0x0A	; 10
    106a:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__epilogue_restores__+0x10>

0000106e <__gtsf2>:
    106e:	a8 e1       	ldi	r26, 0x18	; 24
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ed e3       	ldi	r30, 0x3D	; 61
    1074:	f8 e0       	ldi	r31, 0x08	; 8
    1076:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__prologue_saves__+0x18>
    107a:	69 83       	std	Y+1, r22	; 0x01
    107c:	7a 83       	std	Y+2, r23	; 0x02
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	2d 83       	std	Y+5, r18	; 0x05
    1084:	3e 83       	std	Y+6, r19	; 0x06
    1086:	4f 83       	std	Y+7, r20	; 0x07
    1088:	58 87       	std	Y+8, r21	; 0x08
    108a:	8e 01       	movw	r16, r28
    108c:	07 5f       	subi	r16, 0xF7	; 247
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	b8 01       	movw	r22, r16
    1096:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
    109a:	81 e1       	ldi	r24, 0x11	; 17
    109c:	e8 2e       	mov	r14, r24
    109e:	f1 2c       	mov	r15, r1
    10a0:	ec 0e       	add	r14, r28
    10a2:	fd 1e       	adc	r15, r29
    10a4:	ce 01       	movw	r24, r28
    10a6:	05 96       	adiw	r24, 0x05	; 5
    10a8:	b7 01       	movw	r22, r14
    10aa:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	82 30       	cpi	r24, 0x02	; 2
    10b2:	40 f0       	brcs	.+16     	; 0x10c4 <__gtsf2+0x56>
    10b4:	89 89       	ldd	r24, Y+17	; 0x11
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	28 f0       	brcs	.+10     	; 0x10c4 <__gtsf2+0x56>
    10ba:	c8 01       	movw	r24, r16
    10bc:	b7 01       	movw	r22, r14
    10be:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fpcmp_parts_f>
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <__gtsf2+0x58>
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	68 96       	adiw	r28, 0x18	; 24
    10c8:	e6 e0       	ldi	r30, 0x06	; 6
    10ca:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__+0x18>

000010ce <__gesf2>:
    10ce:	a8 e1       	ldi	r26, 0x18	; 24
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ed e6       	ldi	r30, 0x6D	; 109
    10d4:	f8 e0       	ldi	r31, 0x08	; 8
    10d6:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__prologue_saves__+0x18>
    10da:	69 83       	std	Y+1, r22	; 0x01
    10dc:	7a 83       	std	Y+2, r23	; 0x02
    10de:	8b 83       	std	Y+3, r24	; 0x03
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	2d 83       	std	Y+5, r18	; 0x05
    10e4:	3e 83       	std	Y+6, r19	; 0x06
    10e6:	4f 83       	std	Y+7, r20	; 0x07
    10e8:	58 87       	std	Y+8, r21	; 0x08
    10ea:	8e 01       	movw	r16, r28
    10ec:	07 5f       	subi	r16, 0xF7	; 247
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	ce 01       	movw	r24, r28
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	b8 01       	movw	r22, r16
    10f6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
    10fa:	81 e1       	ldi	r24, 0x11	; 17
    10fc:	e8 2e       	mov	r14, r24
    10fe:	f1 2c       	mov	r15, r1
    1100:	ec 0e       	add	r14, r28
    1102:	fd 1e       	adc	r15, r29
    1104:	ce 01       	movw	r24, r28
    1106:	05 96       	adiw	r24, 0x05	; 5
    1108:	b7 01       	movw	r22, r14
    110a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	82 30       	cpi	r24, 0x02	; 2
    1112:	40 f0       	brcs	.+16     	; 0x1124 <__gesf2+0x56>
    1114:	89 89       	ldd	r24, Y+17	; 0x11
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	28 f0       	brcs	.+10     	; 0x1124 <__gesf2+0x56>
    111a:	c8 01       	movw	r24, r16
    111c:	b7 01       	movw	r22, r14
    111e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fpcmp_parts_f>
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <__gesf2+0x58>
    1124:	8f ef       	ldi	r24, 0xFF	; 255
    1126:	68 96       	adiw	r28, 0x18	; 24
    1128:	e6 e0       	ldi	r30, 0x06	; 6
    112a:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__+0x18>

0000112e <__ltsf2>:
    112e:	a8 e1       	ldi	r26, 0x18	; 24
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ed e9       	ldi	r30, 0x9D	; 157
    1134:	f8 e0       	ldi	r31, 0x08	; 8
    1136:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__prologue_saves__+0x18>
    113a:	69 83       	std	Y+1, r22	; 0x01
    113c:	7a 83       	std	Y+2, r23	; 0x02
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	2d 83       	std	Y+5, r18	; 0x05
    1144:	3e 83       	std	Y+6, r19	; 0x06
    1146:	4f 83       	std	Y+7, r20	; 0x07
    1148:	58 87       	std	Y+8, r21	; 0x08
    114a:	8e 01       	movw	r16, r28
    114c:	07 5f       	subi	r16, 0xF7	; 247
    114e:	1f 4f       	sbci	r17, 0xFF	; 255
    1150:	ce 01       	movw	r24, r28
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	b8 01       	movw	r22, r16
    1156:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
    115a:	81 e1       	ldi	r24, 0x11	; 17
    115c:	e8 2e       	mov	r14, r24
    115e:	f1 2c       	mov	r15, r1
    1160:	ec 0e       	add	r14, r28
    1162:	fd 1e       	adc	r15, r29
    1164:	ce 01       	movw	r24, r28
    1166:	05 96       	adiw	r24, 0x05	; 5
    1168:	b7 01       	movw	r22, r14
    116a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	40 f0       	brcs	.+16     	; 0x1184 <__ltsf2+0x56>
    1174:	89 89       	ldd	r24, Y+17	; 0x11
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	28 f0       	brcs	.+10     	; 0x1184 <__ltsf2+0x56>
    117a:	c8 01       	movw	r24, r16
    117c:	b7 01       	movw	r22, r14
    117e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fpcmp_parts_f>
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <__ltsf2+0x58>
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	68 96       	adiw	r28, 0x18	; 24
    1188:	e6 e0       	ldi	r30, 0x06	; 6
    118a:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__+0x18>

0000118e <__fixsfsi>:
    118e:	ac e0       	ldi	r26, 0x0C	; 12
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ed ec       	ldi	r30, 0xCD	; 205
    1194:	f8 e0       	ldi	r31, 0x08	; 8
    1196:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__prologue_saves__+0x20>
    119a:	69 83       	std	Y+1, r22	; 0x01
    119c:	7a 83       	std	Y+2, r23	; 0x02
    119e:	8b 83       	std	Y+3, r24	; 0x03
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	be 01       	movw	r22, r28
    11a8:	6b 5f       	subi	r22, 0xFB	; 251
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__unpack_f>
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	81 f1       	breq	.+96     	; 0x1216 <__fixsfsi+0x88>
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	70 f1       	brcs	.+92     	; 0x1216 <__fixsfsi+0x88>
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	21 f4       	brne	.+8      	; 0x11c6 <__fixsfsi+0x38>
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	88 23       	and	r24, r24
    11c2:	69 f1       	breq	.+90     	; 0x121e <__fixsfsi+0x90>
    11c4:	0a c0       	rjmp	.+20     	; 0x11da <__fixsfsi+0x4c>
    11c6:	2f 81       	ldd	r18, Y+7	; 0x07
    11c8:	38 85       	ldd	r19, Y+8	; 0x08
    11ca:	37 fd       	sbrc	r19, 7
    11cc:	24 c0       	rjmp	.+72     	; 0x1216 <__fixsfsi+0x88>
    11ce:	6e 81       	ldd	r22, Y+6	; 0x06
    11d0:	2f 31       	cpi	r18, 0x1F	; 31
    11d2:	31 05       	cpc	r19, r1
    11d4:	3c f0       	brlt	.+14     	; 0x11e4 <__fixsfsi+0x56>
    11d6:	66 23       	and	r22, r22
    11d8:	11 f1       	breq	.+68     	; 0x121e <__fixsfsi+0x90>
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e8       	ldi	r21, 0x80	; 128
    11e2:	21 c0       	rjmp	.+66     	; 0x1226 <__fixsfsi+0x98>
    11e4:	8e e1       	ldi	r24, 0x1E	; 30
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	82 1b       	sub	r24, r18
    11ea:	93 0b       	sbc	r25, r19
    11ec:	29 85       	ldd	r18, Y+9	; 0x09
    11ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    11f0:	4b 85       	ldd	r20, Y+11	; 0x0b
    11f2:	5c 85       	ldd	r21, Y+12	; 0x0c
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <__fixsfsi+0x70>
    11f6:	56 95       	lsr	r21
    11f8:	47 95       	ror	r20
    11fa:	37 95       	ror	r19
    11fc:	27 95       	ror	r18
    11fe:	8a 95       	dec	r24
    1200:	d2 f7       	brpl	.-12     	; 0x11f6 <__fixsfsi+0x68>
    1202:	66 23       	and	r22, r22
    1204:	81 f0       	breq	.+32     	; 0x1226 <__fixsfsi+0x98>
    1206:	50 95       	com	r21
    1208:	40 95       	com	r20
    120a:	30 95       	com	r19
    120c:	21 95       	neg	r18
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	4f 4f       	sbci	r20, 0xFF	; 255
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
    1214:	08 c0       	rjmp	.+16     	; 0x1226 <__fixsfsi+0x98>
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	a9 01       	movw	r20, r18
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <__fixsfsi+0x98>
    121e:	2f ef       	ldi	r18, 0xFF	; 255
    1220:	3f ef       	ldi	r19, 0xFF	; 255
    1222:	4f ef       	ldi	r20, 0xFF	; 255
    1224:	5f e7       	ldi	r21, 0x7F	; 127
    1226:	b9 01       	movw	r22, r18
    1228:	ca 01       	movw	r24, r20
    122a:	2c 96       	adiw	r28, 0x0c	; 12
    122c:	e2 e0       	ldi	r30, 0x02	; 2
    122e:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__epilogue_restores__+0x20>

00001232 <__pack_f>:
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	fc 01       	movw	r30, r24
    1240:	24 81       	ldd	r18, Z+4	; 0x04
    1242:	35 81       	ldd	r19, Z+5	; 0x05
    1244:	46 81       	ldd	r20, Z+6	; 0x06
    1246:	57 81       	ldd	r21, Z+7	; 0x07
    1248:	61 81       	ldd	r22, Z+1	; 0x01
    124a:	80 81       	ld	r24, Z
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	20 f4       	brcc	.+8      	; 0x1258 <__pack_f+0x26>
    1250:	40 61       	ori	r20, 0x10	; 16
    1252:	ef ef       	ldi	r30, 0xFF	; 255
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	a3 c0       	rjmp	.+326    	; 0x139e <__pack_f+0x16c>
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	09 f4       	brne	.+2      	; 0x125e <__pack_f+0x2c>
    125c:	9b c0       	rjmp	.+310    	; 0x1394 <__pack_f+0x162>
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	09 f4       	brne	.+2      	; 0x1264 <__pack_f+0x32>
    1262:	92 c0       	rjmp	.+292    	; 0x1388 <__pack_f+0x156>
    1264:	21 15       	cp	r18, r1
    1266:	31 05       	cpc	r19, r1
    1268:	41 05       	cpc	r20, r1
    126a:	51 05       	cpc	r21, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <__pack_f+0x3e>
    126e:	8f c0       	rjmp	.+286    	; 0x138e <__pack_f+0x15c>
    1270:	02 80       	ldd	r0, Z+2	; 0x02
    1272:	f3 81       	ldd	r31, Z+3	; 0x03
    1274:	e0 2d       	mov	r30, r0
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	e2 38       	cpi	r30, 0x82	; 130
    127a:	f8 07       	cpc	r31, r24
    127c:	0c f0       	brlt	.+2      	; 0x1280 <__pack_f+0x4e>
    127e:	5a c0       	rjmp	.+180    	; 0x1334 <__pack_f+0x102>
    1280:	c2 e8       	ldi	r28, 0x82	; 130
    1282:	df ef       	ldi	r29, 0xFF	; 255
    1284:	ce 1b       	sub	r28, r30
    1286:	df 0b       	sbc	r29, r31
    1288:	ca 31       	cpi	r28, 0x1A	; 26
    128a:	d1 05       	cpc	r29, r1
    128c:	6c f5       	brge	.+90     	; 0x12e8 <__pack_f+0xb6>
    128e:	79 01       	movw	r14, r18
    1290:	8a 01       	movw	r16, r20
    1292:	0c 2e       	mov	r0, r28
    1294:	04 c0       	rjmp	.+8      	; 0x129e <__pack_f+0x6c>
    1296:	16 95       	lsr	r17
    1298:	07 95       	ror	r16
    129a:	f7 94       	ror	r15
    129c:	e7 94       	ror	r14
    129e:	0a 94       	dec	r0
    12a0:	d2 f7       	brpl	.-12     	; 0x1296 <__pack_f+0x64>
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	0c 2e       	mov	r0, r28
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <__pack_f+0x84>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	aa 1f       	adc	r26, r26
    12b4:	bb 1f       	adc	r27, r27
    12b6:	0a 94       	dec	r0
    12b8:	d2 f7       	brpl	.-12     	; 0x12ae <__pack_f+0x7c>
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	a1 09       	sbc	r26, r1
    12be:	b1 09       	sbc	r27, r1
    12c0:	82 23       	and	r24, r18
    12c2:	93 23       	and	r25, r19
    12c4:	a4 23       	and	r26, r20
    12c6:	b5 23       	and	r27, r21
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	a1 05       	cpc	r26, r1
    12d4:	b1 05       	cpc	r27, r1
    12d6:	19 f4       	brne	.+6      	; 0x12de <__pack_f+0xac>
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	a9 01       	movw	r20, r18
    12de:	2e 29       	or	r18, r14
    12e0:	3f 29       	or	r19, r15
    12e2:	40 2b       	or	r20, r16
    12e4:	51 2b       	or	r21, r17
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <__pack_f+0xbc>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	a9 01       	movw	r20, r18
    12ee:	da 01       	movw	r26, r20
    12f0:	c9 01       	movw	r24, r18
    12f2:	8f 77       	andi	r24, 0x7F	; 127
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	a0 70       	andi	r26, 0x00	; 0
    12f8:	b0 70       	andi	r27, 0x00	; 0
    12fa:	80 34       	cpi	r24, 0x40	; 64
    12fc:	91 05       	cpc	r25, r1
    12fe:	a1 05       	cpc	r26, r1
    1300:	b1 05       	cpc	r27, r1
    1302:	39 f4       	brne	.+14     	; 0x1312 <__pack_f+0xe0>
    1304:	27 ff       	sbrs	r18, 7
    1306:	09 c0       	rjmp	.+18     	; 0x131a <__pack_f+0xe8>
    1308:	20 5c       	subi	r18, 0xC0	; 192
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	4f 4f       	sbci	r20, 0xFF	; 255
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	04 c0       	rjmp	.+8      	; 0x131a <__pack_f+0xe8>
    1312:	21 5c       	subi	r18, 0xC1	; 193
    1314:	3f 4f       	sbci	r19, 0xFF	; 255
    1316:	4f 4f       	sbci	r20, 0xFF	; 255
    1318:	5f 4f       	sbci	r21, 0xFF	; 255
    131a:	e1 e0       	ldi	r30, 0x01	; 1
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	20 30       	cpi	r18, 0x00	; 0
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	38 07       	cpc	r19, r24
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	48 07       	cpc	r20, r24
    1328:	80 e4       	ldi	r24, 0x40	; 64
    132a:	58 07       	cpc	r21, r24
    132c:	28 f5       	brcc	.+74     	; 0x1378 <__pack_f+0x146>
    132e:	e0 e0       	ldi	r30, 0x00	; 0
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	22 c0       	rjmp	.+68     	; 0x1378 <__pack_f+0x146>
    1334:	e0 38       	cpi	r30, 0x80	; 128
    1336:	f1 05       	cpc	r31, r1
    1338:	6c f5       	brge	.+90     	; 0x1394 <__pack_f+0x162>
    133a:	e1 58       	subi	r30, 0x81	; 129
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	da 01       	movw	r26, r20
    1340:	c9 01       	movw	r24, r18
    1342:	8f 77       	andi	r24, 0x7F	; 127
    1344:	90 70       	andi	r25, 0x00	; 0
    1346:	a0 70       	andi	r26, 0x00	; 0
    1348:	b0 70       	andi	r27, 0x00	; 0
    134a:	80 34       	cpi	r24, 0x40	; 64
    134c:	91 05       	cpc	r25, r1
    134e:	a1 05       	cpc	r26, r1
    1350:	b1 05       	cpc	r27, r1
    1352:	39 f4       	brne	.+14     	; 0x1362 <__pack_f+0x130>
    1354:	27 ff       	sbrs	r18, 7
    1356:	09 c0       	rjmp	.+18     	; 0x136a <__pack_f+0x138>
    1358:	20 5c       	subi	r18, 0xC0	; 192
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	4f 4f       	sbci	r20, 0xFF	; 255
    135e:	5f 4f       	sbci	r21, 0xFF	; 255
    1360:	04 c0       	rjmp	.+8      	; 0x136a <__pack_f+0x138>
    1362:	21 5c       	subi	r18, 0xC1	; 193
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	4f 4f       	sbci	r20, 0xFF	; 255
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	57 ff       	sbrs	r21, 7
    136c:	05 c0       	rjmp	.+10     	; 0x1378 <__pack_f+0x146>
    136e:	56 95       	lsr	r21
    1370:	47 95       	ror	r20
    1372:	37 95       	ror	r19
    1374:	27 95       	ror	r18
    1376:	31 96       	adiw	r30, 0x01	; 1
    1378:	87 e0       	ldi	r24, 0x07	; 7
    137a:	56 95       	lsr	r21
    137c:	47 95       	ror	r20
    137e:	37 95       	ror	r19
    1380:	27 95       	ror	r18
    1382:	8a 95       	dec	r24
    1384:	d1 f7       	brne	.-12     	; 0x137a <__pack_f+0x148>
    1386:	0b c0       	rjmp	.+22     	; 0x139e <__pack_f+0x16c>
    1388:	e0 e0       	ldi	r30, 0x00	; 0
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <__pack_f+0x166>
    138e:	e0 e0       	ldi	r30, 0x00	; 0
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	05 c0       	rjmp	.+10     	; 0x139e <__pack_f+0x16c>
    1394:	ef ef       	ldi	r30, 0xFF	; 255
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	a9 01       	movw	r20, r18
    139e:	8e 2f       	mov	r24, r30
    13a0:	87 95       	ror	r24
    13a2:	88 27       	eor	r24, r24
    13a4:	87 95       	ror	r24
    13a6:	94 2f       	mov	r25, r20
    13a8:	9f 77       	andi	r25, 0x7F	; 127
    13aa:	67 95       	ror	r22
    13ac:	66 27       	eor	r22, r22
    13ae:	67 95       	ror	r22
    13b0:	e6 95       	lsr	r30
    13b2:	e2 2e       	mov	r14, r18
    13b4:	a9 2f       	mov	r26, r25
    13b6:	a8 2b       	or	r26, r24
    13b8:	fe 2f       	mov	r31, r30
    13ba:	f6 2b       	or	r31, r22
    13bc:	62 2f       	mov	r22, r18
    13be:	73 2f       	mov	r23, r19
    13c0:	8a 2f       	mov	r24, r26
    13c2:	9f 2f       	mov	r25, r31
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	e6 e0       	ldi	r30, 0x06	; 6
    13ca:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__+0x18>

000013ce <__unpack_f>:
    13ce:	dc 01       	movw	r26, r24
    13d0:	fb 01       	movw	r30, r22
    13d2:	2c 91       	ld	r18, X
    13d4:	11 96       	adiw	r26, 0x01	; 1
    13d6:	3c 91       	ld	r19, X
    13d8:	11 97       	sbiw	r26, 0x01	; 1
    13da:	12 96       	adiw	r26, 0x02	; 2
    13dc:	8c 91       	ld	r24, X
    13de:	12 97       	sbiw	r26, 0x02	; 2
    13e0:	48 2f       	mov	r20, r24
    13e2:	4f 77       	andi	r20, 0x7F	; 127
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	98 2f       	mov	r25, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	99 27       	eor	r25, r25
    13ec:	99 1f       	adc	r25, r25
    13ee:	13 96       	adiw	r26, 0x03	; 3
    13f0:	6c 91       	ld	r22, X
    13f2:	13 97       	sbiw	r26, 0x03	; 3
    13f4:	86 2f       	mov	r24, r22
    13f6:	88 0f       	add	r24, r24
    13f8:	89 2b       	or	r24, r25
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	66 1f       	adc	r22, r22
    13fe:	66 27       	eor	r22, r22
    1400:	66 1f       	adc	r22, r22
    1402:	61 83       	std	Z+1, r22	; 0x01
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	39 f5       	brne	.+78     	; 0x1456 <__unpack_f+0x88>
    1408:	21 15       	cp	r18, r1
    140a:	31 05       	cpc	r19, r1
    140c:	41 05       	cpc	r20, r1
    140e:	51 05       	cpc	r21, r1
    1410:	11 f4       	brne	.+4      	; 0x1416 <__unpack_f+0x48>
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	29 c0       	rjmp	.+82     	; 0x1468 <__unpack_f+0x9a>
    1416:	82 e8       	ldi	r24, 0x82	; 130
    1418:	9f ef       	ldi	r25, 0xFF	; 255
    141a:	93 83       	std	Z+3, r25	; 0x03
    141c:	82 83       	std	Z+2, r24	; 0x02
    141e:	67 e0       	ldi	r22, 0x07	; 7
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	44 1f       	adc	r20, r20
    1426:	55 1f       	adc	r21, r21
    1428:	6a 95       	dec	r22
    142a:	d1 f7       	brne	.-12     	; 0x1420 <__unpack_f+0x52>
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	80 83       	st	Z, r24
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <__unpack_f+0x76>
    1432:	22 0f       	add	r18, r18
    1434:	33 1f       	adc	r19, r19
    1436:	44 1f       	adc	r20, r20
    1438:	55 1f       	adc	r21, r21
    143a:	82 81       	ldd	r24, Z+2	; 0x02
    143c:	93 81       	ldd	r25, Z+3	; 0x03
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	93 83       	std	Z+3, r25	; 0x03
    1442:	82 83       	std	Z+2, r24	; 0x02
    1444:	20 30       	cpi	r18, 0x00	; 0
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	38 07       	cpc	r19, r24
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	48 07       	cpc	r20, r24
    144e:	80 e4       	ldi	r24, 0x40	; 64
    1450:	58 07       	cpc	r21, r24
    1452:	78 f3       	brcs	.-34     	; 0x1432 <__unpack_f+0x64>
    1454:	20 c0       	rjmp	.+64     	; 0x1496 <__unpack_f+0xc8>
    1456:	8f 3f       	cpi	r24, 0xFF	; 255
    1458:	91 05       	cpc	r25, r1
    145a:	79 f4       	brne	.+30     	; 0x147a <__unpack_f+0xac>
    145c:	21 15       	cp	r18, r1
    145e:	31 05       	cpc	r19, r1
    1460:	41 05       	cpc	r20, r1
    1462:	51 05       	cpc	r21, r1
    1464:	19 f4       	brne	.+6      	; 0x146c <__unpack_f+0x9e>
    1466:	84 e0       	ldi	r24, 0x04	; 4
    1468:	80 83       	st	Z, r24
    146a:	08 95       	ret
    146c:	44 ff       	sbrs	r20, 4
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <__unpack_f+0xa8>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	80 83       	st	Z, r24
    1474:	10 c0       	rjmp	.+32     	; 0x1496 <__unpack_f+0xc8>
    1476:	10 82       	st	Z, r1
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <__unpack_f+0xc8>
    147a:	8f 57       	subi	r24, 0x7F	; 127
    147c:	90 40       	sbci	r25, 0x00	; 0
    147e:	93 83       	std	Z+3, r25	; 0x03
    1480:	82 83       	std	Z+2, r24	; 0x02
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	80 83       	st	Z, r24
    1486:	87 e0       	ldi	r24, 0x07	; 7
    1488:	22 0f       	add	r18, r18
    148a:	33 1f       	adc	r19, r19
    148c:	44 1f       	adc	r20, r20
    148e:	55 1f       	adc	r21, r21
    1490:	8a 95       	dec	r24
    1492:	d1 f7       	brne	.-12     	; 0x1488 <__unpack_f+0xba>
    1494:	50 64       	ori	r21, 0x40	; 64
    1496:	24 83       	std	Z+4, r18	; 0x04
    1498:	35 83       	std	Z+5, r19	; 0x05
    149a:	46 83       	std	Z+6, r20	; 0x06
    149c:	57 83       	std	Z+7, r21	; 0x07
    149e:	08 95       	ret

000014a0 <__fpcmp_parts_f>:
    14a0:	fc 01       	movw	r30, r24
    14a2:	db 01       	movw	r26, r22
    14a4:	90 81       	ld	r25, Z
    14a6:	92 30       	cpi	r25, 0x02	; 2
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <__fpcmp_parts_f+0xc>
    14aa:	49 c0       	rjmp	.+146    	; 0x153e <__fpcmp_parts_f+0x9e>
    14ac:	8c 91       	ld	r24, X
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	08 f4       	brcc	.+2      	; 0x14b4 <__fpcmp_parts_f+0x14>
    14b2:	45 c0       	rjmp	.+138    	; 0x153e <__fpcmp_parts_f+0x9e>
    14b4:	94 30       	cpi	r25, 0x04	; 4
    14b6:	51 f4       	brne	.+20     	; 0x14cc <__fpcmp_parts_f+0x2c>
    14b8:	61 81       	ldd	r22, Z+1	; 0x01
    14ba:	84 30       	cpi	r24, 0x04	; 4
    14bc:	b1 f5       	brne	.+108    	; 0x152a <__fpcmp_parts_f+0x8a>
    14be:	11 96       	adiw	r26, 0x01	; 1
    14c0:	2c 91       	ld	r18, X
    14c2:	11 97       	sbiw	r26, 0x01	; 1
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	26 1b       	sub	r18, r22
    14c8:	31 09       	sbc	r19, r1
    14ca:	41 c0       	rjmp	.+130    	; 0x154e <__fpcmp_parts_f+0xae>
    14cc:	84 30       	cpi	r24, 0x04	; 4
    14ce:	21 f0       	breq	.+8      	; 0x14d8 <__fpcmp_parts_f+0x38>
    14d0:	92 30       	cpi	r25, 0x02	; 2
    14d2:	41 f4       	brne	.+16     	; 0x14e4 <__fpcmp_parts_f+0x44>
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	b1 f1       	breq	.+108    	; 0x1544 <__fpcmp_parts_f+0xa4>
    14d8:	11 96       	adiw	r26, 0x01	; 1
    14da:	8c 91       	ld	r24, X
    14dc:	11 97       	sbiw	r26, 0x01	; 1
    14de:	88 23       	and	r24, r24
    14e0:	a1 f1       	breq	.+104    	; 0x154a <__fpcmp_parts_f+0xaa>
    14e2:	2d c0       	rjmp	.+90     	; 0x153e <__fpcmp_parts_f+0x9e>
    14e4:	61 81       	ldd	r22, Z+1	; 0x01
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	01 f1       	breq	.+64     	; 0x152a <__fpcmp_parts_f+0x8a>
    14ea:	11 96       	adiw	r26, 0x01	; 1
    14ec:	8c 91       	ld	r24, X
    14ee:	11 97       	sbiw	r26, 0x01	; 1
    14f0:	68 17       	cp	r22, r24
    14f2:	d9 f4       	brne	.+54     	; 0x152a <__fpcmp_parts_f+0x8a>
    14f4:	22 81       	ldd	r18, Z+2	; 0x02
    14f6:	33 81       	ldd	r19, Z+3	; 0x03
    14f8:	12 96       	adiw	r26, 0x02	; 2
    14fa:	8d 91       	ld	r24, X+
    14fc:	9c 91       	ld	r25, X
    14fe:	13 97       	sbiw	r26, 0x03	; 3
    1500:	82 17       	cp	r24, r18
    1502:	93 07       	cpc	r25, r19
    1504:	94 f0       	brlt	.+36     	; 0x152a <__fpcmp_parts_f+0x8a>
    1506:	28 17       	cp	r18, r24
    1508:	39 07       	cpc	r19, r25
    150a:	bc f0       	brlt	.+46     	; 0x153a <__fpcmp_parts_f+0x9a>
    150c:	24 81       	ldd	r18, Z+4	; 0x04
    150e:	35 81       	ldd	r19, Z+5	; 0x05
    1510:	46 81       	ldd	r20, Z+6	; 0x06
    1512:	57 81       	ldd	r21, Z+7	; 0x07
    1514:	14 96       	adiw	r26, 0x04	; 4
    1516:	8d 91       	ld	r24, X+
    1518:	9d 91       	ld	r25, X+
    151a:	0d 90       	ld	r0, X+
    151c:	bc 91       	ld	r27, X
    151e:	a0 2d       	mov	r26, r0
    1520:	82 17       	cp	r24, r18
    1522:	93 07       	cpc	r25, r19
    1524:	a4 07       	cpc	r26, r20
    1526:	b5 07       	cpc	r27, r21
    1528:	18 f4       	brcc	.+6      	; 0x1530 <__fpcmp_parts_f+0x90>
    152a:	66 23       	and	r22, r22
    152c:	41 f0       	breq	.+16     	; 0x153e <__fpcmp_parts_f+0x9e>
    152e:	0d c0       	rjmp	.+26     	; 0x154a <__fpcmp_parts_f+0xaa>
    1530:	28 17       	cp	r18, r24
    1532:	39 07       	cpc	r19, r25
    1534:	4a 07       	cpc	r20, r26
    1536:	5b 07       	cpc	r21, r27
    1538:	28 f4       	brcc	.+10     	; 0x1544 <__fpcmp_parts_f+0xa4>
    153a:	66 23       	and	r22, r22
    153c:	31 f0       	breq	.+12     	; 0x154a <__fpcmp_parts_f+0xaa>
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	05 c0       	rjmp	.+10     	; 0x154e <__fpcmp_parts_f+0xae>
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <__fpcmp_parts_f+0xae>
    154a:	2f ef       	ldi	r18, 0xFF	; 255
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	c9 01       	movw	r24, r18
    1550:	08 95       	ret

00001552 <__prologue_saves__>:
    1552:	2f 92       	push	r2
    1554:	3f 92       	push	r3
    1556:	4f 92       	push	r4
    1558:	5f 92       	push	r5
    155a:	6f 92       	push	r6
    155c:	7f 92       	push	r7
    155e:	8f 92       	push	r8
    1560:	9f 92       	push	r9
    1562:	af 92       	push	r10
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	ca 1b       	sub	r28, r26
    157c:	db 0b       	sbc	r29, r27
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	09 94       	ijmp

0000158a <__epilogue_restores__>:
    158a:	2a 88       	ldd	r2, Y+18	; 0x12
    158c:	39 88       	ldd	r3, Y+17	; 0x11
    158e:	48 88       	ldd	r4, Y+16	; 0x10
    1590:	5f 84       	ldd	r5, Y+15	; 0x0f
    1592:	6e 84       	ldd	r6, Y+14	; 0x0e
    1594:	7d 84       	ldd	r7, Y+13	; 0x0d
    1596:	8c 84       	ldd	r8, Y+12	; 0x0c
    1598:	9b 84       	ldd	r9, Y+11	; 0x0b
    159a:	aa 84       	ldd	r10, Y+10	; 0x0a
    159c:	b9 84       	ldd	r11, Y+9	; 0x09
    159e:	c8 84       	ldd	r12, Y+8	; 0x08
    15a0:	df 80       	ldd	r13, Y+7	; 0x07
    15a2:	ee 80       	ldd	r14, Y+6	; 0x06
    15a4:	fd 80       	ldd	r15, Y+5	; 0x05
    15a6:	0c 81       	ldd	r16, Y+4	; 0x04
    15a8:	1b 81       	ldd	r17, Y+3	; 0x03
    15aa:	aa 81       	ldd	r26, Y+2	; 0x02
    15ac:	b9 81       	ldd	r27, Y+1	; 0x01
    15ae:	ce 0f       	add	r28, r30
    15b0:	d1 1d       	adc	r29, r1
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	ed 01       	movw	r28, r26
    15be:	08 95       	ret

000015c0 <_exit>:
    15c0:	f8 94       	cli

000015c2 <__stop_program>:
    15c2:	ff cf       	rjmp	.-2      	; 0x15c2 <__stop_program>
