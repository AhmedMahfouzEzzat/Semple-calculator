
Semple calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001ab8  00001b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080011e  0080011e  00001b6a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000022bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002a4  00000000  00000000  0000243d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002759  00000000  00000000  000026e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001140  00000000  00000000  00004e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019f3  00000000  00000000  00005f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000280  00000000  00000000  00007970  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004d7  00000000  00000000  00007bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c25  00000000  00000000  000080c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000060e  00000000  00000000  00008cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  000092fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 eb       	ldi	r30, 0xB8	; 184
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 31       	cpi	r26, 0x1E	; 30
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae e1       	ldi	r26, 0x1E	; 30
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 31       	cpi	r26, 0x1F	; 31
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 92 06 	call	0xd24	; 0xd24 <main>
      9e:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <write_to_calc>:
					{'8','5','2','0'},
					{'9','6','3','='},
					{'/','x','-','+'}};
uint8_t key_presed = 0;

void write_to_calc(uint8_t addr, uint8_t source){	
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	6a 97       	sbiw	r28, 0x1a	; 26
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
      be:	89 8f       	std	Y+25, r24	; 0x19
      c0:	6a 8f       	std	Y+26, r22	; 0x1a
	calc_data_mode = OUTPUT; 
      c2:	8a e2       	ldi	r24, 0x2A	; 42
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	2f ef       	ldi	r18, 0xFF	; 255
      c8:	fc 01       	movw	r30, r24
      ca:	20 83       	st	Z, r18
	calc_addr_port = addr ; 
      cc:	85 e2       	ldi	r24, 0x25	; 37
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	29 8d       	ldd	r18, Y+25	; 0x19
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
	calc_data_out_port = source ; 
      d6:	8b e2       	ldi	r24, 0x2B	; 43
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	2a 8d       	ldd	r18, Y+26	; 0x1a
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
	calc_ctrl_port = IDLE; 
      e0:	88 e2       	ldi	r24, 0x28	; 40
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	2f ef       	ldi	r18, 0xFF	; 255
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18
	calc_ctrl_port = WRITE ; 
      ea:	88 e2       	ldi	r24, 0x28	; 40
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	2d ef       	ldi	r18, 0xFD	; 253
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	a0 e8       	ldi	r26, 0x80	; 128
      fa:	bf e3       	ldi	r27, 0x3F	; 63
      fc:	89 83       	std	Y+1, r24	; 0x01
      fe:	9a 83       	std	Y+2, r25	; 0x02
     100:	ab 83       	std	Y+3, r26	; 0x03
     102:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     104:	69 81       	ldd	r22, Y+1	; 0x01
     106:	7a 81       	ldd	r23, Y+2	; 0x02
     108:	8b 81       	ldd	r24, Y+3	; 0x03
     10a:	9c 81       	ldd	r25, Y+4	; 0x04
     10c:	2b ea       	ldi	r18, 0xAB	; 171
     10e:	3a ea       	ldi	r19, 0xAA	; 170
     110:	4a ea       	ldi	r20, 0xAA	; 170
     112:	50 e4       	ldi	r21, 0x40	; 64
     114:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     118:	dc 01       	movw	r26, r24
     11a:	cb 01       	movw	r24, r22
     11c:	8d 83       	std	Y+5, r24	; 0x05
     11e:	9e 83       	std	Y+6, r25	; 0x06
     120:	af 83       	std	Y+7, r26	; 0x07
     122:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	6d 81       	ldd	r22, Y+5	; 0x05
     128:	7e 81       	ldd	r23, Y+6	; 0x06
     12a:	8f 81       	ldd	r24, Y+7	; 0x07
     12c:	98 85       	ldd	r25, Y+8	; 0x08
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e8       	ldi	r20, 0x80	; 128
     134:	5f e3       	ldi	r21, 0x3F	; 63
     136:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     13a:	88 23       	and	r24, r24
     13c:	0c f0       	brlt	.+2      	; 0x140 <write_to_calc+0x9a>
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	11 23       	and	r17, r17
     142:	19 f0       	breq	.+6      	; 0x14a <write_to_calc+0xa4>
		__ticks = 1;
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	89 87       	std	Y+9, r24	; 0x09
     148:	a3 c0       	rjmp	.+326    	; 0x290 <write_to_calc+0x1ea>
	else if (__tmp > 255)
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	6d 81       	ldd	r22, Y+5	; 0x05
     14e:	7e 81       	ldd	r23, Y+6	; 0x06
     150:	8f 81       	ldd	r24, Y+7	; 0x07
     152:	98 85       	ldd	r25, Y+8	; 0x08
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	4f e7       	ldi	r20, 0x7F	; 127
     15a:	53 e4       	ldi	r21, 0x43	; 67
     15c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     160:	18 16       	cp	r1, r24
     162:	0c f0       	brlt	.+2      	; 0x166 <write_to_calc+0xc0>
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	11 23       	and	r17, r17
     168:	09 f4       	brne	.+2      	; 0x16c <write_to_calc+0xc6>
     16a:	89 c0       	rjmp	.+274    	; 0x27e <write_to_calc+0x1d8>
	{
		_delay_ms(__us / 1000.0);
     16c:	69 81       	ldd	r22, Y+1	; 0x01
     16e:	7a 81       	ldd	r23, Y+2	; 0x02
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	4a e7       	ldi	r20, 0x7A	; 122
     17a:	54 e4       	ldi	r21, 0x44	; 68
     17c:	0e 94 03 0a 	call	0x1406	; 0x1406 <__divsf3>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	8a 87       	std	Y+10, r24	; 0x0a
     186:	9b 87       	std	Y+11, r25	; 0x0b
     188:	ac 87       	std	Y+12, r26	; 0x0c
     18a:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     18c:	6a 85       	ldd	r22, Y+10	; 0x0a
     18e:	7b 85       	ldd	r23, Y+11	; 0x0b
     190:	8c 85       	ldd	r24, Y+12	; 0x0c
     192:	9d 85       	ldd	r25, Y+13	; 0x0d
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	4a e7       	ldi	r20, 0x7A	; 122
     19a:	55 e4       	ldi	r21, 0x45	; 69
     19c:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     1a0:	dc 01       	movw	r26, r24
     1a2:	cb 01       	movw	r24, r22
     1a4:	8e 87       	std	Y+14, r24	; 0x0e
     1a6:	9f 87       	std	Y+15, r25	; 0x0f
     1a8:	a8 8b       	std	Y+16, r26	; 0x10
     1aa:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     1ac:	11 e0       	ldi	r17, 0x01	; 1
     1ae:	6e 85       	ldd	r22, Y+14	; 0x0e
     1b0:	7f 85       	ldd	r23, Y+15	; 0x0f
     1b2:	88 89       	ldd	r24, Y+16	; 0x10
     1b4:	99 89       	ldd	r25, Y+17	; 0x11
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	40 e8       	ldi	r20, 0x80	; 128
     1bc:	5f e3       	ldi	r21, 0x3F	; 63
     1be:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     1c2:	88 23       	and	r24, r24
     1c4:	0c f0       	brlt	.+2      	; 0x1c8 <write_to_calc+0x122>
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	11 23       	and	r17, r17
     1ca:	29 f0       	breq	.+10     	; 0x1d6 <write_to_calc+0x130>
		__ticks = 1;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	9b 8b       	std	Y+19, r25	; 0x13
     1d2:	8a 8b       	std	Y+18, r24	; 0x12
     1d4:	46 c0       	rjmp	.+140    	; 0x262 <write_to_calc+0x1bc>
	else if (__tmp > 65535)
     1d6:	11 e0       	ldi	r17, 0x01	; 1
     1d8:	6e 85       	ldd	r22, Y+14	; 0x0e
     1da:	7f 85       	ldd	r23, Y+15	; 0x0f
     1dc:	88 89       	ldd	r24, Y+16	; 0x10
     1de:	99 89       	ldd	r25, Y+17	; 0x11
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	3f ef       	ldi	r19, 0xFF	; 255
     1e4:	4f e7       	ldi	r20, 0x7F	; 127
     1e6:	57 e4       	ldi	r21, 0x47	; 71
     1e8:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     1ec:	18 16       	cp	r1, r24
     1ee:	0c f0       	brlt	.+2      	; 0x1f2 <write_to_calc+0x14c>
     1f0:	10 e0       	ldi	r17, 0x00	; 0
     1f2:	11 23       	and	r17, r17
     1f4:	61 f1       	breq	.+88     	; 0x24e <write_to_calc+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1f6:	6a 85       	ldd	r22, Y+10	; 0x0a
     1f8:	7b 85       	ldd	r23, Y+11	; 0x0b
     1fa:	8c 85       	ldd	r24, Y+12	; 0x0c
     1fc:	9d 85       	ldd	r25, Y+13	; 0x0d
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e2       	ldi	r20, 0x20	; 32
     204:	51 e4       	ldi	r21, 0x41	; 65
     206:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     20a:	dc 01       	movw	r26, r24
     20c:	cb 01       	movw	r24, r22
     20e:	bc 01       	movw	r22, r24
     210:	cd 01       	movw	r24, r26
     212:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	9b 8b       	std	Y+19, r25	; 0x13
     21c:	8a 8b       	std	Y+18, r24	; 0x12
     21e:	12 c0       	rjmp	.+36     	; 0x244 <write_to_calc+0x19e>
     220:	80 e9       	ldi	r24, 0x90	; 144
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	9d 8b       	std	Y+21, r25	; 0x15
     226:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     228:	8c 89       	ldd	r24, Y+20	; 0x14
     22a:	9d 89       	ldd	r25, Y+21	; 0x15
     22c:	8c 01       	movw	r16, r24
     22e:	c8 01       	movw	r24, r16
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <write_to_calc+0x18a>
     234:	8c 01       	movw	r16, r24
     236:	1d 8b       	std	Y+21, r17	; 0x15
     238:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     23a:	8a 89       	ldd	r24, Y+18	; 0x12
     23c:	9b 89       	ldd	r25, Y+19	; 0x13
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	9b 8b       	std	Y+19, r25	; 0x13
     242:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     244:	8a 89       	ldd	r24, Y+18	; 0x12
     246:	9b 89       	ldd	r25, Y+19	; 0x13
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	51 f7       	brne	.-44     	; 0x220 <write_to_calc+0x17a>
     24c:	28 c0       	rjmp	.+80     	; 0x29e <write_to_calc+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     24e:	6e 85       	ldd	r22, Y+14	; 0x0e
     250:	7f 85       	ldd	r23, Y+15	; 0x0f
     252:	88 89       	ldd	r24, Y+16	; 0x10
     254:	99 89       	ldd	r25, Y+17	; 0x11
     256:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     25a:	dc 01       	movw	r26, r24
     25c:	cb 01       	movw	r24, r22
     25e:	9b 8b       	std	Y+19, r25	; 0x13
     260:	8a 8b       	std	Y+18, r24	; 0x12
     262:	8a 89       	ldd	r24, Y+18	; 0x12
     264:	9b 89       	ldd	r25, Y+19	; 0x13
     266:	9f 8b       	std	Y+23, r25	; 0x17
     268:	8e 8b       	std	Y+22, r24	; 0x16
     26a:	8e 89       	ldd	r24, Y+22	; 0x16
     26c:	9f 89       	ldd	r25, Y+23	; 0x17
     26e:	8c 01       	movw	r16, r24
     270:	f8 01       	movw	r30, r16
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <write_to_calc+0x1cc>
     276:	8f 01       	movw	r16, r30
     278:	1f 8b       	std	Y+23, r17	; 0x17
     27a:	0e 8b       	std	Y+22, r16	; 0x16
     27c:	10 c0       	rjmp	.+32     	; 0x29e <write_to_calc+0x1f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     27e:	6d 81       	ldd	r22, Y+5	; 0x05
     280:	7e 81       	ldd	r23, Y+6	; 0x06
     282:	8f 81       	ldd	r24, Y+7	; 0x07
     284:	98 85       	ldd	r25, Y+8	; 0x08
     286:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	89 87       	std	Y+9, r24	; 0x09
     290:	89 85       	ldd	r24, Y+9	; 0x09
     292:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     294:	88 8d       	ldd	r24, Y+24	; 0x18
     296:	18 2f       	mov	r17, r24
     298:	1a 95       	dec	r17
     29a:	f1 f7       	brne	.-4      	; 0x298 <write_to_calc+0x1f2>
     29c:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1); 
	calc_ctrl_port = IDLE;	
     29e:	88 e2       	ldi	r24, 0x28	; 40
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	2f ef       	ldi	r18, 0xFF	; 255
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
}			
     2a8:	6a 96       	adiw	r28, 0x1a	; 26
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	cf 91       	pop	r28
     2b6:	df 91       	pop	r29
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <init_calc>:
			
void init_calc(){ 
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	calc_addr_mode = OUTPUT;
     2c6:	84 e2       	ldi	r24, 0x24	; 36
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	2f ef       	ldi	r18, 0xFF	; 255
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
	calc_ctrl_mode = OUTPUT;
     2d0:	87 e2       	ldi	r24, 0x27	; 39
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
	write_to_calc( calc_ctrl_reg , control_word );
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	61 e8       	ldi	r22, 0x81	; 129
     2de:	0e 94 53 00 	call	0xa6	; 0xa6 <write_to_calc>
}
     2e2:	cf 91       	pop	r28
     2e4:	df 91       	pop	r29
     2e6:	08 95       	ret

000002e8 <SEND_TO_LCD>:

void SEND_TO_LCD(char data , uint8_t mode )
{
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	61 97       	sbiw	r28, 0x11	; 17
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	88 8b       	std	Y+16, r24	; 0x10
     302:	69 8b       	std	Y+17, r22	; 0x11
	uint8_t control_lcd = 0 ;
     304:	19 82       	std	Y+1, r1	; 0x01
	write_to_calc(lcd_data_port,data);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	68 89       	ldd	r22, Y+16	; 0x10
     30a:	0e 94 53 00 	call	0xa6	; 0xa6 <write_to_calc>
	control_lcd = mode ;			//CMD => RS=0 ,DATA =>RS =1 
     30e:	89 89       	ldd	r24, Y+17	; 0x11
     310:	89 83       	std	Y+1, r24	; 0x01
	control_lcd |= 2;				// EN = 1
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	82 60       	ori	r24, 0x02	; 2
     316:	89 83       	std	Y+1, r24	; 0x01
	write_to_calc(lcd_ctrl_port,control_lcd);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	69 81       	ldd	r22, Y+1	; 0x01
     31c:	0e 94 53 00 	call	0xa6	; 0xa6 <write_to_calc>
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	a0 e8       	ldi	r26, 0x80	; 128
     326:	bf e3       	ldi	r27, 0x3F	; 63
     328:	8a 83       	std	Y+2, r24	; 0x02
     32a:	9b 83       	std	Y+3, r25	; 0x03
     32c:	ac 83       	std	Y+4, r26	; 0x04
     32e:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     330:	6a 81       	ldd	r22, Y+2	; 0x02
     332:	7b 81       	ldd	r23, Y+3	; 0x03
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	9d 81       	ldd	r25, Y+5	; 0x05
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	4a e7       	ldi	r20, 0x7A	; 122
     33e:	55 e4       	ldi	r21, 0x45	; 69
     340:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     344:	dc 01       	movw	r26, r24
     346:	cb 01       	movw	r24, r22
     348:	8e 83       	std	Y+6, r24	; 0x06
     34a:	9f 83       	std	Y+7, r25	; 0x07
     34c:	a8 87       	std	Y+8, r26	; 0x08
     34e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     350:	11 e0       	ldi	r17, 0x01	; 1
     352:	6e 81       	ldd	r22, Y+6	; 0x06
     354:	7f 81       	ldd	r23, Y+7	; 0x07
     356:	88 85       	ldd	r24, Y+8	; 0x08
     358:	99 85       	ldd	r25, Y+9	; 0x09
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e8       	ldi	r20, 0x80	; 128
     360:	5f e3       	ldi	r21, 0x3F	; 63
     362:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     366:	88 23       	and	r24, r24
     368:	0c f0       	brlt	.+2      	; 0x36c <SEND_TO_LCD+0x84>
     36a:	10 e0       	ldi	r17, 0x00	; 0
     36c:	11 23       	and	r17, r17
     36e:	29 f0       	breq	.+10     	; 0x37a <SEND_TO_LCD+0x92>
		__ticks = 1;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	9b 87       	std	Y+11, r25	; 0x0b
     376:	8a 87       	std	Y+10, r24	; 0x0a
     378:	46 c0       	rjmp	.+140    	; 0x406 <SEND_TO_LCD+0x11e>
	else if (__tmp > 65535)
     37a:	11 e0       	ldi	r17, 0x01	; 1
     37c:	6e 81       	ldd	r22, Y+6	; 0x06
     37e:	7f 81       	ldd	r23, Y+7	; 0x07
     380:	88 85       	ldd	r24, Y+8	; 0x08
     382:	99 85       	ldd	r25, Y+9	; 0x09
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	3f ef       	ldi	r19, 0xFF	; 255
     388:	4f e7       	ldi	r20, 0x7F	; 127
     38a:	57 e4       	ldi	r21, 0x47	; 71
     38c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     390:	18 16       	cp	r1, r24
     392:	0c f0       	brlt	.+2      	; 0x396 <SEND_TO_LCD+0xae>
     394:	10 e0       	ldi	r17, 0x00	; 0
     396:	11 23       	and	r17, r17
     398:	61 f1       	breq	.+88     	; 0x3f2 <SEND_TO_LCD+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     39a:	6a 81       	ldd	r22, Y+2	; 0x02
     39c:	7b 81       	ldd	r23, Y+3	; 0x03
     39e:	8c 81       	ldd	r24, Y+4	; 0x04
     3a0:	9d 81       	ldd	r25, Y+5	; 0x05
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	40 e2       	ldi	r20, 0x20	; 32
     3a8:	51 e4       	ldi	r21, 0x41	; 65
     3aa:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     3ae:	dc 01       	movw	r26, r24
     3b0:	cb 01       	movw	r24, r22
     3b2:	bc 01       	movw	r22, r24
     3b4:	cd 01       	movw	r24, r26
     3b6:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	9b 87       	std	Y+11, r25	; 0x0b
     3c0:	8a 87       	std	Y+10, r24	; 0x0a
     3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <SEND_TO_LCD+0x100>
     3c4:	80 e9       	ldi	r24, 0x90	; 144
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	9d 87       	std	Y+13, r25	; 0x0d
     3ca:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3cc:	8c 85       	ldd	r24, Y+12	; 0x0c
     3ce:	9d 85       	ldd	r25, Y+13	; 0x0d
     3d0:	8c 01       	movw	r16, r24
     3d2:	c8 01       	movw	r24, r16
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <SEND_TO_LCD+0xec>
     3d8:	8c 01       	movw	r16, r24
     3da:	1d 87       	std	Y+13, r17	; 0x0d
     3dc:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3de:	8a 85       	ldd	r24, Y+10	; 0x0a
     3e0:	9b 85       	ldd	r25, Y+11	; 0x0b
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	9b 87       	std	Y+11, r25	; 0x0b
     3e6:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e8:	8a 85       	ldd	r24, Y+10	; 0x0a
     3ea:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	51 f7       	brne	.-44     	; 0x3c4 <SEND_TO_LCD+0xdc>
     3f0:	17 c0       	rjmp	.+46     	; 0x420 <SEND_TO_LCD+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f2:	6e 81       	ldd	r22, Y+6	; 0x06
     3f4:	7f 81       	ldd	r23, Y+7	; 0x07
     3f6:	88 85       	ldd	r24, Y+8	; 0x08
     3f8:	99 85       	ldd	r25, Y+9	; 0x09
     3fa:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	9b 87       	std	Y+11, r25	; 0x0b
     404:	8a 87       	std	Y+10, r24	; 0x0a
     406:	8a 85       	ldd	r24, Y+10	; 0x0a
     408:	9b 85       	ldd	r25, Y+11	; 0x0b
     40a:	9f 87       	std	Y+15, r25	; 0x0f
     40c:	8e 87       	std	Y+14, r24	; 0x0e
     40e:	8e 85       	ldd	r24, Y+14	; 0x0e
     410:	9f 85       	ldd	r25, Y+15	; 0x0f
     412:	8c 01       	movw	r16, r24
     414:	c8 01       	movw	r24, r16
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <SEND_TO_LCD+0x12e>
     41a:	8c 01       	movw	r16, r24
     41c:	1f 87       	std	Y+15, r17	; 0x0f
     41e:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(1);
	control_lcd &= ~2 ;				// EN =0
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	8d 7f       	andi	r24, 0xFD	; 253
     424:	89 83       	std	Y+1, r24	; 0x01
	write_to_calc(lcd_ctrl_port,control_lcd);
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	69 81       	ldd	r22, Y+1	; 0x01
     42a:	0e 94 53 00 	call	0xa6	; 0xa6 <write_to_calc>
}
     42e:	61 96       	adiw	r28, 0x11	; 17
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	cf 91       	pop	r28
     43c:	df 91       	pop	r29
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	08 95       	ret

00000444 <INIT_LCD>:

void INIT_LCD()
{
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
	SEND_TO_LCD(set_size,CMD);
     44c:	88 e3       	ldi	r24, 0x38	; 56
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
	SEND_TO_LCD(clr,CMD);
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
	SEND_TO_LCD(display_on,CMD)	;
     45c:	8e e0       	ldi	r24, 0x0E	; 14
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
}
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	08 95       	ret

0000046a <write_to_LCD>:

void write_to_LCD(char ch){
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	0f 92       	push	r0
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	89 83       	std	Y+1, r24	; 0x01
	SEND_TO_LCD(ch,DATA);
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
}
     47e:	0f 90       	pop	r0
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <print_to_LCD>:

void print_to_LCD(char *str){
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <print_to_LCD+0x6>
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	9a 83       	std	Y+2, r25	; 0x02
     492:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
     494:	0b c0       	rjmp	.+22     	; 0x4ac <print_to_LCD+0x26>
	{
		write_to_LCD(*str);
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	0e 94 35 02 	call	0x46a	; 0x46a <write_to_LCD>
		str++;
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	9a 83       	std	Y+2, r25	; 0x02
     4aa:	89 83       	std	Y+1, r24	; 0x01
void write_to_LCD(char ch){
	SEND_TO_LCD(ch,DATA);
}

void print_to_LCD(char *str){
	while(*str != '\0')
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	fc 01       	movw	r30, r24
     4b2:	80 81       	ld	r24, Z
     4b4:	88 23       	and	r24, r24
     4b6:	79 f7       	brne	.-34     	; 0x496 <print_to_LCD+0x10>
	{
		write_to_LCD(*str);
		str++;
	}
}
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	08 95       	ret

000004c2 <write_to_keypad>:

void write_to_keypad(uint8_t source){
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	df 93       	push	r29
     4c8:	cf 93       	push	r28
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	2f 97       	sbiw	r28, 0x0f	; 15
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	8f 87       	std	Y+15, r24	; 0x0f
	calc_data_mode = 0XF0; 
     4dc:	8a e2       	ldi	r24, 0x2A	; 42
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	20 ef       	ldi	r18, 0xF0	; 240
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
	calc_addr_port = keypad_port ; 
     4e6:	85 e2       	ldi	r24, 0x25	; 37
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	22 e0       	ldi	r18, 0x02	; 2
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
	calc_data_out_port = source ; 
     4f0:	8b e2       	ldi	r24, 0x2B	; 43
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	2f 85       	ldd	r18, Y+15	; 0x0f
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 83       	st	Z, r18
	calc_ctrl_port = IDLE; 
     4fa:	88 e2       	ldi	r24, 0x28	; 40
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
	calc_ctrl_port = WRITE ; 
     504:	88 e2       	ldi	r24, 0x28	; 40
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	2d ef       	ldi	r18, 0xFD	; 253
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e2       	ldi	r26, 0x20	; 32
     514:	b1 e4       	ldi	r27, 0x41	; 65
     516:	89 83       	std	Y+1, r24	; 0x01
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	ab 83       	std	Y+3, r26	; 0x03
     51c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     51e:	69 81       	ldd	r22, Y+1	; 0x01
     520:	7a 81       	ldd	r23, Y+2	; 0x02
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	4a e7       	ldi	r20, 0x7A	; 122
     52c:	55 e4       	ldi	r21, 0x45	; 69
     52e:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	8d 83       	std	Y+5, r24	; 0x05
     538:	9e 83       	std	Y+6, r25	; 0x06
     53a:	af 83       	std	Y+7, r26	; 0x07
     53c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     53e:	11 e0       	ldi	r17, 0x01	; 1
     540:	6d 81       	ldd	r22, Y+5	; 0x05
     542:	7e 81       	ldd	r23, Y+6	; 0x06
     544:	8f 81       	ldd	r24, Y+7	; 0x07
     546:	98 85       	ldd	r25, Y+8	; 0x08
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e8       	ldi	r20, 0x80	; 128
     54e:	5f e3       	ldi	r21, 0x3F	; 63
     550:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     554:	88 23       	and	r24, r24
     556:	0c f0       	brlt	.+2      	; 0x55a <write_to_keypad+0x98>
     558:	10 e0       	ldi	r17, 0x00	; 0
     55a:	11 23       	and	r17, r17
     55c:	29 f0       	breq	.+10     	; 0x568 <write_to_keypad+0xa6>
		__ticks = 1;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9a 87       	std	Y+10, r25	; 0x0a
     564:	89 87       	std	Y+9, r24	; 0x09
     566:	46 c0       	rjmp	.+140    	; 0x5f4 <write_to_keypad+0x132>
	else if (__tmp > 65535)
     568:	11 e0       	ldi	r17, 0x01	; 1
     56a:	6d 81       	ldd	r22, Y+5	; 0x05
     56c:	7e 81       	ldd	r23, Y+6	; 0x06
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	98 85       	ldd	r25, Y+8	; 0x08
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	3f ef       	ldi	r19, 0xFF	; 255
     576:	4f e7       	ldi	r20, 0x7F	; 127
     578:	57 e4       	ldi	r21, 0x47	; 71
     57a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     57e:	18 16       	cp	r1, r24
     580:	0c f0       	brlt	.+2      	; 0x584 <write_to_keypad+0xc2>
     582:	10 e0       	ldi	r17, 0x00	; 0
     584:	11 23       	and	r17, r17
     586:	61 f1       	breq	.+88     	; 0x5e0 <write_to_keypad+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     588:	69 81       	ldd	r22, Y+1	; 0x01
     58a:	7a 81       	ldd	r23, Y+2	; 0x02
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	9c 81       	ldd	r25, Y+4	; 0x04
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e2       	ldi	r20, 0x20	; 32
     596:	51 e4       	ldi	r21, 0x41	; 65
     598:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     59c:	dc 01       	movw	r26, r24
     59e:	cb 01       	movw	r24, r22
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	9a 87       	std	Y+10, r25	; 0x0a
     5ae:	89 87       	std	Y+9, r24	; 0x09
     5b0:	12 c0       	rjmp	.+36     	; 0x5d6 <write_to_keypad+0x114>
     5b2:	80 e9       	ldi	r24, 0x90	; 144
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	9c 87       	std	Y+12, r25	; 0x0c
     5b8:	8b 87       	std	Y+11, r24	; 0x0b
     5ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     5bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     5be:	8c 01       	movw	r16, r24
     5c0:	c8 01       	movw	r24, r16
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <write_to_keypad+0x100>
     5c6:	8c 01       	movw	r16, r24
     5c8:	1c 87       	std	Y+12, r17	; 0x0c
     5ca:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5cc:	89 85       	ldd	r24, Y+9	; 0x09
     5ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	9a 87       	std	Y+10, r25	; 0x0a
     5d4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5da:	00 97       	sbiw	r24, 0x00	; 0
     5dc:	51 f7       	brne	.-44     	; 0x5b2 <write_to_keypad+0xf0>
     5de:	17 c0       	rjmp	.+46     	; 0x60e <write_to_keypad+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e0:	6d 81       	ldd	r22, Y+5	; 0x05
     5e2:	7e 81       	ldd	r23, Y+6	; 0x06
     5e4:	8f 81       	ldd	r24, Y+7	; 0x07
     5e6:	98 85       	ldd	r25, Y+8	; 0x08
     5e8:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	9a 87       	std	Y+10, r25	; 0x0a
     5f2:	89 87       	std	Y+9, r24	; 0x09
     5f4:	89 85       	ldd	r24, Y+9	; 0x09
     5f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f8:	9e 87       	std	Y+14, r25	; 0x0e
     5fa:	8d 87       	std	Y+13, r24	; 0x0d
     5fc:	8d 85       	ldd	r24, Y+13	; 0x0d
     5fe:	9e 85       	ldd	r25, Y+14	; 0x0e
     600:	8c 01       	movw	r16, r24
     602:	f8 01       	movw	r30, r16
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <write_to_keypad+0x142>
     608:	8f 01       	movw	r16, r30
     60a:	1e 87       	std	Y+14, r17	; 0x0e
     60c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10); 
	calc_ctrl_port = IDLE;
     60e:	88 e2       	ldi	r24, 0x28	; 40
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	2f ef       	ldi	r18, 0xFF	; 255
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
}
     618:	2f 96       	adiw	r28, 0x0f	; 15
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	08 95       	ret

0000062e <read_from_keypad>:
uint8_t read_from_keypad()
{
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	df 93       	push	r29
     634:	cf 93       	push	r28
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	2f 97       	sbiw	r28, 0x0f	; 15
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
	uint8_t temp;
	calc_data_mode = 0X00; 
     646:	8a e2       	ldi	r24, 0x2A	; 42
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	fc 01       	movw	r30, r24
     64c:	10 82       	st	Z, r1
	calc_addr_port = keypad_port ; 
     64e:	85 e2       	ldi	r24, 0x25	; 37
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	22 e0       	ldi	r18, 0x02	; 2
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
	calc_ctrl_port = IDLE; 
     658:	88 e2       	ldi	r24, 0x28	; 40
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	2f ef       	ldi	r18, 0xFF	; 255
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
	calc_ctrl_port = READ ;
     662:	88 e2       	ldi	r24, 0x28	; 40
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	2e ef       	ldi	r18, 0xFE	; 254
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
	temp = calc_data_in_port ;
     66c:	89 e2       	ldi	r24, 0x29	; 41
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	fc 01       	movw	r30, r24
     672:	80 81       	ld	r24, Z
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	a0 e2       	ldi	r26, 0x20	; 32
     67c:	b1 e4       	ldi	r27, 0x41	; 65
     67e:	8a 83       	std	Y+2, r24	; 0x02
     680:	9b 83       	std	Y+3, r25	; 0x03
     682:	ac 83       	std	Y+4, r26	; 0x04
     684:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     686:	6a 81       	ldd	r22, Y+2	; 0x02
     688:	7b 81       	ldd	r23, Y+3	; 0x03
     68a:	8c 81       	ldd	r24, Y+4	; 0x04
     68c:	9d 81       	ldd	r25, Y+5	; 0x05
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	4a e7       	ldi	r20, 0x7A	; 122
     694:	55 e4       	ldi	r21, 0x45	; 69
     696:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	8e 83       	std	Y+6, r24	; 0x06
     6a0:	9f 83       	std	Y+7, r25	; 0x07
     6a2:	a8 87       	std	Y+8, r26	; 0x08
     6a4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     6a6:	11 e0       	ldi	r17, 0x01	; 1
     6a8:	6e 81       	ldd	r22, Y+6	; 0x06
     6aa:	7f 81       	ldd	r23, Y+7	; 0x07
     6ac:	88 85       	ldd	r24, Y+8	; 0x08
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e8       	ldi	r20, 0x80	; 128
     6b6:	5f e3       	ldi	r21, 0x3F	; 63
     6b8:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     6bc:	88 23       	and	r24, r24
     6be:	0c f0       	brlt	.+2      	; 0x6c2 <read_from_keypad+0x94>
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	11 23       	and	r17, r17
     6c4:	29 f0       	breq	.+10     	; 0x6d0 <read_from_keypad+0xa2>
		__ticks = 1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	9b 87       	std	Y+11, r25	; 0x0b
     6cc:	8a 87       	std	Y+10, r24	; 0x0a
     6ce:	46 c0       	rjmp	.+140    	; 0x75c <read_from_keypad+0x12e>
	else if (__tmp > 65535)
     6d0:	11 e0       	ldi	r17, 0x01	; 1
     6d2:	6e 81       	ldd	r22, Y+6	; 0x06
     6d4:	7f 81       	ldd	r23, Y+7	; 0x07
     6d6:	88 85       	ldd	r24, Y+8	; 0x08
     6d8:	99 85       	ldd	r25, Y+9	; 0x09
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	3f ef       	ldi	r19, 0xFF	; 255
     6de:	4f e7       	ldi	r20, 0x7F	; 127
     6e0:	57 e4       	ldi	r21, 0x47	; 71
     6e2:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     6e6:	18 16       	cp	r1, r24
     6e8:	0c f0       	brlt	.+2      	; 0x6ec <read_from_keypad+0xbe>
     6ea:	10 e0       	ldi	r17, 0x00	; 0
     6ec:	11 23       	and	r17, r17
     6ee:	61 f1       	breq	.+88     	; 0x748 <read_from_keypad+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f0:	6a 81       	ldd	r22, Y+2	; 0x02
     6f2:	7b 81       	ldd	r23, Y+3	; 0x03
     6f4:	8c 81       	ldd	r24, Y+4	; 0x04
     6f6:	9d 81       	ldd	r25, Y+5	; 0x05
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e2       	ldi	r20, 0x20	; 32
     6fe:	51 e4       	ldi	r21, 0x41	; 65
     700:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     704:	dc 01       	movw	r26, r24
     706:	cb 01       	movw	r24, r22
     708:	bc 01       	movw	r22, r24
     70a:	cd 01       	movw	r24, r26
     70c:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	9b 87       	std	Y+11, r25	; 0x0b
     716:	8a 87       	std	Y+10, r24	; 0x0a
     718:	12 c0       	rjmp	.+36     	; 0x73e <read_from_keypad+0x110>
     71a:	80 e9       	ldi	r24, 0x90	; 144
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	9d 87       	std	Y+13, r25	; 0x0d
     720:	8c 87       	std	Y+12, r24	; 0x0c
     722:	8c 85       	ldd	r24, Y+12	; 0x0c
     724:	9d 85       	ldd	r25, Y+13	; 0x0d
     726:	8c 01       	movw	r16, r24
     728:	c8 01       	movw	r24, r16
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <read_from_keypad+0xfc>
     72e:	8c 01       	movw	r16, r24
     730:	1d 87       	std	Y+13, r17	; 0x0d
     732:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	8a 85       	ldd	r24, Y+10	; 0x0a
     736:	9b 85       	ldd	r25, Y+11	; 0x0b
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9b 87       	std	Y+11, r25	; 0x0b
     73c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73e:	8a 85       	ldd	r24, Y+10	; 0x0a
     740:	9b 85       	ldd	r25, Y+11	; 0x0b
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	51 f7       	brne	.-44     	; 0x71a <read_from_keypad+0xec>
     746:	17 c0       	rjmp	.+46     	; 0x776 <read_from_keypad+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     748:	6e 81       	ldd	r22, Y+6	; 0x06
     74a:	7f 81       	ldd	r23, Y+7	; 0x07
     74c:	88 85       	ldd	r24, Y+8	; 0x08
     74e:	99 85       	ldd	r25, Y+9	; 0x09
     750:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	9b 87       	std	Y+11, r25	; 0x0b
     75a:	8a 87       	std	Y+10, r24	; 0x0a
     75c:	8a 85       	ldd	r24, Y+10	; 0x0a
     75e:	9b 85       	ldd	r25, Y+11	; 0x0b
     760:	9f 87       	std	Y+15, r25	; 0x0f
     762:	8e 87       	std	Y+14, r24	; 0x0e
     764:	8e 85       	ldd	r24, Y+14	; 0x0e
     766:	9f 85       	ldd	r25, Y+15	; 0x0f
     768:	8c 01       	movw	r16, r24
     76a:	f8 01       	movw	r30, r16
     76c:	31 97       	sbiw	r30, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <read_from_keypad+0x13e>
     770:	8f 01       	movw	r16, r30
     772:	1f 87       	std	Y+15, r17	; 0x0f
     774:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(10);
	calc_ctrl_port = IDLE; 
     776:	88 e2       	ldi	r24, 0x28	; 40
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	2f ef       	ldi	r18, 0xFF	; 255
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
	return temp ;
     780:	89 81       	ldd	r24, Y+1	; 0x01
}
     782:	2f 96       	adiw	r28, 0x0f	; 15
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <get_key_presed>:

char get_key_presed(){
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	ee 97       	sbiw	r28, 0x3e	; 62
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t OUT_VAL[4] ={0XEF,0XDF,0XBF,0X7F};
     7b0:	8f ee       	ldi	r24, 0xEF	; 239
     7b2:	8b af       	std	Y+59, r24	; 0x3b
     7b4:	8f ed       	ldi	r24, 0xDF	; 223
     7b6:	8c af       	std	Y+60, r24	; 0x3c
     7b8:	8f eb       	ldi	r24, 0xBF	; 191
     7ba:	8d af       	std	Y+61, r24	; 0x3d
     7bc:	8f e7       	ldi	r24, 0x7F	; 127
     7be:	8e af       	std	Y+62, r24	; 0x3e
	while (1)
	{
		for (uint8_t i=0;i<4;i++)
     7c0:	19 82       	std	Y+1, r1	; 0x01
     7c2:	5c c2       	rjmp	.+1208   	; 0xc7c <__stack+0x37d>
		{
			uint8_t tmp;
			write_to_keypad(OUT_VAL[i]);
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	88 2f       	mov	r24, r24
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	9e 01       	movw	r18, r28
     7cc:	25 5c       	subi	r18, 0xC5	; 197
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	82 0f       	add	r24, r18
     7d2:	93 1f       	adc	r25, r19
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <write_to_keypad>
			tmp = read_from_keypad();
     7dc:	0e 94 17 03 	call	0x62e	; 0x62e <read_from_keypad>
     7e0:	8a 83       	std	Y+2, r24	; 0x02
			tmp &= 0X0F;
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	8f 70       	andi	r24, 0x0F	; 15
     7e6:	8a 83       	std	Y+2, r24	; 0x02
			switch (tmp) {
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	88 2f       	mov	r24, r24
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	8b 30       	cpi	r24, 0x0B	; 11
     7f0:	91 05       	cpc	r25, r1
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <get_key_presed+0x5e>
     7f4:	28 c1       	rjmp	.+592    	; 0xa46 <__stack+0x147>
     7f6:	8c 30       	cpi	r24, 0x0C	; 12
     7f8:	91 05       	cpc	r25, r1
     7fa:	2c f4       	brge	.+10     	; 0x806 <get_key_presed+0x6e>
     7fc:	87 30       	cpi	r24, 0x07	; 7
     7fe:	91 05       	cpc	r25, r1
     800:	09 f4       	brne	.+2      	; 0x804 <get_key_presed+0x6c>
     802:	ad c1       	rjmp	.+858    	; 0xb5e <__stack+0x25f>
     804:	38 c2       	rjmp	.+1136   	; 0xc76 <__stack+0x377>
     806:	8d 30       	cpi	r24, 0x0D	; 13
     808:	91 05       	cpc	r25, r1
     80a:	09 f4       	brne	.+2      	; 0x80e <get_key_presed+0x76>
     80c:	90 c0       	rjmp	.+288    	; 0x92e <__stack+0x2f>
     80e:	8e 30       	cpi	r24, 0x0E	; 14
     810:	91 05       	cpc	r25, r1
     812:	09 f0       	breq	.+2      	; 0x816 <get_key_presed+0x7e>
     814:	30 c2       	rjmp	.+1120   	; 0xc76 <__stack+0x377>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a6 e9       	ldi	r26, 0x96	; 150
     81c:	b3 e4       	ldi	r27, 0x43	; 67
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ad 83       	std	Y+5, r26	; 0x05
     824:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     826:	6b 81       	ldd	r22, Y+3	; 0x03
     828:	7c 81       	ldd	r23, Y+4	; 0x04
     82a:	8d 81       	ldd	r24, Y+5	; 0x05
     82c:	9e 81       	ldd	r25, Y+6	; 0x06
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	4a e7       	ldi	r20, 0x7A	; 122
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8f 83       	std	Y+7, r24	; 0x07
     840:	98 87       	std	Y+8, r25	; 0x08
     842:	a9 87       	std	Y+9, r26	; 0x09
     844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     846:	11 e0       	ldi	r17, 0x01	; 1
     848:	6f 81       	ldd	r22, Y+7	; 0x07
     84a:	78 85       	ldd	r23, Y+8	; 0x08
     84c:	89 85       	ldd	r24, Y+9	; 0x09
     84e:	9a 85       	ldd	r25, Y+10	; 0x0a
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e8       	ldi	r20, 0x80	; 128
     856:	5f e3       	ldi	r21, 0x3F	; 63
     858:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     85c:	88 23       	and	r24, r24
     85e:	0c f0       	brlt	.+2      	; 0x862 <get_key_presed+0xca>
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	11 23       	and	r17, r17
     864:	29 f0       	breq	.+10     	; 0x870 <get_key_presed+0xd8>
		__ticks = 1;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9c 87       	std	Y+12, r25	; 0x0c
     86c:	8b 87       	std	Y+11, r24	; 0x0b
     86e:	46 c0       	rjmp	.+140    	; 0x8fc <get_key_presed+0x164>
	else if (__tmp > 65535)
     870:	11 e0       	ldi	r17, 0x01	; 1
     872:	6f 81       	ldd	r22, Y+7	; 0x07
     874:	78 85       	ldd	r23, Y+8	; 0x08
     876:	89 85       	ldd	r24, Y+9	; 0x09
     878:	9a 85       	ldd	r25, Y+10	; 0x0a
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	3f ef       	ldi	r19, 0xFF	; 255
     87e:	4f e7       	ldi	r20, 0x7F	; 127
     880:	57 e4       	ldi	r21, 0x47	; 71
     882:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     886:	18 16       	cp	r1, r24
     888:	0c f0       	brlt	.+2      	; 0x88c <get_key_presed+0xf4>
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	11 23       	and	r17, r17
     88e:	61 f1       	breq	.+88     	; 0x8e8 <get_key_presed+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     890:	6b 81       	ldd	r22, Y+3	; 0x03
     892:	7c 81       	ldd	r23, Y+4	; 0x04
     894:	8d 81       	ldd	r24, Y+5	; 0x05
     896:	9e 81       	ldd	r25, Y+6	; 0x06
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e2       	ldi	r20, 0x20	; 32
     89e:	51 e4       	ldi	r21, 0x41	; 65
     8a0:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	bc 01       	movw	r22, r24
     8aa:	cd 01       	movw	r24, r26
     8ac:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     8b0:	dc 01       	movw	r26, r24
     8b2:	cb 01       	movw	r24, r22
     8b4:	9c 87       	std	Y+12, r25	; 0x0c
     8b6:	8b 87       	std	Y+11, r24	; 0x0b
     8b8:	12 c0       	rjmp	.+36     	; 0x8de <get_key_presed+0x146>
     8ba:	80 e9       	ldi	r24, 0x90	; 144
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	9e 87       	std	Y+14, r25	; 0x0e
     8c0:	8d 87       	std	Y+13, r24	; 0x0d
     8c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     8c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     8c6:	8c 01       	movw	r16, r24
     8c8:	c8 01       	movw	r24, r16
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <get_key_presed+0x132>
     8ce:	8c 01       	movw	r16, r24
     8d0:	1e 87       	std	Y+14, r17	; 0x0e
     8d2:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	9c 87       	std	Y+12, r25	; 0x0c
     8dc:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8de:	8b 85       	ldd	r24, Y+11	; 0x0b
     8e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	51 f7       	brne	.-44     	; 0x8ba <get_key_presed+0x122>
     8e6:	17 c0       	rjmp	.+46     	; 0x916 <__stack+0x17>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e8:	6f 81       	ldd	r22, Y+7	; 0x07
     8ea:	78 85       	ldd	r23, Y+8	; 0x08
     8ec:	89 85       	ldd	r24, Y+9	; 0x09
     8ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f0:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	9c 87       	std	Y+12, r25	; 0x0c
     8fa:	8b 87       	std	Y+11, r24	; 0x0b
     8fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     8fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     900:	98 8b       	std	Y+16, r25	; 0x10
     902:	8f 87       	std	Y+15, r24	; 0x0f
     904:	8f 85       	ldd	r24, Y+15	; 0x0f
     906:	98 89       	ldd	r25, Y+16	; 0x10
     908:	8c 01       	movw	r16, r24
     90a:	f8 01       	movw	r30, r16
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xd>
     910:	8f 01       	movw	r16, r30
     912:	18 8b       	std	Y+16, r17	; 0x10
     914:	0f 87       	std	Y+15, r16	; 0x0f
				case 0X0E :	_delay_ms(300) ; return MyKeypad[i][0]; break;
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	88 2f       	mov	r24, r24
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	80 50       	subi	r24, 0x00	; 0
     926:	9f 4f       	sbci	r25, 0xFF	; 255
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	ac c1       	rjmp	.+856    	; 0xc86 <__stack+0x387>
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a6 e9       	ldi	r26, 0x96	; 150
     934:	b3 e4       	ldi	r27, 0x43	; 67
     936:	89 8b       	std	Y+17, r24	; 0x11
     938:	9a 8b       	std	Y+18, r25	; 0x12
     93a:	ab 8b       	std	Y+19, r26	; 0x13
     93c:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     93e:	69 89       	ldd	r22, Y+17	; 0x11
     940:	7a 89       	ldd	r23, Y+18	; 0x12
     942:	8b 89       	ldd	r24, Y+19	; 0x13
     944:	9c 89       	ldd	r25, Y+20	; 0x14
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	4a e7       	ldi	r20, 0x7A	; 122
     94c:	55 e4       	ldi	r21, 0x45	; 69
     94e:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
     956:	8d 8b       	std	Y+21, r24	; 0x15
     958:	9e 8b       	std	Y+22, r25	; 0x16
     95a:	af 8b       	std	Y+23, r26	; 0x17
     95c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     95e:	11 e0       	ldi	r17, 0x01	; 1
     960:	6d 89       	ldd	r22, Y+21	; 0x15
     962:	7e 89       	ldd	r23, Y+22	; 0x16
     964:	8f 89       	ldd	r24, Y+23	; 0x17
     966:	98 8d       	ldd	r25, Y+24	; 0x18
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e8       	ldi	r20, 0x80	; 128
     96e:	5f e3       	ldi	r21, 0x3F	; 63
     970:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     974:	88 23       	and	r24, r24
     976:	0c f0       	brlt	.+2      	; 0x97a <__stack+0x7b>
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	11 23       	and	r17, r17
     97c:	29 f0       	breq	.+10     	; 0x988 <__stack+0x89>
		__ticks = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	9a 8f       	std	Y+26, r25	; 0x1a
     984:	89 8f       	std	Y+25, r24	; 0x19
     986:	46 c0       	rjmp	.+140    	; 0xa14 <__stack+0x115>
	else if (__tmp > 65535)
     988:	11 e0       	ldi	r17, 0x01	; 1
     98a:	6d 89       	ldd	r22, Y+21	; 0x15
     98c:	7e 89       	ldd	r23, Y+22	; 0x16
     98e:	8f 89       	ldd	r24, Y+23	; 0x17
     990:	98 8d       	ldd	r25, Y+24	; 0x18
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	3f ef       	ldi	r19, 0xFF	; 255
     996:	4f e7       	ldi	r20, 0x7F	; 127
     998:	57 e4       	ldi	r21, 0x47	; 71
     99a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     99e:	18 16       	cp	r1, r24
     9a0:	0c f0       	brlt	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	10 e0       	ldi	r17, 0x00	; 0
     9a4:	11 23       	and	r17, r17
     9a6:	61 f1       	breq	.+88     	; 0xa00 <__stack+0x101>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a8:	69 89       	ldd	r22, Y+17	; 0x11
     9aa:	7a 89       	ldd	r23, Y+18	; 0x12
     9ac:	8b 89       	ldd	r24, Y+19	; 0x13
     9ae:	9c 89       	ldd	r25, Y+20	; 0x14
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e2       	ldi	r20, 0x20	; 32
     9b6:	51 e4       	ldi	r21, 0x41	; 65
     9b8:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	bc 01       	movw	r22, r24
     9c2:	cd 01       	movw	r24, r26
     9c4:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	9a 8f       	std	Y+26, r25	; 0x1a
     9ce:	89 8f       	std	Y+25, r24	; 0x19
     9d0:	12 c0       	rjmp	.+36     	; 0x9f6 <__stack+0xf7>
     9d2:	80 e9       	ldi	r24, 0x90	; 144
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	9c 8f       	std	Y+28, r25	; 0x1c
     9d8:	8b 8f       	std	Y+27, r24	; 0x1b
     9da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9de:	8c 01       	movw	r16, r24
     9e0:	c8 01       	movw	r24, r16
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <__stack+0xe3>
     9e6:	8c 01       	movw	r16, r24
     9e8:	1c 8f       	std	Y+28, r17	; 0x1c
     9ea:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ec:	89 8d       	ldd	r24, Y+25	; 0x19
     9ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	9a 8f       	std	Y+26, r25	; 0x1a
     9f4:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f6:	89 8d       	ldd	r24, Y+25	; 0x19
     9f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	51 f7       	brne	.-44     	; 0x9d2 <__stack+0xd3>
     9fe:	17 c0       	rjmp	.+46     	; 0xa2e <__stack+0x12f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a00:	6d 89       	ldd	r22, Y+21	; 0x15
     a02:	7e 89       	ldd	r23, Y+22	; 0x16
     a04:	8f 89       	ldd	r24, Y+23	; 0x17
     a06:	98 8d       	ldd	r25, Y+24	; 0x18
     a08:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     a0c:	dc 01       	movw	r26, r24
     a0e:	cb 01       	movw	r24, r22
     a10:	9a 8f       	std	Y+26, r25	; 0x1a
     a12:	89 8f       	std	Y+25, r24	; 0x19
     a14:	89 8d       	ldd	r24, Y+25	; 0x19
     a16:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a18:	9e 8f       	std	Y+30, r25	; 0x1e
     a1a:	8d 8f       	std	Y+29, r24	; 0x1d
     a1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a20:	8c 01       	movw	r16, r24
     a22:	f8 01       	movw	r30, r16
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <__stack+0x125>
     a28:	8f 01       	movw	r16, r30
     a2a:	1e 8f       	std	Y+30, r17	; 0x1e
     a2c:	0d 8f       	std	Y+29, r16	; 0x1d
				case 0X0D : _delay_ms(300) ; return MyKeypad[i][1]; break;
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	8f 5f       	subi	r24, 0xFF	; 255
     a3e:	9e 4f       	sbci	r25, 0xFE	; 254
     a40:	fc 01       	movw	r30, r24
     a42:	80 81       	ld	r24, Z
     a44:	20 c1       	rjmp	.+576    	; 0xc86 <__stack+0x387>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	a6 e9       	ldi	r26, 0x96	; 150
     a4c:	b3 e4       	ldi	r27, 0x43	; 67
     a4e:	8f 8f       	std	Y+31, r24	; 0x1f
     a50:	98 a3       	std	Y+32, r25	; 0x20
     a52:	a9 a3       	std	Y+33, r26	; 0x21
     a54:	ba a3       	std	Y+34, r27	; 0x22
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     a56:	6f 8d       	ldd	r22, Y+31	; 0x1f
     a58:	78 a1       	ldd	r23, Y+32	; 0x20
     a5a:	89 a1       	ldd	r24, Y+33	; 0x21
     a5c:	9a a1       	ldd	r25, Y+34	; 0x22
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	4a e7       	ldi	r20, 0x7A	; 122
     a64:	55 e4       	ldi	r21, 0x45	; 69
     a66:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	8b a3       	std	Y+35, r24	; 0x23
     a70:	9c a3       	std	Y+36, r25	; 0x24
     a72:	ad a3       	std	Y+37, r26	; 0x25
     a74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     a76:	11 e0       	ldi	r17, 0x01	; 1
     a78:	6b a1       	ldd	r22, Y+35	; 0x23
     a7a:	7c a1       	ldd	r23, Y+36	; 0x24
     a7c:	8d a1       	ldd	r24, Y+37	; 0x25
     a7e:	9e a1       	ldd	r25, Y+38	; 0x26
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	5f e3       	ldi	r21, 0x3F	; 63
     a88:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	0c f0       	brlt	.+2      	; 0xa92 <__stack+0x193>
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	11 23       	and	r17, r17
     a94:	29 f0       	breq	.+10     	; 0xaa0 <__stack+0x1a1>
		__ticks = 1;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	98 a7       	std	Y+40, r25	; 0x28
     a9c:	8f a3       	std	Y+39, r24	; 0x27
     a9e:	46 c0       	rjmp	.+140    	; 0xb2c <__stack+0x22d>
	else if (__tmp > 65535)
     aa0:	11 e0       	ldi	r17, 0x01	; 1
     aa2:	6b a1       	ldd	r22, Y+35	; 0x23
     aa4:	7c a1       	ldd	r23, Y+36	; 0x24
     aa6:	8d a1       	ldd	r24, Y+37	; 0x25
     aa8:	9e a1       	ldd	r25, Y+38	; 0x26
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	4f e7       	ldi	r20, 0x7F	; 127
     ab0:	57 e4       	ldi	r21, 0x47	; 71
     ab2:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     ab6:	18 16       	cp	r1, r24
     ab8:	0c f0       	brlt	.+2      	; 0xabc <__stack+0x1bd>
     aba:	10 e0       	ldi	r17, 0x00	; 0
     abc:	11 23       	and	r17, r17
     abe:	61 f1       	breq	.+88     	; 0xb18 <__stack+0x219>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac0:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ac2:	78 a1       	ldd	r23, Y+32	; 0x20
     ac4:	89 a1       	ldd	r24, Y+33	; 0x21
     ac6:	9a a1       	ldd	r25, Y+34	; 0x22
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e2       	ldi	r20, 0x20	; 32
     ace:	51 e4       	ldi	r21, 0x41	; 65
     ad0:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     ad4:	dc 01       	movw	r26, r24
     ad6:	cb 01       	movw	r24, r22
     ad8:	bc 01       	movw	r22, r24
     ada:	cd 01       	movw	r24, r26
     adc:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     ae0:	dc 01       	movw	r26, r24
     ae2:	cb 01       	movw	r24, r22
     ae4:	98 a7       	std	Y+40, r25	; 0x28
     ae6:	8f a3       	std	Y+39, r24	; 0x27
     ae8:	12 c0       	rjmp	.+36     	; 0xb0e <__stack+0x20f>
     aea:	80 e9       	ldi	r24, 0x90	; 144
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	9a a7       	std	Y+42, r25	; 0x2a
     af0:	89 a7       	std	Y+41, r24	; 0x29
     af2:	89 a5       	ldd	r24, Y+41	; 0x29
     af4:	9a a5       	ldd	r25, Y+42	; 0x2a
     af6:	8c 01       	movw	r16, r24
     af8:	c8 01       	movw	r24, r16
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <__stack+0x1fb>
     afe:	8c 01       	movw	r16, r24
     b00:	1a a7       	std	Y+42, r17	; 0x2a
     b02:	09 a7       	std	Y+41, r16	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b04:	8f a1       	ldd	r24, Y+39	; 0x27
     b06:	98 a5       	ldd	r25, Y+40	; 0x28
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	98 a7       	std	Y+40, r25	; 0x28
     b0c:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b0e:	8f a1       	ldd	r24, Y+39	; 0x27
     b10:	98 a5       	ldd	r25, Y+40	; 0x28
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	51 f7       	brne	.-44     	; 0xaea <__stack+0x1eb>
     b16:	17 c0       	rjmp	.+46     	; 0xb46 <__stack+0x247>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b18:	6b a1       	ldd	r22, Y+35	; 0x23
     b1a:	7c a1       	ldd	r23, Y+36	; 0x24
     b1c:	8d a1       	ldd	r24, Y+37	; 0x25
     b1e:	9e a1       	ldd	r25, Y+38	; 0x26
     b20:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	98 a7       	std	Y+40, r25	; 0x28
     b2a:	8f a3       	std	Y+39, r24	; 0x27
     b2c:	8f a1       	ldd	r24, Y+39	; 0x27
     b2e:	98 a5       	ldd	r25, Y+40	; 0x28
     b30:	9c a7       	std	Y+44, r25	; 0x2c
     b32:	8b a7       	std	Y+43, r24	; 0x2b
     b34:	8b a5       	ldd	r24, Y+43	; 0x2b
     b36:	9c a5       	ldd	r25, Y+44	; 0x2c
     b38:	8c 01       	movw	r16, r24
     b3a:	f8 01       	movw	r30, r16
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <__stack+0x23d>
     b40:	8f 01       	movw	r16, r30
     b42:	1c a7       	std	Y+44, r17	; 0x2c
     b44:	0b a7       	std	Y+43, r16	; 0x2b
				case 0X0B : _delay_ms(300) ; return MyKeypad[i][2]; break;
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	8e 5f       	subi	r24, 0xFE	; 254
     b56:	9e 4f       	sbci	r25, 0xFE	; 254
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	94 c0       	rjmp	.+296    	; 0xc86 <__stack+0x387>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a6 e9       	ldi	r26, 0x96	; 150
     b64:	b3 e4       	ldi	r27, 0x43	; 67
     b66:	8d a7       	std	Y+45, r24	; 0x2d
     b68:	9e a7       	std	Y+46, r25	; 0x2e
     b6a:	af a7       	std	Y+47, r26	; 0x2f
     b6c:	b8 ab       	std	Y+48, r27	; 0x30
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6e:	6d a5       	ldd	r22, Y+45	; 0x2d
     b70:	7e a5       	ldd	r23, Y+46	; 0x2e
     b72:	8f a5       	ldd	r24, Y+47	; 0x2f
     b74:	98 a9       	ldd	r25, Y+48	; 0x30
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4a e7       	ldi	r20, 0x7A	; 122
     b7c:	55 e4       	ldi	r21, 0x45	; 69
     b7e:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	89 ab       	std	Y+49, r24	; 0x31
     b88:	9a ab       	std	Y+50, r25	; 0x32
     b8a:	ab ab       	std	Y+51, r26	; 0x33
     b8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     b8e:	11 e0       	ldi	r17, 0x01	; 1
     b90:	69 a9       	ldd	r22, Y+49	; 0x31
     b92:	7a a9       	ldd	r23, Y+50	; 0x32
     b94:	8b a9       	ldd	r24, Y+51	; 0x33
     b96:	9c a9       	ldd	r25, Y+52	; 0x34
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	40 e8       	ldi	r20, 0x80	; 128
     b9e:	5f e3       	ldi	r21, 0x3F	; 63
     ba0:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     ba4:	88 23       	and	r24, r24
     ba6:	0c f0       	brlt	.+2      	; 0xbaa <__stack+0x2ab>
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	11 23       	and	r17, r17
     bac:	29 f0       	breq	.+10     	; 0xbb8 <__stack+0x2b9>
		__ticks = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9e ab       	std	Y+54, r25	; 0x36
     bb4:	8d ab       	std	Y+53, r24	; 0x35
     bb6:	46 c0       	rjmp	.+140    	; 0xc44 <__stack+0x345>
	else if (__tmp > 65535)
     bb8:	11 e0       	ldi	r17, 0x01	; 1
     bba:	69 a9       	ldd	r22, Y+49	; 0x31
     bbc:	7a a9       	ldd	r23, Y+50	; 0x32
     bbe:	8b a9       	ldd	r24, Y+51	; 0x33
     bc0:	9c a9       	ldd	r25, Y+52	; 0x34
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	3f ef       	ldi	r19, 0xFF	; 255
     bc6:	4f e7       	ldi	r20, 0x7F	; 127
     bc8:	57 e4       	ldi	r21, 0x47	; 71
     bca:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     bce:	18 16       	cp	r1, r24
     bd0:	0c f0       	brlt	.+2      	; 0xbd4 <__stack+0x2d5>
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	11 23       	and	r17, r17
     bd6:	61 f1       	breq	.+88     	; 0xc30 <__stack+0x331>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd8:	6d a5       	ldd	r22, Y+45	; 0x2d
     bda:	7e a5       	ldd	r23, Y+46	; 0x2e
     bdc:	8f a5       	ldd	r24, Y+47	; 0x2f
     bde:	98 a9       	ldd	r25, Y+48	; 0x30
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e2       	ldi	r20, 0x20	; 32
     be6:	51 e4       	ldi	r21, 0x41	; 65
     be8:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	9e ab       	std	Y+54, r25	; 0x36
     bfe:	8d ab       	std	Y+53, r24	; 0x35
     c00:	12 c0       	rjmp	.+36     	; 0xc26 <__stack+0x327>
     c02:	80 e9       	ldi	r24, 0x90	; 144
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	98 af       	std	Y+56, r25	; 0x38
     c08:	8f ab       	std	Y+55, r24	; 0x37
     c0a:	8f a9       	ldd	r24, Y+55	; 0x37
     c0c:	98 ad       	ldd	r25, Y+56	; 0x38
     c0e:	8c 01       	movw	r16, r24
     c10:	c8 01       	movw	r24, r16
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <__stack+0x313>
     c16:	8c 01       	movw	r16, r24
     c18:	18 af       	std	Y+56, r17	; 0x38
     c1a:	0f ab       	std	Y+55, r16	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1c:	8d a9       	ldd	r24, Y+53	; 0x35
     c1e:	9e a9       	ldd	r25, Y+54	; 0x36
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	9e ab       	std	Y+54, r25	; 0x36
     c24:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c26:	8d a9       	ldd	r24, Y+53	; 0x35
     c28:	9e a9       	ldd	r25, Y+54	; 0x36
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	51 f7       	brne	.-44     	; 0xc02 <__stack+0x303>
     c2e:	17 c0       	rjmp	.+46     	; 0xc5e <__stack+0x35f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c30:	69 a9       	ldd	r22, Y+49	; 0x31
     c32:	7a a9       	ldd	r23, Y+50	; 0x32
     c34:	8b a9       	ldd	r24, Y+51	; 0x33
     c36:	9c a9       	ldd	r25, Y+52	; 0x34
     c38:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	9e ab       	std	Y+54, r25	; 0x36
     c42:	8d ab       	std	Y+53, r24	; 0x35
     c44:	8d a9       	ldd	r24, Y+53	; 0x35
     c46:	9e a9       	ldd	r25, Y+54	; 0x36
     c48:	9a af       	std	Y+58, r25	; 0x3a
     c4a:	89 af       	std	Y+57, r24	; 0x39
     c4c:	89 ad       	ldd	r24, Y+57	; 0x39
     c4e:	9a ad       	ldd	r25, Y+58	; 0x3a
     c50:	8c 01       	movw	r16, r24
     c52:	f8 01       	movw	r30, r16
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <__stack+0x355>
     c58:	8f 01       	movw	r16, r30
     c5a:	1a af       	std	Y+58, r17	; 0x3a
     c5c:	09 af       	std	Y+57, r16	; 0x39
				case 0X07 :	_delay_ms(300) ; return MyKeypad[i][3]; break;
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	88 2f       	mov	r24, r24
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	8d 5f       	subi	r24, 0xFD	; 253
     c6e:	9e 4f       	sbci	r25, 0xFE	; 254
     c70:	fc 01       	movw	r30, r24
     c72:	80 81       	ld	r24, Z
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <__stack+0x387>

char get_key_presed(){
	uint8_t OUT_VAL[4] ={0XEF,0XDF,0XBF,0X7F};
	while (1)
	{
		for (uint8_t i=0;i<4;i++)
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	08 f4       	brcc	.+2      	; 0xc84 <__stack+0x385>
     c82:	a0 cd       	rjmp	.-1216   	; 0x7c4 <get_key_presed+0x2c>
				case 0X0D : _delay_ms(300) ; return MyKeypad[i][1]; break;
				case 0X0B : _delay_ms(300) ; return MyKeypad[i][2]; break;
				case 0X07 :	_delay_ms(300) ; return MyKeypad[i][3]; break;
			}					
		}		
	}
     c84:	9d cd       	rjmp	.-1222   	; 0x7c0 <get_key_presed+0x28>
}
     c86:	ee 96       	adiw	r28, 0x3e	; 62
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	08 95       	ret

00000c9c <Sign_to_Unsign>:

int Sign_to_Unsign(char *sign,int Num ,int x){
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <Sign_to_Unsign+0x6>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Sign_to_Unsign+0x8>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <Sign_to_Unsign+0xa>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	7c 83       	std	Y+4, r23	; 0x04
     cb0:	6b 83       	std	Y+3, r22	; 0x03
     cb2:	5e 83       	std	Y+6, r21	; 0x06
     cb4:	4d 83       	std	Y+5, r20	; 0x05
		ret+=sign[Num]-'0';
		ret*=10;
		Num++;
	}
	return (ret/10)*mul;*/
}
     cb6:	26 96       	adiw	r28, 0x06	; 6
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <res>:
 
int res(int firNum ,int SecNum,char op){
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <res+0x6>
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <res+0x8>
     cd0:	0f 92       	push	r0
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	7c 83       	std	Y+4, r23	; 0x04
     cdc:	6b 83       	std	Y+3, r22	; 0x03
     cde:	4d 83       	std	Y+5, r20	; 0x05
			if(SecNum=0)
			  write_to_LCD(Error);
			else
			  return firNum/SecNum;  
		} */			
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <operate>:

void operate(){
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
				break;
			}
			if (arr[i]=='=') return ;
		}
	}*/
}
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <to_string>:

void to_string(int in){ 
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	00 d0       	rcall	.+0      	; 0xd04 <to_string+0x6>
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	9a 83       	std	Y+2, r25	; 0x02
     d0a:	89 83       	std	Y+1, r24	; 0x01
		tarr[ptr++]=(in%10)+'0';
		in/=10;
	}
	if (tmp<0) tarr[ptr++]='-';
	for (int i=0;i<ptr;i++) arr[i]=tarr[ptr-1-i];*/
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <calculate>:

int calculate(){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
		f=Sign_to_Unsign(arr,0,pos-1);
		s=Sign_to_Unsign(arr,pos+1,sz-2);
		return res(f,s,op);
	}
*/
}
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <main>:

int main(void)
{
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	2f 97       	sbiw	r28, 0x0f	; 15
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
	init_calc();
     d3c:	0e 94 5f 01 	call	0x2be	; 0x2be <init_calc>
	INIT_LCD();
     d40:	0e 94 22 02 	call	0x444	; 0x444 <INIT_LCD>
	print_to_LCD("hello");
     d44:	80 e1       	ldi	r24, 0x10	; 16
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 43 02 	call	0x486	; 0x486 <print_to_LCD>
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	aa e7       	ldi	r26, 0x7A	; 122
     d52:	b4 e4       	ldi	r27, 0x44	; 68
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	9b 83       	std	Y+3, r25	; 0x03
     d58:	ac 83       	std	Y+4, r26	; 0x04
     d5a:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     d5c:	6a 81       	ldd	r22, Y+2	; 0x02
     d5e:	7b 81       	ldd	r23, Y+3	; 0x03
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4a e7       	ldi	r20, 0x7A	; 122
     d6a:	55 e4       	ldi	r21, 0x45	; 69
     d6c:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	8e 83       	std	Y+6, r24	; 0x06
     d76:	9f 83       	std	Y+7, r25	; 0x07
     d78:	a8 87       	std	Y+8, r26	; 0x08
     d7a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     d7c:	11 e0       	ldi	r17, 0x01	; 1
     d7e:	6e 81       	ldd	r22, Y+6	; 0x06
     d80:	7f 81       	ldd	r23, Y+7	; 0x07
     d82:	88 85       	ldd	r24, Y+8	; 0x08
     d84:	99 85       	ldd	r25, Y+9	; 0x09
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e8       	ldi	r20, 0x80	; 128
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ltsf2>
     d92:	88 23       	and	r24, r24
     d94:	0c f0       	brlt	.+2      	; 0xd98 <main+0x74>
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	11 23       	and	r17, r17
     d9a:	29 f0       	breq	.+10     	; 0xda6 <main+0x82>
		__ticks = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9b 87       	std	Y+11, r25	; 0x0b
     da2:	8a 87       	std	Y+10, r24	; 0x0a
     da4:	46 c0       	rjmp	.+140    	; 0xe32 <main+0x10e>
	else if (__tmp > 65535)
     da6:	11 e0       	ldi	r17, 0x01	; 1
     da8:	6e 81       	ldd	r22, Y+6	; 0x06
     daa:	7f 81       	ldd	r23, Y+7	; 0x07
     dac:	88 85       	ldd	r24, Y+8	; 0x08
     dae:	99 85       	ldd	r25, Y+9	; 0x09
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	57 e4       	ldi	r21, 0x47	; 71
     db8:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__gtsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	0c f0       	brlt	.+2      	; 0xdc2 <main+0x9e>
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	11 23       	and	r17, r17
     dc4:	61 f1       	breq	.+88     	; 0xe1e <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc6:	6a 81       	ldd	r22, Y+2	; 0x02
     dc8:	7b 81       	ldd	r23, Y+3	; 0x03
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	51 e4       	ldi	r21, 0x41	; 65
     dd6:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	9b 87       	std	Y+11, r25	; 0x0b
     dec:	8a 87       	std	Y+10, r24	; 0x0a
     dee:	12 c0       	rjmp	.+36     	; 0xe14 <main+0xf0>
     df0:	80 e9       	ldi	r24, 0x90	; 144
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	9d 87       	std	Y+13, r25	; 0x0d
     df6:	8c 87       	std	Y+12, r24	; 0x0c
     df8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfa:	9d 85       	ldd	r25, Y+13	; 0x0d
     dfc:	8c 01       	movw	r16, r24
     dfe:	c8 01       	movw	r24, r16
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <main+0xdc>
     e04:	8c 01       	movw	r16, r24
     e06:	1d 87       	std	Y+13, r17	; 0x0d
     e08:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	9b 87       	std	Y+11, r25	; 0x0b
     e12:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	8a 85       	ldd	r24, Y+10	; 0x0a
     e16:	9b 85       	ldd	r25, Y+11	; 0x0b
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	51 f7       	brne	.-44     	; 0xdf0 <main+0xcc>
     e1c:	17 c0       	rjmp	.+46     	; 0xe4c <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1e:	6e 81       	ldd	r22, Y+6	; 0x06
     e20:	7f 81       	ldd	r23, Y+7	; 0x07
     e22:	88 85       	ldd	r24, Y+8	; 0x08
     e24:	99 85       	ldd	r25, Y+9	; 0x09
     e26:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9b 87       	std	Y+11, r25	; 0x0b
     e30:	8a 87       	std	Y+10, r24	; 0x0a
     e32:	8a 85       	ldd	r24, Y+10	; 0x0a
     e34:	9b 85       	ldd	r25, Y+11	; 0x0b
     e36:	9f 87       	std	Y+15, r25	; 0x0f
     e38:	8e 87       	std	Y+14, r24	; 0x0e
     e3a:	8e 85       	ldd	r24, Y+14	; 0x0e
     e3c:	9f 85       	ldd	r25, Y+15	; 0x0f
     e3e:	8c 01       	movw	r16, r24
     e40:	c8 01       	movw	r24, r16
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <main+0x11e>
     e46:	8c 01       	movw	r16, r24
     e48:	1f 87       	std	Y+15, r17	; 0x0f
     e4a:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(1000);
	SEND_TO_LCD(clr,CMD);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
	SEND_TO_LCD(start_1st_line,CMD);
     e54:	80 e8       	ldi	r24, 0x80	; 128
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
	while(1)
	{
		char ch = get_key_presed();
     e5c:	0e 94 cc 03 	call	0x798	; 0x798 <get_key_presed>
     e60:	89 83       	std	Y+1, r24	; 0x01
		write_to_LCD(ch);
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	0e 94 35 02 	call	0x46a	; 0x46a <write_to_LCD>
	}
     e68:	f9 cf       	rjmp	.-14     	; 0xe5c <main+0x138>

00000e6a <__fixunssfsi>:
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	7b 01       	movw	r14, r22
     e74:	8c 01       	movw	r16, r24
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	5f e4       	ldi	r21, 0x4F	; 79
     e7e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__gesf2>
     e82:	87 fd       	sbrc	r24, 7
     e84:	11 c0       	rjmp	.+34     	; 0xea8 <__fixunssfsi+0x3e>
     e86:	c8 01       	movw	r24, r16
     e88:	b7 01       	movw	r22, r14
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	5f e4       	ldi	r21, 0x4F	; 79
     e92:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__subsf3>
     e96:	0e 94 41 0b 	call	0x1682	; 0x1682 <__fixsfsi>
     e9a:	9b 01       	movw	r18, r22
     e9c:	ac 01       	movw	r20, r24
     e9e:	20 50       	subi	r18, 0x00	; 0
     ea0:	30 40       	sbci	r19, 0x00	; 0
     ea2:	40 40       	sbci	r20, 0x00	; 0
     ea4:	50 48       	sbci	r21, 0x80	; 128
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <__fixunssfsi+0x4a>
     ea8:	c8 01       	movw	r24, r16
     eaa:	b7 01       	movw	r22, r14
     eac:	0e 94 41 0b 	call	0x1682	; 0x1682 <__fixsfsi>
     eb0:	9b 01       	movw	r18, r22
     eb2:	ac 01       	movw	r20, r24
     eb4:	b9 01       	movw	r22, r18
     eb6:	ca 01       	movw	r24, r20
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	08 95       	ret

00000ec2 <_fpadd_parts>:
     ec2:	a0 e0       	ldi	r26, 0x00	; 0
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e6       	ldi	r30, 0x67	; 103
     ec8:	f7 e0       	ldi	r31, 0x07	; 7
     eca:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__prologue_saves__+0x8>
     ece:	fc 01       	movw	r30, r24
     ed0:	ea 01       	movw	r28, r20
     ed2:	80 81       	ld	r24, Z
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	08 f4       	brcc	.+2      	; 0xeda <_fpadd_parts+0x18>
     ed8:	38 c1       	rjmp	.+624    	; 0x114a <_fpadd_parts+0x288>
     eda:	db 01       	movw	r26, r22
     edc:	9c 91       	ld	r25, X
     ede:	92 30       	cpi	r25, 0x02	; 2
     ee0:	08 f4       	brcc	.+2      	; 0xee4 <_fpadd_parts+0x22>
     ee2:	30 c1       	rjmp	.+608    	; 0x1144 <_fpadd_parts+0x282>
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	59 f4       	brne	.+22     	; 0xefe <_fpadd_parts+0x3c>
     ee8:	94 30       	cpi	r25, 0x04	; 4
     eea:	09 f0       	breq	.+2      	; 0xeee <_fpadd_parts+0x2c>
     eec:	2e c1       	rjmp	.+604    	; 0x114a <_fpadd_parts+0x288>
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	11 96       	adiw	r26, 0x01	; 1
     ef2:	8c 91       	ld	r24, X
     ef4:	11 97       	sbiw	r26, 0x01	; 1
     ef6:	98 17       	cp	r25, r24
     ef8:	09 f0       	breq	.+2      	; 0xefc <_fpadd_parts+0x3a>
     efa:	21 c1       	rjmp	.+578    	; 0x113e <_fpadd_parts+0x27c>
     efc:	26 c1       	rjmp	.+588    	; 0x114a <_fpadd_parts+0x288>
     efe:	94 30       	cpi	r25, 0x04	; 4
     f00:	09 f4       	brne	.+2      	; 0xf04 <_fpadd_parts+0x42>
     f02:	20 c1       	rjmp	.+576    	; 0x1144 <_fpadd_parts+0x282>
     f04:	92 30       	cpi	r25, 0x02	; 2
     f06:	b1 f4       	brne	.+44     	; 0xf34 <_fpadd_parts+0x72>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	09 f0       	breq	.+2      	; 0xf0e <_fpadd_parts+0x4c>
     f0c:	1e c1       	rjmp	.+572    	; 0x114a <_fpadd_parts+0x288>
     f0e:	ca 01       	movw	r24, r20
     f10:	af 01       	movw	r20, r30
     f12:	28 e0       	ldi	r18, 0x08	; 8
     f14:	da 01       	movw	r26, r20
     f16:	0d 90       	ld	r0, X+
     f18:	ad 01       	movw	r20, r26
     f1a:	dc 01       	movw	r26, r24
     f1c:	0d 92       	st	X+, r0
     f1e:	cd 01       	movw	r24, r26
     f20:	21 50       	subi	r18, 0x01	; 1
     f22:	c1 f7       	brne	.-16     	; 0xf14 <_fpadd_parts+0x52>
     f24:	db 01       	movw	r26, r22
     f26:	11 96       	adiw	r26, 0x01	; 1
     f28:	8c 91       	ld	r24, X
     f2a:	11 97       	sbiw	r26, 0x01	; 1
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	89 23       	and	r24, r25
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	0a c1       	rjmp	.+532    	; 0x1148 <_fpadd_parts+0x286>
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	09 f4       	brne	.+2      	; 0xf3a <_fpadd_parts+0x78>
     f38:	05 c1       	rjmp	.+522    	; 0x1144 <_fpadd_parts+0x282>
     f3a:	c2 80       	ldd	r12, Z+2	; 0x02
     f3c:	d3 80       	ldd	r13, Z+3	; 0x03
     f3e:	db 01       	movw	r26, r22
     f40:	12 96       	adiw	r26, 0x02	; 2
     f42:	6d 90       	ld	r6, X+
     f44:	7c 90       	ld	r7, X
     f46:	13 97       	sbiw	r26, 0x03	; 3
     f48:	24 81       	ldd	r18, Z+4	; 0x04
     f4a:	35 81       	ldd	r19, Z+5	; 0x05
     f4c:	46 81       	ldd	r20, Z+6	; 0x06
     f4e:	57 81       	ldd	r21, Z+7	; 0x07
     f50:	14 96       	adiw	r26, 0x04	; 4
     f52:	ed 90       	ld	r14, X+
     f54:	fd 90       	ld	r15, X+
     f56:	0d 91       	ld	r16, X+
     f58:	1c 91       	ld	r17, X
     f5a:	17 97       	sbiw	r26, 0x07	; 7
     f5c:	c6 01       	movw	r24, r12
     f5e:	86 19       	sub	r24, r6
     f60:	97 09       	sbc	r25, r7
     f62:	5c 01       	movw	r10, r24
     f64:	97 ff       	sbrs	r25, 7
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <_fpadd_parts+0xae>
     f68:	aa 24       	eor	r10, r10
     f6a:	bb 24       	eor	r11, r11
     f6c:	a8 1a       	sub	r10, r24
     f6e:	b9 0a       	sbc	r11, r25
     f70:	b0 e2       	ldi	r27, 0x20	; 32
     f72:	ab 16       	cp	r10, r27
     f74:	b1 04       	cpc	r11, r1
     f76:	0c f0       	brlt	.+2      	; 0xf7a <_fpadd_parts+0xb8>
     f78:	61 c0       	rjmp	.+194    	; 0x103c <_fpadd_parts+0x17a>
     f7a:	18 16       	cp	r1, r24
     f7c:	19 06       	cpc	r1, r25
     f7e:	6c f5       	brge	.+90     	; 0xfda <_fpadd_parts+0x118>
     f80:	37 01       	movw	r6, r14
     f82:	48 01       	movw	r8, r16
     f84:	0a 2c       	mov	r0, r10
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <_fpadd_parts+0xce>
     f88:	96 94       	lsr	r9
     f8a:	87 94       	ror	r8
     f8c:	77 94       	ror	r7
     f8e:	67 94       	ror	r6
     f90:	0a 94       	dec	r0
     f92:	d2 f7       	brpl	.-12     	; 0xf88 <_fpadd_parts+0xc6>
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	0a 2c       	mov	r0, r10
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <_fpadd_parts+0xe6>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	aa 1f       	adc	r26, r26
     fa6:	bb 1f       	adc	r27, r27
     fa8:	0a 94       	dec	r0
     faa:	d2 f7       	brpl	.-12     	; 0xfa0 <_fpadd_parts+0xde>
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	a1 09       	sbc	r26, r1
     fb0:	b1 09       	sbc	r27, r1
     fb2:	8e 21       	and	r24, r14
     fb4:	9f 21       	and	r25, r15
     fb6:	a0 23       	and	r26, r16
     fb8:	b1 23       	and	r27, r17
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
     fbe:	87 01       	movw	r16, r14
     fc0:	e3 94       	inc	r14
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	a1 05       	cpc	r26, r1
     fc6:	b1 05       	cpc	r27, r1
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <_fpadd_parts+0x10e>
     fca:	ee 24       	eor	r14, r14
     fcc:	ff 24       	eor	r15, r15
     fce:	87 01       	movw	r16, r14
     fd0:	e6 28       	or	r14, r6
     fd2:	f7 28       	or	r15, r7
     fd4:	08 29       	or	r16, r8
     fd6:	19 29       	or	r17, r9
     fd8:	3c c0       	rjmp	.+120    	; 0x1052 <_fpadd_parts+0x190>
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	d1 f1       	breq	.+116    	; 0x1052 <_fpadd_parts+0x190>
     fde:	ca 0c       	add	r12, r10
     fe0:	db 1c       	adc	r13, r11
     fe2:	39 01       	movw	r6, r18
     fe4:	4a 01       	movw	r8, r20
     fe6:	0a 2c       	mov	r0, r10
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <_fpadd_parts+0x130>
     fea:	96 94       	lsr	r9
     fec:	87 94       	ror	r8
     fee:	77 94       	ror	r7
     ff0:	67 94       	ror	r6
     ff2:	0a 94       	dec	r0
     ff4:	d2 f7       	brpl	.-12     	; 0xfea <_fpadd_parts+0x128>
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	0a 2c       	mov	r0, r10
    1000:	04 c0       	rjmp	.+8      	; 0x100a <_fpadd_parts+0x148>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	aa 1f       	adc	r26, r26
    1008:	bb 1f       	adc	r27, r27
    100a:	0a 94       	dec	r0
    100c:	d2 f7       	brpl	.-12     	; 0x1002 <_fpadd_parts+0x140>
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	a1 09       	sbc	r26, r1
    1012:	b1 09       	sbc	r27, r1
    1014:	82 23       	and	r24, r18
    1016:	93 23       	and	r25, r19
    1018:	a4 23       	and	r26, r20
    101a:	b5 23       	and	r27, r21
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	a1 05       	cpc	r26, r1
    1028:	b1 05       	cpc	r27, r1
    102a:	19 f4       	brne	.+6      	; 0x1032 <_fpadd_parts+0x170>
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	a9 01       	movw	r20, r18
    1032:	26 29       	or	r18, r6
    1034:	37 29       	or	r19, r7
    1036:	48 29       	or	r20, r8
    1038:	59 29       	or	r21, r9
    103a:	0b c0       	rjmp	.+22     	; 0x1052 <_fpadd_parts+0x190>
    103c:	6c 14       	cp	r6, r12
    103e:	7d 04       	cpc	r7, r13
    1040:	24 f4       	brge	.+8      	; 0x104a <_fpadd_parts+0x188>
    1042:	ee 24       	eor	r14, r14
    1044:	ff 24       	eor	r15, r15
    1046:	87 01       	movw	r16, r14
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <_fpadd_parts+0x190>
    104a:	63 01       	movw	r12, r6
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	a9 01       	movw	r20, r18
    1052:	81 81       	ldd	r24, Z+1	; 0x01
    1054:	fb 01       	movw	r30, r22
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	89 17       	cp	r24, r25
    105a:	09 f4       	brne	.+2      	; 0x105e <_fpadd_parts+0x19c>
    105c:	45 c0       	rjmp	.+138    	; 0x10e8 <_fpadd_parts+0x226>
    105e:	88 23       	and	r24, r24
    1060:	49 f0       	breq	.+18     	; 0x1074 <_fpadd_parts+0x1b2>
    1062:	d8 01       	movw	r26, r16
    1064:	c7 01       	movw	r24, r14
    1066:	82 1b       	sub	r24, r18
    1068:	93 0b       	sbc	r25, r19
    106a:	a4 0b       	sbc	r26, r20
    106c:	b5 0b       	sbc	r27, r21
    106e:	9c 01       	movw	r18, r24
    1070:	ad 01       	movw	r20, r26
    1072:	04 c0       	rjmp	.+8      	; 0x107c <_fpadd_parts+0x1ba>
    1074:	2e 19       	sub	r18, r14
    1076:	3f 09       	sbc	r19, r15
    1078:	40 0b       	sbc	r20, r16
    107a:	51 0b       	sbc	r21, r17
    107c:	57 fd       	sbrc	r21, 7
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <_fpadd_parts+0x1c6>
    1080:	19 82       	std	Y+1, r1	; 0x01
    1082:	db 82       	std	Y+3, r13	; 0x03
    1084:	ca 82       	std	Y+2, r12	; 0x02
    1086:	0b c0       	rjmp	.+22     	; 0x109e <_fpadd_parts+0x1dc>
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	db 82       	std	Y+3, r13	; 0x03
    108e:	ca 82       	std	Y+2, r12	; 0x02
    1090:	50 95       	com	r21
    1092:	40 95       	com	r20
    1094:	30 95       	com	r19
    1096:	21 95       	neg	r18
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	4f 4f       	sbci	r20, 0xFF	; 255
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	2c 83       	std	Y+4, r18	; 0x04
    10a0:	3d 83       	std	Y+5, r19	; 0x05
    10a2:	4e 83       	std	Y+6, r20	; 0x06
    10a4:	5f 83       	std	Y+7, r21	; 0x07
    10a6:	0d c0       	rjmp	.+26     	; 0x10c2 <_fpadd_parts+0x200>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	aa 1f       	adc	r26, r26
    10ae:	bb 1f       	adc	r27, r27
    10b0:	8c 83       	std	Y+4, r24	; 0x04
    10b2:	9d 83       	std	Y+5, r25	; 0x05
    10b4:	ae 83       	std	Y+6, r26	; 0x06
    10b6:	bf 83       	std	Y+7, r27	; 0x07
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	9b 83       	std	Y+3, r25	; 0x03
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	ae 81       	ldd	r26, Y+6	; 0x06
    10c8:	bf 81       	ldd	r27, Y+7	; 0x07
    10ca:	9c 01       	movw	r18, r24
    10cc:	ad 01       	movw	r20, r26
    10ce:	21 50       	subi	r18, 0x01	; 1
    10d0:	30 40       	sbci	r19, 0x00	; 0
    10d2:	40 40       	sbci	r20, 0x00	; 0
    10d4:	50 40       	sbci	r21, 0x00	; 0
    10d6:	2f 3f       	cpi	r18, 0xFF	; 255
    10d8:	ef ef       	ldi	r30, 0xFF	; 255
    10da:	3e 07       	cpc	r19, r30
    10dc:	ef ef       	ldi	r30, 0xFF	; 255
    10de:	4e 07       	cpc	r20, r30
    10e0:	ef e3       	ldi	r30, 0x3F	; 63
    10e2:	5e 07       	cpc	r21, r30
    10e4:	08 f3       	brcs	.-62     	; 0x10a8 <_fpadd_parts+0x1e6>
    10e6:	0b c0       	rjmp	.+22     	; 0x10fe <_fpadd_parts+0x23c>
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	db 82       	std	Y+3, r13	; 0x03
    10ec:	ca 82       	std	Y+2, r12	; 0x02
    10ee:	2e 0d       	add	r18, r14
    10f0:	3f 1d       	adc	r19, r15
    10f2:	40 1f       	adc	r20, r16
    10f4:	51 1f       	adc	r21, r17
    10f6:	2c 83       	std	Y+4, r18	; 0x04
    10f8:	3d 83       	std	Y+5, r19	; 0x05
    10fa:	4e 83       	std	Y+6, r20	; 0x06
    10fc:	5f 83       	std	Y+7, r21	; 0x07
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	88 83       	st	Y, r24
    1102:	2c 81       	ldd	r18, Y+4	; 0x04
    1104:	3d 81       	ldd	r19, Y+5	; 0x05
    1106:	4e 81       	ldd	r20, Y+6	; 0x06
    1108:	5f 81       	ldd	r21, Y+7	; 0x07
    110a:	57 ff       	sbrs	r21, 7
    110c:	1d c0       	rjmp	.+58     	; 0x1148 <_fpadd_parts+0x286>
    110e:	da 01       	movw	r26, r20
    1110:	c9 01       	movw	r24, r18
    1112:	81 70       	andi	r24, 0x01	; 1
    1114:	90 70       	andi	r25, 0x00	; 0
    1116:	a0 70       	andi	r26, 0x00	; 0
    1118:	b0 70       	andi	r27, 0x00	; 0
    111a:	56 95       	lsr	r21
    111c:	47 95       	ror	r20
    111e:	37 95       	ror	r19
    1120:	27 95       	ror	r18
    1122:	82 2b       	or	r24, r18
    1124:	93 2b       	or	r25, r19
    1126:	a4 2b       	or	r26, r20
    1128:	b5 2b       	or	r27, r21
    112a:	8c 83       	std	Y+4, r24	; 0x04
    112c:	9d 83       	std	Y+5, r25	; 0x05
    112e:	ae 83       	std	Y+6, r26	; 0x06
    1130:	bf 83       	std	Y+7, r27	; 0x07
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	9b 83       	std	Y+3, r25	; 0x03
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	05 c0       	rjmp	.+10     	; 0x1148 <_fpadd_parts+0x286>
    113e:	e6 e1       	ldi	r30, 0x16	; 22
    1140:	f1 e0       	ldi	r31, 0x01	; 1
    1142:	03 c0       	rjmp	.+6      	; 0x114a <_fpadd_parts+0x288>
    1144:	fb 01       	movw	r30, r22
    1146:	01 c0       	rjmp	.+2      	; 0x114a <_fpadd_parts+0x288>
    1148:	fe 01       	movw	r30, r28
    114a:	cf 01       	movw	r24, r30
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	ee e0       	ldi	r30, 0x0E	; 14
    1152:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__epilogue_restores__+0x8>

00001156 <__addsf3>:
    1156:	a0 e2       	ldi	r26, 0x20	; 32
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e1 eb       	ldi	r30, 0xB1	; 177
    115c:	f8 e0       	ldi	r31, 0x08	; 8
    115e:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__prologue_saves__+0x18>
    1162:	69 83       	std	Y+1, r22	; 0x01
    1164:	7a 83       	std	Y+2, r23	; 0x02
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	9c 83       	std	Y+4, r25	; 0x04
    116a:	2d 83       	std	Y+5, r18	; 0x05
    116c:	3e 83       	std	Y+6, r19	; 0x06
    116e:	4f 83       	std	Y+7, r20	; 0x07
    1170:	58 87       	std	Y+8, r21	; 0x08
    1172:	89 e0       	ldi	r24, 0x09	; 9
    1174:	e8 2e       	mov	r14, r24
    1176:	f1 2c       	mov	r15, r1
    1178:	ec 0e       	add	r14, r28
    117a:	fd 1e       	adc	r15, r29
    117c:	ce 01       	movw	r24, r28
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	b7 01       	movw	r22, r14
    1182:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    1186:	8e 01       	movw	r16, r28
    1188:	0f 5e       	subi	r16, 0xEF	; 239
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	ce 01       	movw	r24, r28
    118e:	05 96       	adiw	r24, 0x05	; 5
    1190:	b8 01       	movw	r22, r16
    1192:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    1196:	c7 01       	movw	r24, r14
    1198:	b8 01       	movw	r22, r16
    119a:	ae 01       	movw	r20, r28
    119c:	47 5e       	subi	r20, 0xE7	; 231
    119e:	5f 4f       	sbci	r21, 0xFF	; 255
    11a0:	0e 94 61 07 	call	0xec2	; 0xec2 <_fpadd_parts>
    11a4:	0e 94 93 0b 	call	0x1726	; 0x1726 <__pack_f>
    11a8:	a0 96       	adiw	r28, 0x20	; 32
    11aa:	e6 e0       	ldi	r30, 0x06	; 6
    11ac:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__epilogue_restores__+0x18>

000011b0 <__subsf3>:
    11b0:	a0 e2       	ldi	r26, 0x20	; 32
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ee ed       	ldi	r30, 0xDE	; 222
    11b6:	f8 e0       	ldi	r31, 0x08	; 8
    11b8:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__prologue_saves__+0x18>
    11bc:	69 83       	std	Y+1, r22	; 0x01
    11be:	7a 83       	std	Y+2, r23	; 0x02
    11c0:	8b 83       	std	Y+3, r24	; 0x03
    11c2:	9c 83       	std	Y+4, r25	; 0x04
    11c4:	2d 83       	std	Y+5, r18	; 0x05
    11c6:	3e 83       	std	Y+6, r19	; 0x06
    11c8:	4f 83       	std	Y+7, r20	; 0x07
    11ca:	58 87       	std	Y+8, r21	; 0x08
    11cc:	8e 01       	movw	r16, r28
    11ce:	07 5f       	subi	r16, 0xF7	; 247
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	b8 01       	movw	r22, r16
    11d8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    11dc:	91 e1       	ldi	r25, 0x11	; 17
    11de:	e9 2e       	mov	r14, r25
    11e0:	f1 2c       	mov	r15, r1
    11e2:	ec 0e       	add	r14, r28
    11e4:	fd 1e       	adc	r15, r29
    11e6:	ce 01       	movw	r24, r28
    11e8:	05 96       	adiw	r24, 0x05	; 5
    11ea:	b7 01       	movw	r22, r14
    11ec:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    11f0:	8a 89       	ldd	r24, Y+18	; 0x12
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	89 27       	eor	r24, r25
    11f6:	8a 8b       	std	Y+18, r24	; 0x12
    11f8:	c8 01       	movw	r24, r16
    11fa:	b7 01       	movw	r22, r14
    11fc:	ae 01       	movw	r20, r28
    11fe:	47 5e       	subi	r20, 0xE7	; 231
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
    1202:	0e 94 61 07 	call	0xec2	; 0xec2 <_fpadd_parts>
    1206:	0e 94 93 0b 	call	0x1726	; 0x1726 <__pack_f>
    120a:	a0 96       	adiw	r28, 0x20	; 32
    120c:	e6 e0       	ldi	r30, 0x06	; 6
    120e:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__epilogue_restores__+0x18>

00001212 <__mulsf3>:
    1212:	a0 e2       	ldi	r26, 0x20	; 32
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ef e0       	ldi	r30, 0x0F	; 15
    1218:	f9 e0       	ldi	r31, 0x09	; 9
    121a:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__prologue_saves__>
    121e:	69 83       	std	Y+1, r22	; 0x01
    1220:	7a 83       	std	Y+2, r23	; 0x02
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	9c 83       	std	Y+4, r25	; 0x04
    1226:	2d 83       	std	Y+5, r18	; 0x05
    1228:	3e 83       	std	Y+6, r19	; 0x06
    122a:	4f 83       	std	Y+7, r20	; 0x07
    122c:	58 87       	std	Y+8, r21	; 0x08
    122e:	ce 01       	movw	r24, r28
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	be 01       	movw	r22, r28
    1234:	67 5f       	subi	r22, 0xF7	; 247
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    123c:	ce 01       	movw	r24, r28
    123e:	05 96       	adiw	r24, 0x05	; 5
    1240:	be 01       	movw	r22, r28
    1242:	6f 5e       	subi	r22, 0xEF	; 239
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    124a:	99 85       	ldd	r25, Y+9	; 0x09
    124c:	92 30       	cpi	r25, 0x02	; 2
    124e:	78 f0       	brcs	.+30     	; 0x126e <__mulsf3+0x5c>
    1250:	89 89       	ldd	r24, Y+17	; 0x11
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	c0 f0       	brcs	.+48     	; 0x1286 <__mulsf3+0x74>
    1256:	94 30       	cpi	r25, 0x04	; 4
    1258:	19 f4       	brne	.+6      	; 0x1260 <__mulsf3+0x4e>
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	41 f4       	brne	.+16     	; 0x126e <__mulsf3+0x5c>
    125e:	cb c0       	rjmp	.+406    	; 0x13f6 <__mulsf3+0x1e4>
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	19 f4       	brne	.+6      	; 0x126a <__mulsf3+0x58>
    1264:	92 30       	cpi	r25, 0x02	; 2
    1266:	79 f4       	brne	.+30     	; 0x1286 <__mulsf3+0x74>
    1268:	c6 c0       	rjmp	.+396    	; 0x13f6 <__mulsf3+0x1e4>
    126a:	92 30       	cpi	r25, 0x02	; 2
    126c:	51 f4       	brne	.+20     	; 0x1282 <__mulsf3+0x70>
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	2a 85       	ldd	r18, Y+10	; 0x0a
    1272:	9a 89       	ldd	r25, Y+18	; 0x12
    1274:	29 17       	cp	r18, r25
    1276:	09 f4       	brne	.+2      	; 0x127a <__mulsf3+0x68>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	8a 87       	std	Y+10, r24	; 0x0a
    127c:	ce 01       	movw	r24, r28
    127e:	09 96       	adiw	r24, 0x09	; 9
    1280:	bc c0       	rjmp	.+376    	; 0x13fa <__mulsf3+0x1e8>
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	51 f4       	brne	.+20     	; 0x129a <__mulsf3+0x88>
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	2a 85       	ldd	r18, Y+10	; 0x0a
    128a:	9a 89       	ldd	r25, Y+18	; 0x12
    128c:	29 17       	cp	r18, r25
    128e:	09 f4       	brne	.+2      	; 0x1292 <__mulsf3+0x80>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	8a 8b       	std	Y+18, r24	; 0x12
    1294:	ce 01       	movw	r24, r28
    1296:	41 96       	adiw	r24, 0x11	; 17
    1298:	b0 c0       	rjmp	.+352    	; 0x13fa <__mulsf3+0x1e8>
    129a:	6d 84       	ldd	r6, Y+13	; 0x0d
    129c:	7e 84       	ldd	r7, Y+14	; 0x0e
    129e:	8f 84       	ldd	r8, Y+15	; 0x0f
    12a0:	98 88       	ldd	r9, Y+16	; 0x10
    12a2:	ed 88       	ldd	r14, Y+21	; 0x15
    12a4:	fe 88       	ldd	r15, Y+22	; 0x16
    12a6:	0f 89       	ldd	r16, Y+23	; 0x17
    12a8:	18 8d       	ldd	r17, Y+24	; 0x18
    12aa:	e0 e2       	ldi	r30, 0x20	; 32
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	dc 01       	movw	r26, r24
    12b4:	aa 24       	eor	r10, r10
    12b6:	bb 24       	eor	r11, r11
    12b8:	65 01       	movw	r12, r10
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	b3 01       	movw	r22, r6
    12c2:	61 70       	andi	r22, 0x01	; 1
    12c4:	70 70       	andi	r23, 0x00	; 0
    12c6:	61 15       	cp	r22, r1
    12c8:	71 05       	cpc	r23, r1
    12ca:	d1 f0       	breq	.+52     	; 0x1300 <__mulsf3+0xee>
    12cc:	2e 0d       	add	r18, r14
    12ce:	3f 1d       	adc	r19, r15
    12d0:	40 1f       	adc	r20, r16
    12d2:	51 1f       	adc	r21, r17
    12d4:	15 01       	movw	r2, r10
    12d6:	26 01       	movw	r4, r12
    12d8:	28 0e       	add	r2, r24
    12da:	39 1e       	adc	r3, r25
    12dc:	4a 1e       	adc	r4, r26
    12de:	5b 1e       	adc	r5, r27
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a0 e0       	ldi	r26, 0x00	; 0
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	2e 15       	cp	r18, r14
    12ea:	3f 05       	cpc	r19, r15
    12ec:	40 07       	cpc	r20, r16
    12ee:	51 07       	cpc	r21, r17
    12f0:	18 f0       	brcs	.+6      	; 0x12f8 <__mulsf3+0xe6>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	dc 01       	movw	r26, r24
    12f8:	82 0d       	add	r24, r2
    12fa:	93 1d       	adc	r25, r3
    12fc:	a4 1d       	adc	r26, r4
    12fe:	b5 1d       	adc	r27, r5
    1300:	aa 0c       	add	r10, r10
    1302:	bb 1c       	adc	r11, r11
    1304:	cc 1c       	adc	r12, r12
    1306:	dd 1c       	adc	r13, r13
    1308:	17 ff       	sbrs	r17, 7
    130a:	09 c0       	rjmp	.+18     	; 0x131e <__mulsf3+0x10c>
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	26 2e       	mov	r2, r22
    1310:	31 2c       	mov	r3, r1
    1312:	41 2c       	mov	r4, r1
    1314:	51 2c       	mov	r5, r1
    1316:	a2 28       	or	r10, r2
    1318:	b3 28       	or	r11, r3
    131a:	c4 28       	or	r12, r4
    131c:	d5 28       	or	r13, r5
    131e:	31 97       	sbiw	r30, 0x01	; 1
    1320:	49 f0       	breq	.+18     	; 0x1334 <__mulsf3+0x122>
    1322:	ee 0c       	add	r14, r14
    1324:	ff 1c       	adc	r15, r15
    1326:	00 1f       	adc	r16, r16
    1328:	11 1f       	adc	r17, r17
    132a:	96 94       	lsr	r9
    132c:	87 94       	ror	r8
    132e:	77 94       	ror	r7
    1330:	67 94       	ror	r6
    1332:	c6 cf       	rjmp	.-116    	; 0x12c0 <__mulsf3+0xae>
    1334:	6b 89       	ldd	r22, Y+19	; 0x13
    1336:	7c 89       	ldd	r23, Y+20	; 0x14
    1338:	eb 85       	ldd	r30, Y+11	; 0x0b
    133a:	fc 85       	ldd	r31, Y+12	; 0x0c
    133c:	6e 0f       	add	r22, r30
    133e:	7f 1f       	adc	r23, r31
    1340:	6e 5f       	subi	r22, 0xFE	; 254
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	7c 8f       	std	Y+28, r23	; 0x1c
    1346:	6b 8f       	std	Y+27, r22	; 0x1b
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	ea 85       	ldd	r30, Y+10	; 0x0a
    134c:	7a 89       	ldd	r23, Y+18	; 0x12
    134e:	e7 17       	cp	r30, r23
    1350:	09 f4       	brne	.+2      	; 0x1354 <__mulsf3+0x142>
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	6a 8f       	std	Y+26, r22	; 0x1a
    1356:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1358:	7c 8d       	ldd	r23, Y+28	; 0x1c
    135a:	10 c0       	rjmp	.+32     	; 0x137c <__mulsf3+0x16a>
    135c:	fc 01       	movw	r30, r24
    135e:	e1 70       	andi	r30, 0x01	; 1
    1360:	f0 70       	andi	r31, 0x00	; 0
    1362:	30 97       	sbiw	r30, 0x00	; 0
    1364:	29 f0       	breq	.+10     	; 0x1370 <__mulsf3+0x15e>
    1366:	56 95       	lsr	r21
    1368:	47 95       	ror	r20
    136a:	37 95       	ror	r19
    136c:	27 95       	ror	r18
    136e:	50 68       	ori	r21, 0x80	; 128
    1370:	b6 95       	lsr	r27
    1372:	a7 95       	ror	r26
    1374:	97 95       	ror	r25
    1376:	87 95       	ror	r24
    1378:	6f 5f       	subi	r22, 0xFF	; 255
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	b7 fd       	sbrc	r27, 7
    137e:	ee cf       	rjmp	.-36     	; 0x135c <__mulsf3+0x14a>
    1380:	0c c0       	rjmp	.+24     	; 0x139a <__mulsf3+0x188>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	aa 1f       	adc	r26, r26
    1388:	bb 1f       	adc	r27, r27
    138a:	57 fd       	sbrc	r21, 7
    138c:	81 60       	ori	r24, 0x01	; 1
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	44 1f       	adc	r20, r20
    1394:	55 1f       	adc	r21, r21
    1396:	61 50       	subi	r22, 0x01	; 1
    1398:	70 40       	sbci	r23, 0x00	; 0
    139a:	80 30       	cpi	r24, 0x00	; 0
    139c:	e0 e0       	ldi	r30, 0x00	; 0
    139e:	9e 07       	cpc	r25, r30
    13a0:	e0 e0       	ldi	r30, 0x00	; 0
    13a2:	ae 07       	cpc	r26, r30
    13a4:	e0 e4       	ldi	r30, 0x40	; 64
    13a6:	be 07       	cpc	r27, r30
    13a8:	60 f3       	brcs	.-40     	; 0x1382 <__mulsf3+0x170>
    13aa:	6b 8f       	std	Y+27, r22	; 0x1b
    13ac:	7c 8f       	std	Y+28, r23	; 0x1c
    13ae:	6f e7       	ldi	r22, 0x7F	; 127
    13b0:	e6 2e       	mov	r14, r22
    13b2:	f1 2c       	mov	r15, r1
    13b4:	01 2d       	mov	r16, r1
    13b6:	11 2d       	mov	r17, r1
    13b8:	e8 22       	and	r14, r24
    13ba:	f9 22       	and	r15, r25
    13bc:	0a 23       	and	r16, r26
    13be:	1b 23       	and	r17, r27
    13c0:	60 e4       	ldi	r22, 0x40	; 64
    13c2:	e6 16       	cp	r14, r22
    13c4:	f1 04       	cpc	r15, r1
    13c6:	01 05       	cpc	r16, r1
    13c8:	11 05       	cpc	r17, r1
    13ca:	61 f4       	brne	.+24     	; 0x13e4 <__mulsf3+0x1d2>
    13cc:	87 fd       	sbrc	r24, 7
    13ce:	0a c0       	rjmp	.+20     	; 0x13e4 <__mulsf3+0x1d2>
    13d0:	21 15       	cp	r18, r1
    13d2:	31 05       	cpc	r19, r1
    13d4:	41 05       	cpc	r20, r1
    13d6:	51 05       	cpc	r21, r1
    13d8:	29 f0       	breq	.+10     	; 0x13e4 <__mulsf3+0x1d2>
    13da:	80 5c       	subi	r24, 0xC0	; 192
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255
    13de:	af 4f       	sbci	r26, 0xFF	; 255
    13e0:	bf 4f       	sbci	r27, 0xFF	; 255
    13e2:	80 78       	andi	r24, 0x80	; 128
    13e4:	8d 8f       	std	Y+29, r24	; 0x1d
    13e6:	9e 8f       	std	Y+30, r25	; 0x1e
    13e8:	af 8f       	std	Y+31, r26	; 0x1f
    13ea:	b8 a3       	std	Y+32, r27	; 0x20
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	89 8f       	std	Y+25, r24	; 0x19
    13f0:	ce 01       	movw	r24, r28
    13f2:	49 96       	adiw	r24, 0x19	; 25
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <__mulsf3+0x1e8>
    13f6:	86 e1       	ldi	r24, 0x16	; 22
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	0e 94 93 0b 	call	0x1726	; 0x1726 <__pack_f>
    13fe:	a0 96       	adiw	r28, 0x20	; 32
    1400:	e2 e1       	ldi	r30, 0x12	; 18
    1402:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__epilogue_restores__>

00001406 <__divsf3>:
    1406:	a8 e1       	ldi	r26, 0x18	; 24
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e9 e0       	ldi	r30, 0x09	; 9
    140c:	fa e0       	ldi	r31, 0x0A	; 10
    140e:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__prologue_saves__+0x10>
    1412:	69 83       	std	Y+1, r22	; 0x01
    1414:	7a 83       	std	Y+2, r23	; 0x02
    1416:	8b 83       	std	Y+3, r24	; 0x03
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	2d 83       	std	Y+5, r18	; 0x05
    141c:	3e 83       	std	Y+6, r19	; 0x06
    141e:	4f 83       	std	Y+7, r20	; 0x07
    1420:	58 87       	std	Y+8, r21	; 0x08
    1422:	8e 01       	movw	r16, r28
    1424:	07 5f       	subi	r16, 0xF7	; 247
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
    1428:	ce 01       	movw	r24, r28
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	b8 01       	movw	r22, r16
    142e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    1432:	81 e1       	ldi	r24, 0x11	; 17
    1434:	e8 2e       	mov	r14, r24
    1436:	f1 2c       	mov	r15, r1
    1438:	ec 0e       	add	r14, r28
    143a:	fd 1e       	adc	r15, r29
    143c:	ce 01       	movw	r24, r28
    143e:	05 96       	adiw	r24, 0x05	; 5
    1440:	b7 01       	movw	r22, r14
    1442:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    1446:	99 85       	ldd	r25, Y+9	; 0x09
    1448:	92 30       	cpi	r25, 0x02	; 2
    144a:	08 f4       	brcc	.+2      	; 0x144e <__divsf3+0x48>
    144c:	83 c0       	rjmp	.+262    	; 0x1554 <__divsf3+0x14e>
    144e:	89 89       	ldd	r24, Y+17	; 0x11
    1450:	82 30       	cpi	r24, 0x02	; 2
    1452:	08 f4       	brcc	.+2      	; 0x1456 <__divsf3+0x50>
    1454:	7b c0       	rjmp	.+246    	; 0x154c <__divsf3+0x146>
    1456:	2a 85       	ldd	r18, Y+10	; 0x0a
    1458:	3a 89       	ldd	r19, Y+18	; 0x12
    145a:	23 27       	eor	r18, r19
    145c:	2a 87       	std	Y+10, r18	; 0x0a
    145e:	94 30       	cpi	r25, 0x04	; 4
    1460:	11 f0       	breq	.+4      	; 0x1466 <__divsf3+0x60>
    1462:	92 30       	cpi	r25, 0x02	; 2
    1464:	21 f4       	brne	.+8      	; 0x146e <__divsf3+0x68>
    1466:	98 17       	cp	r25, r24
    1468:	09 f0       	breq	.+2      	; 0x146c <__divsf3+0x66>
    146a:	6c c0       	rjmp	.+216    	; 0x1544 <__divsf3+0x13e>
    146c:	71 c0       	rjmp	.+226    	; 0x1550 <__divsf3+0x14a>
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	39 f4       	brne	.+14     	; 0x1480 <__divsf3+0x7a>
    1472:	1d 86       	std	Y+13, r1	; 0x0d
    1474:	1e 86       	std	Y+14, r1	; 0x0e
    1476:	1f 86       	std	Y+15, r1	; 0x0f
    1478:	18 8a       	std	Y+16, r1	; 0x10
    147a:	1c 86       	std	Y+12, r1	; 0x0c
    147c:	1b 86       	std	Y+11, r1	; 0x0b
    147e:	6a c0       	rjmp	.+212    	; 0x1554 <__divsf3+0x14e>
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	19 f4       	brne	.+6      	; 0x148a <__divsf3+0x84>
    1484:	84 e0       	ldi	r24, 0x04	; 4
    1486:	89 87       	std	Y+9, r24	; 0x09
    1488:	65 c0       	rjmp	.+202    	; 0x1554 <__divsf3+0x14e>
    148a:	8b 85       	ldd	r24, Y+11	; 0x0b
    148c:	9c 85       	ldd	r25, Y+12	; 0x0c
    148e:	2b 89       	ldd	r18, Y+19	; 0x13
    1490:	3c 89       	ldd	r19, Y+20	; 0x14
    1492:	82 1b       	sub	r24, r18
    1494:	93 0b       	sbc	r25, r19
    1496:	9c 87       	std	Y+12, r25	; 0x0c
    1498:	8b 87       	std	Y+11, r24	; 0x0b
    149a:	2d 85       	ldd	r18, Y+13	; 0x0d
    149c:	3e 85       	ldd	r19, Y+14	; 0x0e
    149e:	4f 85       	ldd	r20, Y+15	; 0x0f
    14a0:	58 89       	ldd	r21, Y+16	; 0x10
    14a2:	ed 88       	ldd	r14, Y+21	; 0x15
    14a4:	fe 88       	ldd	r15, Y+22	; 0x16
    14a6:	0f 89       	ldd	r16, Y+23	; 0x17
    14a8:	18 8d       	ldd	r17, Y+24	; 0x18
    14aa:	2e 15       	cp	r18, r14
    14ac:	3f 05       	cpc	r19, r15
    14ae:	40 07       	cpc	r20, r16
    14b0:	51 07       	cpc	r21, r17
    14b2:	38 f4       	brcc	.+14     	; 0x14c2 <__divsf3+0xbc>
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	44 1f       	adc	r20, r20
    14ba:	55 1f       	adc	r21, r21
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	9c 87       	std	Y+12, r25	; 0x0c
    14c0:	8b 87       	std	Y+11, r24	; 0x0b
    14c2:	6f e1       	ldi	r22, 0x1F	; 31
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	a1 2c       	mov	r10, r1
    14c8:	b1 2c       	mov	r11, r1
    14ca:	c1 2c       	mov	r12, r1
    14cc:	a0 e4       	ldi	r26, 0x40	; 64
    14ce:	da 2e       	mov	r13, r26
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	dc 01       	movw	r26, r24
    14d6:	2e 15       	cp	r18, r14
    14d8:	3f 05       	cpc	r19, r15
    14da:	40 07       	cpc	r20, r16
    14dc:	51 07       	cpc	r21, r17
    14de:	40 f0       	brcs	.+16     	; 0x14f0 <__divsf3+0xea>
    14e0:	8a 29       	or	r24, r10
    14e2:	9b 29       	or	r25, r11
    14e4:	ac 29       	or	r26, r12
    14e6:	bd 29       	or	r27, r13
    14e8:	2e 19       	sub	r18, r14
    14ea:	3f 09       	sbc	r19, r15
    14ec:	40 0b       	sbc	r20, r16
    14ee:	51 0b       	sbc	r21, r17
    14f0:	d6 94       	lsr	r13
    14f2:	c7 94       	ror	r12
    14f4:	b7 94       	ror	r11
    14f6:	a7 94       	ror	r10
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	44 1f       	adc	r20, r20
    14fe:	55 1f       	adc	r21, r21
    1500:	61 50       	subi	r22, 0x01	; 1
    1502:	70 40       	sbci	r23, 0x00	; 0
    1504:	41 f7       	brne	.-48     	; 0x14d6 <__divsf3+0xd0>
    1506:	6f e7       	ldi	r22, 0x7F	; 127
    1508:	e6 2e       	mov	r14, r22
    150a:	f1 2c       	mov	r15, r1
    150c:	01 2d       	mov	r16, r1
    150e:	11 2d       	mov	r17, r1
    1510:	e8 22       	and	r14, r24
    1512:	f9 22       	and	r15, r25
    1514:	0a 23       	and	r16, r26
    1516:	1b 23       	and	r17, r27
    1518:	60 e4       	ldi	r22, 0x40	; 64
    151a:	e6 16       	cp	r14, r22
    151c:	f1 04       	cpc	r15, r1
    151e:	01 05       	cpc	r16, r1
    1520:	11 05       	cpc	r17, r1
    1522:	61 f4       	brne	.+24     	; 0x153c <__divsf3+0x136>
    1524:	87 fd       	sbrc	r24, 7
    1526:	0a c0       	rjmp	.+20     	; 0x153c <__divsf3+0x136>
    1528:	21 15       	cp	r18, r1
    152a:	31 05       	cpc	r19, r1
    152c:	41 05       	cpc	r20, r1
    152e:	51 05       	cpc	r21, r1
    1530:	29 f0       	breq	.+10     	; 0x153c <__divsf3+0x136>
    1532:	80 5c       	subi	r24, 0xC0	; 192
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	af 4f       	sbci	r26, 0xFF	; 255
    1538:	bf 4f       	sbci	r27, 0xFF	; 255
    153a:	80 78       	andi	r24, 0x80	; 128
    153c:	8d 87       	std	Y+13, r24	; 0x0d
    153e:	9e 87       	std	Y+14, r25	; 0x0e
    1540:	af 87       	std	Y+15, r26	; 0x0f
    1542:	b8 8b       	std	Y+16, r27	; 0x10
    1544:	8e 01       	movw	r16, r28
    1546:	07 5f       	subi	r16, 0xF7	; 247
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <__divsf3+0x14e>
    154c:	87 01       	movw	r16, r14
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <__divsf3+0x14e>
    1550:	06 e1       	ldi	r16, 0x16	; 22
    1552:	11 e0       	ldi	r17, 0x01	; 1
    1554:	c8 01       	movw	r24, r16
    1556:	0e 94 93 0b 	call	0x1726	; 0x1726 <__pack_f>
    155a:	68 96       	adiw	r28, 0x18	; 24
    155c:	ea e0       	ldi	r30, 0x0A	; 10
    155e:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__epilogue_restores__+0x10>

00001562 <__gtsf2>:
    1562:	a8 e1       	ldi	r26, 0x18	; 24
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e7 eb       	ldi	r30, 0xB7	; 183
    1568:	fa e0       	ldi	r31, 0x0A	; 10
    156a:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__prologue_saves__+0x18>
    156e:	69 83       	std	Y+1, r22	; 0x01
    1570:	7a 83       	std	Y+2, r23	; 0x02
    1572:	8b 83       	std	Y+3, r24	; 0x03
    1574:	9c 83       	std	Y+4, r25	; 0x04
    1576:	2d 83       	std	Y+5, r18	; 0x05
    1578:	3e 83       	std	Y+6, r19	; 0x06
    157a:	4f 83       	std	Y+7, r20	; 0x07
    157c:	58 87       	std	Y+8, r21	; 0x08
    157e:	8e 01       	movw	r16, r28
    1580:	07 5f       	subi	r16, 0xF7	; 247
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	ce 01       	movw	r24, r28
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	b8 01       	movw	r22, r16
    158a:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    158e:	81 e1       	ldi	r24, 0x11	; 17
    1590:	e8 2e       	mov	r14, r24
    1592:	f1 2c       	mov	r15, r1
    1594:	ec 0e       	add	r14, r28
    1596:	fd 1e       	adc	r15, r29
    1598:	ce 01       	movw	r24, r28
    159a:	05 96       	adiw	r24, 0x05	; 5
    159c:	b7 01       	movw	r22, r14
    159e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    15a2:	89 85       	ldd	r24, Y+9	; 0x09
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	40 f0       	brcs	.+16     	; 0x15b8 <__gtsf2+0x56>
    15a8:	89 89       	ldd	r24, Y+17	; 0x11
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	28 f0       	brcs	.+10     	; 0x15b8 <__gtsf2+0x56>
    15ae:	c8 01       	movw	r24, r16
    15b0:	b7 01       	movw	r22, r14
    15b2:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__fpcmp_parts_f>
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <__gtsf2+0x58>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	68 96       	adiw	r28, 0x18	; 24
    15bc:	e6 e0       	ldi	r30, 0x06	; 6
    15be:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__epilogue_restores__+0x18>

000015c2 <__gesf2>:
    15c2:	a8 e1       	ldi	r26, 0x18	; 24
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 ee       	ldi	r30, 0xE7	; 231
    15c8:	fa e0       	ldi	r31, 0x0A	; 10
    15ca:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__prologue_saves__+0x18>
    15ce:	69 83       	std	Y+1, r22	; 0x01
    15d0:	7a 83       	std	Y+2, r23	; 0x02
    15d2:	8b 83       	std	Y+3, r24	; 0x03
    15d4:	9c 83       	std	Y+4, r25	; 0x04
    15d6:	2d 83       	std	Y+5, r18	; 0x05
    15d8:	3e 83       	std	Y+6, r19	; 0x06
    15da:	4f 83       	std	Y+7, r20	; 0x07
    15dc:	58 87       	std	Y+8, r21	; 0x08
    15de:	8e 01       	movw	r16, r28
    15e0:	07 5f       	subi	r16, 0xF7	; 247
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	ce 01       	movw	r24, r28
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	b8 01       	movw	r22, r16
    15ea:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    15ee:	81 e1       	ldi	r24, 0x11	; 17
    15f0:	e8 2e       	mov	r14, r24
    15f2:	f1 2c       	mov	r15, r1
    15f4:	ec 0e       	add	r14, r28
    15f6:	fd 1e       	adc	r15, r29
    15f8:	ce 01       	movw	r24, r28
    15fa:	05 96       	adiw	r24, 0x05	; 5
    15fc:	b7 01       	movw	r22, r14
    15fe:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    1602:	89 85       	ldd	r24, Y+9	; 0x09
    1604:	82 30       	cpi	r24, 0x02	; 2
    1606:	40 f0       	brcs	.+16     	; 0x1618 <__gesf2+0x56>
    1608:	89 89       	ldd	r24, Y+17	; 0x11
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	28 f0       	brcs	.+10     	; 0x1618 <__gesf2+0x56>
    160e:	c8 01       	movw	r24, r16
    1610:	b7 01       	movw	r22, r14
    1612:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__fpcmp_parts_f>
    1616:	01 c0       	rjmp	.+2      	; 0x161a <__gesf2+0x58>
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	68 96       	adiw	r28, 0x18	; 24
    161c:	e6 e0       	ldi	r30, 0x06	; 6
    161e:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__epilogue_restores__+0x18>

00001622 <__ltsf2>:
    1622:	a8 e1       	ldi	r26, 0x18	; 24
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e1       	ldi	r30, 0x17	; 23
    1628:	fb e0       	ldi	r31, 0x0B	; 11
    162a:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__prologue_saves__+0x18>
    162e:	69 83       	std	Y+1, r22	; 0x01
    1630:	7a 83       	std	Y+2, r23	; 0x02
    1632:	8b 83       	std	Y+3, r24	; 0x03
    1634:	9c 83       	std	Y+4, r25	; 0x04
    1636:	2d 83       	std	Y+5, r18	; 0x05
    1638:	3e 83       	std	Y+6, r19	; 0x06
    163a:	4f 83       	std	Y+7, r20	; 0x07
    163c:	58 87       	std	Y+8, r21	; 0x08
    163e:	8e 01       	movw	r16, r28
    1640:	07 5f       	subi	r16, 0xF7	; 247
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	ce 01       	movw	r24, r28
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	b8 01       	movw	r22, r16
    164a:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    164e:	81 e1       	ldi	r24, 0x11	; 17
    1650:	e8 2e       	mov	r14, r24
    1652:	f1 2c       	mov	r15, r1
    1654:	ec 0e       	add	r14, r28
    1656:	fd 1e       	adc	r15, r29
    1658:	ce 01       	movw	r24, r28
    165a:	05 96       	adiw	r24, 0x05	; 5
    165c:	b7 01       	movw	r22, r14
    165e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	40 f0       	brcs	.+16     	; 0x1678 <__ltsf2+0x56>
    1668:	89 89       	ldd	r24, Y+17	; 0x11
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	28 f0       	brcs	.+10     	; 0x1678 <__ltsf2+0x56>
    166e:	c8 01       	movw	r24, r16
    1670:	b7 01       	movw	r22, r14
    1672:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__fpcmp_parts_f>
    1676:	01 c0       	rjmp	.+2      	; 0x167a <__ltsf2+0x58>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	68 96       	adiw	r28, 0x18	; 24
    167c:	e6 e0       	ldi	r30, 0x06	; 6
    167e:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__epilogue_restores__+0x18>

00001682 <__fixsfsi>:
    1682:	ac e0       	ldi	r26, 0x0C	; 12
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e7 e4       	ldi	r30, 0x47	; 71
    1688:	fb e0       	ldi	r31, 0x0B	; 11
    168a:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__prologue_saves__+0x20>
    168e:	69 83       	std	Y+1, r22	; 0x01
    1690:	7a 83       	std	Y+2, r23	; 0x02
    1692:	8b 83       	std	Y+3, r24	; 0x03
    1694:	9c 83       	std	Y+4, r25	; 0x04
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	be 01       	movw	r22, r28
    169c:	6b 5f       	subi	r22, 0xFB	; 251
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__unpack_f>
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	81 f1       	breq	.+96     	; 0x170a <__fixsfsi+0x88>
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	70 f1       	brcs	.+92     	; 0x170a <__fixsfsi+0x88>
    16ae:	84 30       	cpi	r24, 0x04	; 4
    16b0:	21 f4       	brne	.+8      	; 0x16ba <__fixsfsi+0x38>
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	88 23       	and	r24, r24
    16b6:	69 f1       	breq	.+90     	; 0x1712 <__fixsfsi+0x90>
    16b8:	0a c0       	rjmp	.+20     	; 0x16ce <__fixsfsi+0x4c>
    16ba:	2f 81       	ldd	r18, Y+7	; 0x07
    16bc:	38 85       	ldd	r19, Y+8	; 0x08
    16be:	37 fd       	sbrc	r19, 7
    16c0:	24 c0       	rjmp	.+72     	; 0x170a <__fixsfsi+0x88>
    16c2:	6e 81       	ldd	r22, Y+6	; 0x06
    16c4:	2f 31       	cpi	r18, 0x1F	; 31
    16c6:	31 05       	cpc	r19, r1
    16c8:	3c f0       	brlt	.+14     	; 0x16d8 <__fixsfsi+0x56>
    16ca:	66 23       	and	r22, r22
    16cc:	11 f1       	breq	.+68     	; 0x1712 <__fixsfsi+0x90>
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e8       	ldi	r21, 0x80	; 128
    16d6:	21 c0       	rjmp	.+66     	; 0x171a <__fixsfsi+0x98>
    16d8:	8e e1       	ldi	r24, 0x1E	; 30
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	82 1b       	sub	r24, r18
    16de:	93 0b       	sbc	r25, r19
    16e0:	29 85       	ldd	r18, Y+9	; 0x09
    16e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    16e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    16e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <__fixsfsi+0x70>
    16ea:	56 95       	lsr	r21
    16ec:	47 95       	ror	r20
    16ee:	37 95       	ror	r19
    16f0:	27 95       	ror	r18
    16f2:	8a 95       	dec	r24
    16f4:	d2 f7       	brpl	.-12     	; 0x16ea <__fixsfsi+0x68>
    16f6:	66 23       	and	r22, r22
    16f8:	81 f0       	breq	.+32     	; 0x171a <__fixsfsi+0x98>
    16fa:	50 95       	com	r21
    16fc:	40 95       	com	r20
    16fe:	30 95       	com	r19
    1700:	21 95       	neg	r18
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	4f 4f       	sbci	r20, 0xFF	; 255
    1706:	5f 4f       	sbci	r21, 0xFF	; 255
    1708:	08 c0       	rjmp	.+16     	; 0x171a <__fixsfsi+0x98>
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	a9 01       	movw	r20, r18
    1710:	04 c0       	rjmp	.+8      	; 0x171a <__fixsfsi+0x98>
    1712:	2f ef       	ldi	r18, 0xFF	; 255
    1714:	3f ef       	ldi	r19, 0xFF	; 255
    1716:	4f ef       	ldi	r20, 0xFF	; 255
    1718:	5f e7       	ldi	r21, 0x7F	; 127
    171a:	b9 01       	movw	r22, r18
    171c:	ca 01       	movw	r24, r20
    171e:	2c 96       	adiw	r28, 0x0c	; 12
    1720:	e2 e0       	ldi	r30, 0x02	; 2
    1722:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__epilogue_restores__+0x20>

00001726 <__pack_f>:
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	fc 01       	movw	r30, r24
    1734:	24 81       	ldd	r18, Z+4	; 0x04
    1736:	35 81       	ldd	r19, Z+5	; 0x05
    1738:	46 81       	ldd	r20, Z+6	; 0x06
    173a:	57 81       	ldd	r21, Z+7	; 0x07
    173c:	61 81       	ldd	r22, Z+1	; 0x01
    173e:	80 81       	ld	r24, Z
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	20 f4       	brcc	.+8      	; 0x174c <__pack_f+0x26>
    1744:	40 61       	ori	r20, 0x10	; 16
    1746:	ef ef       	ldi	r30, 0xFF	; 255
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	a3 c0       	rjmp	.+326    	; 0x1892 <__pack_f+0x16c>
    174c:	84 30       	cpi	r24, 0x04	; 4
    174e:	09 f4       	brne	.+2      	; 0x1752 <__pack_f+0x2c>
    1750:	9b c0       	rjmp	.+310    	; 0x1888 <__pack_f+0x162>
    1752:	82 30       	cpi	r24, 0x02	; 2
    1754:	09 f4       	brne	.+2      	; 0x1758 <__pack_f+0x32>
    1756:	92 c0       	rjmp	.+292    	; 0x187c <__pack_f+0x156>
    1758:	21 15       	cp	r18, r1
    175a:	31 05       	cpc	r19, r1
    175c:	41 05       	cpc	r20, r1
    175e:	51 05       	cpc	r21, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <__pack_f+0x3e>
    1762:	8f c0       	rjmp	.+286    	; 0x1882 <__pack_f+0x15c>
    1764:	02 80       	ldd	r0, Z+2	; 0x02
    1766:	f3 81       	ldd	r31, Z+3	; 0x03
    1768:	e0 2d       	mov	r30, r0
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	e2 38       	cpi	r30, 0x82	; 130
    176e:	f8 07       	cpc	r31, r24
    1770:	0c f0       	brlt	.+2      	; 0x1774 <__pack_f+0x4e>
    1772:	5a c0       	rjmp	.+180    	; 0x1828 <__pack_f+0x102>
    1774:	c2 e8       	ldi	r28, 0x82	; 130
    1776:	df ef       	ldi	r29, 0xFF	; 255
    1778:	ce 1b       	sub	r28, r30
    177a:	df 0b       	sbc	r29, r31
    177c:	ca 31       	cpi	r28, 0x1A	; 26
    177e:	d1 05       	cpc	r29, r1
    1780:	6c f5       	brge	.+90     	; 0x17dc <__pack_f+0xb6>
    1782:	79 01       	movw	r14, r18
    1784:	8a 01       	movw	r16, r20
    1786:	0c 2e       	mov	r0, r28
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <__pack_f+0x6c>
    178a:	16 95       	lsr	r17
    178c:	07 95       	ror	r16
    178e:	f7 94       	ror	r15
    1790:	e7 94       	ror	r14
    1792:	0a 94       	dec	r0
    1794:	d2 f7       	brpl	.-12     	; 0x178a <__pack_f+0x64>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a0 e0       	ldi	r26, 0x00	; 0
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	0c 2e       	mov	r0, r28
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <__pack_f+0x84>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	aa 1f       	adc	r26, r26
    17a8:	bb 1f       	adc	r27, r27
    17aa:	0a 94       	dec	r0
    17ac:	d2 f7       	brpl	.-12     	; 0x17a2 <__pack_f+0x7c>
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	a1 09       	sbc	r26, r1
    17b2:	b1 09       	sbc	r27, r1
    17b4:	82 23       	and	r24, r18
    17b6:	93 23       	and	r25, r19
    17b8:	a4 23       	and	r26, r20
    17ba:	b5 23       	and	r27, r21
    17bc:	21 e0       	ldi	r18, 0x01	; 1
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	a1 05       	cpc	r26, r1
    17c8:	b1 05       	cpc	r27, r1
    17ca:	19 f4       	brne	.+6      	; 0x17d2 <__pack_f+0xac>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	2e 29       	or	r18, r14
    17d4:	3f 29       	or	r19, r15
    17d6:	40 2b       	or	r20, r16
    17d8:	51 2b       	or	r21, r17
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <__pack_f+0xbc>
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	a9 01       	movw	r20, r18
    17e2:	da 01       	movw	r26, r20
    17e4:	c9 01       	movw	r24, r18
    17e6:	8f 77       	andi	r24, 0x7F	; 127
    17e8:	90 70       	andi	r25, 0x00	; 0
    17ea:	a0 70       	andi	r26, 0x00	; 0
    17ec:	b0 70       	andi	r27, 0x00	; 0
    17ee:	80 34       	cpi	r24, 0x40	; 64
    17f0:	91 05       	cpc	r25, r1
    17f2:	a1 05       	cpc	r26, r1
    17f4:	b1 05       	cpc	r27, r1
    17f6:	39 f4       	brne	.+14     	; 0x1806 <__pack_f+0xe0>
    17f8:	27 ff       	sbrs	r18, 7
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <__pack_f+0xe8>
    17fc:	20 5c       	subi	r18, 0xC0	; 192
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	4f 4f       	sbci	r20, 0xFF	; 255
    1802:	5f 4f       	sbci	r21, 0xFF	; 255
    1804:	04 c0       	rjmp	.+8      	; 0x180e <__pack_f+0xe8>
    1806:	21 5c       	subi	r18, 0xC1	; 193
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	4f 4f       	sbci	r20, 0xFF	; 255
    180c:	5f 4f       	sbci	r21, 0xFF	; 255
    180e:	e1 e0       	ldi	r30, 0x01	; 1
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	20 30       	cpi	r18, 0x00	; 0
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	38 07       	cpc	r19, r24
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	48 07       	cpc	r20, r24
    181c:	80 e4       	ldi	r24, 0x40	; 64
    181e:	58 07       	cpc	r21, r24
    1820:	28 f5       	brcc	.+74     	; 0x186c <__pack_f+0x146>
    1822:	e0 e0       	ldi	r30, 0x00	; 0
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	22 c0       	rjmp	.+68     	; 0x186c <__pack_f+0x146>
    1828:	e0 38       	cpi	r30, 0x80	; 128
    182a:	f1 05       	cpc	r31, r1
    182c:	6c f5       	brge	.+90     	; 0x1888 <__pack_f+0x162>
    182e:	e1 58       	subi	r30, 0x81	; 129
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	da 01       	movw	r26, r20
    1834:	c9 01       	movw	r24, r18
    1836:	8f 77       	andi	r24, 0x7F	; 127
    1838:	90 70       	andi	r25, 0x00	; 0
    183a:	a0 70       	andi	r26, 0x00	; 0
    183c:	b0 70       	andi	r27, 0x00	; 0
    183e:	80 34       	cpi	r24, 0x40	; 64
    1840:	91 05       	cpc	r25, r1
    1842:	a1 05       	cpc	r26, r1
    1844:	b1 05       	cpc	r27, r1
    1846:	39 f4       	brne	.+14     	; 0x1856 <__pack_f+0x130>
    1848:	27 ff       	sbrs	r18, 7
    184a:	09 c0       	rjmp	.+18     	; 0x185e <__pack_f+0x138>
    184c:	20 5c       	subi	r18, 0xC0	; 192
    184e:	3f 4f       	sbci	r19, 0xFF	; 255
    1850:	4f 4f       	sbci	r20, 0xFF	; 255
    1852:	5f 4f       	sbci	r21, 0xFF	; 255
    1854:	04 c0       	rjmp	.+8      	; 0x185e <__pack_f+0x138>
    1856:	21 5c       	subi	r18, 0xC1	; 193
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	4f 4f       	sbci	r20, 0xFF	; 255
    185c:	5f 4f       	sbci	r21, 0xFF	; 255
    185e:	57 ff       	sbrs	r21, 7
    1860:	05 c0       	rjmp	.+10     	; 0x186c <__pack_f+0x146>
    1862:	56 95       	lsr	r21
    1864:	47 95       	ror	r20
    1866:	37 95       	ror	r19
    1868:	27 95       	ror	r18
    186a:	31 96       	adiw	r30, 0x01	; 1
    186c:	87 e0       	ldi	r24, 0x07	; 7
    186e:	56 95       	lsr	r21
    1870:	47 95       	ror	r20
    1872:	37 95       	ror	r19
    1874:	27 95       	ror	r18
    1876:	8a 95       	dec	r24
    1878:	d1 f7       	brne	.-12     	; 0x186e <__pack_f+0x148>
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <__pack_f+0x16c>
    187c:	e0 e0       	ldi	r30, 0x00	; 0
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	05 c0       	rjmp	.+10     	; 0x188c <__pack_f+0x166>
    1882:	e0 e0       	ldi	r30, 0x00	; 0
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	05 c0       	rjmp	.+10     	; 0x1892 <__pack_f+0x16c>
    1888:	ef ef       	ldi	r30, 0xFF	; 255
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	8e 2f       	mov	r24, r30
    1894:	87 95       	ror	r24
    1896:	88 27       	eor	r24, r24
    1898:	87 95       	ror	r24
    189a:	94 2f       	mov	r25, r20
    189c:	9f 77       	andi	r25, 0x7F	; 127
    189e:	67 95       	ror	r22
    18a0:	66 27       	eor	r22, r22
    18a2:	67 95       	ror	r22
    18a4:	e6 95       	lsr	r30
    18a6:	e2 2e       	mov	r14, r18
    18a8:	a9 2f       	mov	r26, r25
    18aa:	a8 2b       	or	r26, r24
    18ac:	fe 2f       	mov	r31, r30
    18ae:	f6 2b       	or	r31, r22
    18b0:	62 2f       	mov	r22, r18
    18b2:	73 2f       	mov	r23, r19
    18b4:	8a 2f       	mov	r24, r26
    18b6:	9f 2f       	mov	r25, r31
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	e6 e0       	ldi	r30, 0x06	; 6
    18be:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__epilogue_restores__+0x18>

000018c2 <__unpack_f>:
    18c2:	dc 01       	movw	r26, r24
    18c4:	fb 01       	movw	r30, r22
    18c6:	2c 91       	ld	r18, X
    18c8:	11 96       	adiw	r26, 0x01	; 1
    18ca:	3c 91       	ld	r19, X
    18cc:	11 97       	sbiw	r26, 0x01	; 1
    18ce:	12 96       	adiw	r26, 0x02	; 2
    18d0:	8c 91       	ld	r24, X
    18d2:	12 97       	sbiw	r26, 0x02	; 2
    18d4:	48 2f       	mov	r20, r24
    18d6:	4f 77       	andi	r20, 0x7F	; 127
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	98 2f       	mov	r25, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	99 27       	eor	r25, r25
    18e0:	99 1f       	adc	r25, r25
    18e2:	13 96       	adiw	r26, 0x03	; 3
    18e4:	6c 91       	ld	r22, X
    18e6:	13 97       	sbiw	r26, 0x03	; 3
    18e8:	86 2f       	mov	r24, r22
    18ea:	88 0f       	add	r24, r24
    18ec:	89 2b       	or	r24, r25
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	66 1f       	adc	r22, r22
    18f2:	66 27       	eor	r22, r22
    18f4:	66 1f       	adc	r22, r22
    18f6:	61 83       	std	Z+1, r22	; 0x01
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	39 f5       	brne	.+78     	; 0x194a <__unpack_f+0x88>
    18fc:	21 15       	cp	r18, r1
    18fe:	31 05       	cpc	r19, r1
    1900:	41 05       	cpc	r20, r1
    1902:	51 05       	cpc	r21, r1
    1904:	11 f4       	brne	.+4      	; 0x190a <__unpack_f+0x48>
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	29 c0       	rjmp	.+82     	; 0x195c <__unpack_f+0x9a>
    190a:	82 e8       	ldi	r24, 0x82	; 130
    190c:	9f ef       	ldi	r25, 0xFF	; 255
    190e:	93 83       	std	Z+3, r25	; 0x03
    1910:	82 83       	std	Z+2, r24	; 0x02
    1912:	67 e0       	ldi	r22, 0x07	; 7
    1914:	22 0f       	add	r18, r18
    1916:	33 1f       	adc	r19, r19
    1918:	44 1f       	adc	r20, r20
    191a:	55 1f       	adc	r21, r21
    191c:	6a 95       	dec	r22
    191e:	d1 f7       	brne	.-12     	; 0x1914 <__unpack_f+0x52>
    1920:	83 e0       	ldi	r24, 0x03	; 3
    1922:	80 83       	st	Z, r24
    1924:	09 c0       	rjmp	.+18     	; 0x1938 <__unpack_f+0x76>
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	44 1f       	adc	r20, r20
    192c:	55 1f       	adc	r21, r21
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	93 83       	std	Z+3, r25	; 0x03
    1936:	82 83       	std	Z+2, r24	; 0x02
    1938:	20 30       	cpi	r18, 0x00	; 0
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	38 07       	cpc	r19, r24
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	48 07       	cpc	r20, r24
    1942:	80 e4       	ldi	r24, 0x40	; 64
    1944:	58 07       	cpc	r21, r24
    1946:	78 f3       	brcs	.-34     	; 0x1926 <__unpack_f+0x64>
    1948:	20 c0       	rjmp	.+64     	; 0x198a <__unpack_f+0xc8>
    194a:	8f 3f       	cpi	r24, 0xFF	; 255
    194c:	91 05       	cpc	r25, r1
    194e:	79 f4       	brne	.+30     	; 0x196e <__unpack_f+0xac>
    1950:	21 15       	cp	r18, r1
    1952:	31 05       	cpc	r19, r1
    1954:	41 05       	cpc	r20, r1
    1956:	51 05       	cpc	r21, r1
    1958:	19 f4       	brne	.+6      	; 0x1960 <__unpack_f+0x9e>
    195a:	84 e0       	ldi	r24, 0x04	; 4
    195c:	80 83       	st	Z, r24
    195e:	08 95       	ret
    1960:	44 ff       	sbrs	r20, 4
    1962:	03 c0       	rjmp	.+6      	; 0x196a <__unpack_f+0xa8>
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	80 83       	st	Z, r24
    1968:	10 c0       	rjmp	.+32     	; 0x198a <__unpack_f+0xc8>
    196a:	10 82       	st	Z, r1
    196c:	0e c0       	rjmp	.+28     	; 0x198a <__unpack_f+0xc8>
    196e:	8f 57       	subi	r24, 0x7F	; 127
    1970:	90 40       	sbci	r25, 0x00	; 0
    1972:	93 83       	std	Z+3, r25	; 0x03
    1974:	82 83       	std	Z+2, r24	; 0x02
    1976:	83 e0       	ldi	r24, 0x03	; 3
    1978:	80 83       	st	Z, r24
    197a:	87 e0       	ldi	r24, 0x07	; 7
    197c:	22 0f       	add	r18, r18
    197e:	33 1f       	adc	r19, r19
    1980:	44 1f       	adc	r20, r20
    1982:	55 1f       	adc	r21, r21
    1984:	8a 95       	dec	r24
    1986:	d1 f7       	brne	.-12     	; 0x197c <__unpack_f+0xba>
    1988:	50 64       	ori	r21, 0x40	; 64
    198a:	24 83       	std	Z+4, r18	; 0x04
    198c:	35 83       	std	Z+5, r19	; 0x05
    198e:	46 83       	std	Z+6, r20	; 0x06
    1990:	57 83       	std	Z+7, r21	; 0x07
    1992:	08 95       	ret

00001994 <__fpcmp_parts_f>:
    1994:	fc 01       	movw	r30, r24
    1996:	db 01       	movw	r26, r22
    1998:	90 81       	ld	r25, Z
    199a:	92 30       	cpi	r25, 0x02	; 2
    199c:	08 f4       	brcc	.+2      	; 0x19a0 <__fpcmp_parts_f+0xc>
    199e:	49 c0       	rjmp	.+146    	; 0x1a32 <__fpcmp_parts_f+0x9e>
    19a0:	8c 91       	ld	r24, X
    19a2:	82 30       	cpi	r24, 0x02	; 2
    19a4:	08 f4       	brcc	.+2      	; 0x19a8 <__fpcmp_parts_f+0x14>
    19a6:	45 c0       	rjmp	.+138    	; 0x1a32 <__fpcmp_parts_f+0x9e>
    19a8:	94 30       	cpi	r25, 0x04	; 4
    19aa:	51 f4       	brne	.+20     	; 0x19c0 <__fpcmp_parts_f+0x2c>
    19ac:	61 81       	ldd	r22, Z+1	; 0x01
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	b1 f5       	brne	.+108    	; 0x1a1e <__fpcmp_parts_f+0x8a>
    19b2:	11 96       	adiw	r26, 0x01	; 1
    19b4:	2c 91       	ld	r18, X
    19b6:	11 97       	sbiw	r26, 0x01	; 1
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	26 1b       	sub	r18, r22
    19bc:	31 09       	sbc	r19, r1
    19be:	41 c0       	rjmp	.+130    	; 0x1a42 <__fpcmp_parts_f+0xae>
    19c0:	84 30       	cpi	r24, 0x04	; 4
    19c2:	21 f0       	breq	.+8      	; 0x19cc <__fpcmp_parts_f+0x38>
    19c4:	92 30       	cpi	r25, 0x02	; 2
    19c6:	41 f4       	brne	.+16     	; 0x19d8 <__fpcmp_parts_f+0x44>
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	b1 f1       	breq	.+108    	; 0x1a38 <__fpcmp_parts_f+0xa4>
    19cc:	11 96       	adiw	r26, 0x01	; 1
    19ce:	8c 91       	ld	r24, X
    19d0:	11 97       	sbiw	r26, 0x01	; 1
    19d2:	88 23       	and	r24, r24
    19d4:	a1 f1       	breq	.+104    	; 0x1a3e <__fpcmp_parts_f+0xaa>
    19d6:	2d c0       	rjmp	.+90     	; 0x1a32 <__fpcmp_parts_f+0x9e>
    19d8:	61 81       	ldd	r22, Z+1	; 0x01
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	01 f1       	breq	.+64     	; 0x1a1e <__fpcmp_parts_f+0x8a>
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	8c 91       	ld	r24, X
    19e2:	11 97       	sbiw	r26, 0x01	; 1
    19e4:	68 17       	cp	r22, r24
    19e6:	d9 f4       	brne	.+54     	; 0x1a1e <__fpcmp_parts_f+0x8a>
    19e8:	22 81       	ldd	r18, Z+2	; 0x02
    19ea:	33 81       	ldd	r19, Z+3	; 0x03
    19ec:	12 96       	adiw	r26, 0x02	; 2
    19ee:	8d 91       	ld	r24, X+
    19f0:	9c 91       	ld	r25, X
    19f2:	13 97       	sbiw	r26, 0x03	; 3
    19f4:	82 17       	cp	r24, r18
    19f6:	93 07       	cpc	r25, r19
    19f8:	94 f0       	brlt	.+36     	; 0x1a1e <__fpcmp_parts_f+0x8a>
    19fa:	28 17       	cp	r18, r24
    19fc:	39 07       	cpc	r19, r25
    19fe:	bc f0       	brlt	.+46     	; 0x1a2e <__fpcmp_parts_f+0x9a>
    1a00:	24 81       	ldd	r18, Z+4	; 0x04
    1a02:	35 81       	ldd	r19, Z+5	; 0x05
    1a04:	46 81       	ldd	r20, Z+6	; 0x06
    1a06:	57 81       	ldd	r21, Z+7	; 0x07
    1a08:	14 96       	adiw	r26, 0x04	; 4
    1a0a:	8d 91       	ld	r24, X+
    1a0c:	9d 91       	ld	r25, X+
    1a0e:	0d 90       	ld	r0, X+
    1a10:	bc 91       	ld	r27, X
    1a12:	a0 2d       	mov	r26, r0
    1a14:	82 17       	cp	r24, r18
    1a16:	93 07       	cpc	r25, r19
    1a18:	a4 07       	cpc	r26, r20
    1a1a:	b5 07       	cpc	r27, r21
    1a1c:	18 f4       	brcc	.+6      	; 0x1a24 <__fpcmp_parts_f+0x90>
    1a1e:	66 23       	and	r22, r22
    1a20:	41 f0       	breq	.+16     	; 0x1a32 <__fpcmp_parts_f+0x9e>
    1a22:	0d c0       	rjmp	.+26     	; 0x1a3e <__fpcmp_parts_f+0xaa>
    1a24:	28 17       	cp	r18, r24
    1a26:	39 07       	cpc	r19, r25
    1a28:	4a 07       	cpc	r20, r26
    1a2a:	5b 07       	cpc	r21, r27
    1a2c:	28 f4       	brcc	.+10     	; 0x1a38 <__fpcmp_parts_f+0xa4>
    1a2e:	66 23       	and	r22, r22
    1a30:	31 f0       	breq	.+12     	; 0x1a3e <__fpcmp_parts_f+0xaa>
    1a32:	21 e0       	ldi	r18, 0x01	; 1
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <__fpcmp_parts_f+0xae>
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <__fpcmp_parts_f+0xae>
    1a3e:	2f ef       	ldi	r18, 0xFF	; 255
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	c9 01       	movw	r24, r18
    1a44:	08 95       	ret

00001a46 <__prologue_saves__>:
    1a46:	2f 92       	push	r2
    1a48:	3f 92       	push	r3
    1a4a:	4f 92       	push	r4
    1a4c:	5f 92       	push	r5
    1a4e:	6f 92       	push	r6
    1a50:	7f 92       	push	r7
    1a52:	8f 92       	push	r8
    1a54:	9f 92       	push	r9
    1a56:	af 92       	push	r10
    1a58:	bf 92       	push	r11
    1a5a:	cf 92       	push	r12
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	ca 1b       	sub	r28, r26
    1a70:	db 0b       	sbc	r29, r27
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	09 94       	ijmp

00001a7e <__epilogue_restores__>:
    1a7e:	2a 88       	ldd	r2, Y+18	; 0x12
    1a80:	39 88       	ldd	r3, Y+17	; 0x11
    1a82:	48 88       	ldd	r4, Y+16	; 0x10
    1a84:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a86:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a88:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a90:	b9 84       	ldd	r11, Y+9	; 0x09
    1a92:	c8 84       	ldd	r12, Y+8	; 0x08
    1a94:	df 80       	ldd	r13, Y+7	; 0x07
    1a96:	ee 80       	ldd	r14, Y+6	; 0x06
    1a98:	fd 80       	ldd	r15, Y+5	; 0x05
    1a9a:	0c 81       	ldd	r16, Y+4	; 0x04
    1a9c:	1b 81       	ldd	r17, Y+3	; 0x03
    1a9e:	aa 81       	ldd	r26, Y+2	; 0x02
    1aa0:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa2:	ce 0f       	add	r28, r30
    1aa4:	d1 1d       	adc	r29, r1
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	ed 01       	movw	r28, r26
    1ab2:	08 95       	ret

00001ab4 <_exit>:
    1ab4:	f8 94       	cli

00001ab6 <__stop_program>:
    1ab6:	ff cf       	rjmp	.-2      	; 0x1ab6 <__stop_program>
