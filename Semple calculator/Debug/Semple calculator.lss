
Semple calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001f62  00001fd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f62  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00002004  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00002755  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000024c  00000000  00000000  000028d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002868  00000000  00000000  00002b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001150  00000000  00000000  00005389  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a7b  00000000  00000000  000064d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00007f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000494  00000000  00000000  00008194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c25  00000000  00000000  00008628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000060e  00000000  00000000  0000924d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000098  00000000  00000000  0000985b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e6       	ldi	r30, 0x62	; 98
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 32       	cpi	r26, 0x2E	; 46
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
      8a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <main>
      8e:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <SEND_TO_LCD>:
					{'8','5','2','0'},
					{'9','6','3','='},
					{'/','x','-','+'}};

void SEND_TO_LCD(char data , uint8_t mode )
{
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	df 93       	push	r29
      9c:	cf 93       	push	r28
      9e:	cd b7       	in	r28, 0x3d	; 61
      a0:	de b7       	in	r29, 0x3e	; 62
      a2:	c9 55       	subi	r28, 0x59	; 89
      a4:	d0 40       	sbci	r29, 0x00	; 0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	f8 94       	cli
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	0f be       	out	0x3f, r0	; 63
      ae:	cd bf       	out	0x3d, r28	; 61
      b0:	9e 01       	movw	r18, r28
      b2:	28 5a       	subi	r18, 0xA8	; 168
      b4:	3f 4f       	sbci	r19, 0xFF	; 255
      b6:	f9 01       	movw	r30, r18
      b8:	80 83       	st	Z, r24
      ba:	ce 01       	movw	r24, r28
      bc:	87 5a       	subi	r24, 0xA7	; 167
      be:	9f 4f       	sbci	r25, 0xFF	; 255
      c0:	fc 01       	movw	r30, r24
      c2:	60 83       	st	Z, r22
	uint8_t control_lcd = 0 ;
      c4:	19 82       	std	Y+1, r1	; 0x01
	write_to_calc(lcd_data_port,data);
      c6:	88 e2       	ldi	r24, 0x28	; 40
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	2f ef       	ldi	r18, 0xFF	; 255
      cc:	fc 01       	movw	r30, r24
      ce:	20 83       	st	Z, r18
      d0:	8a e2       	ldi	r24, 0x2A	; 42
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	2f ef       	ldi	r18, 0xFF	; 255
      d6:	fc 01       	movw	r30, r24
      d8:	20 83       	st	Z, r18
      da:	85 e2       	ldi	r24, 0x25	; 37
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	fc 01       	movw	r30, r24
      e0:	10 82       	st	Z, r1
      e2:	8b e2       	ldi	r24, 0x2B	; 43
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	9e 01       	movw	r18, r28
      e8:	28 5a       	subi	r18, 0xA8	; 168
      ea:	3f 4f       	sbci	r19, 0xFF	; 255
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18
      f4:	88 e2       	ldi	r24, 0x28	; 40
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	2d ef       	ldi	r18, 0xFD	; 253
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	a0 e2       	ldi	r26, 0x20	; 32
     104:	b1 e4       	ldi	r27, 0x41	; 65
     106:	8a 83       	std	Y+2, r24	; 0x02
     108:	9b 83       	std	Y+3, r25	; 0x03
     10a:	ac 83       	std	Y+4, r26	; 0x04
     10c:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     10e:	6a 81       	ldd	r22, Y+2	; 0x02
     110:	7b 81       	ldd	r23, Y+3	; 0x03
     112:	8c 81       	ldd	r24, Y+4	; 0x04
     114:	9d 81       	ldd	r25, Y+5	; 0x05
     116:	2b ea       	ldi	r18, 0xAB	; 171
     118:	3a ea       	ldi	r19, 0xAA	; 170
     11a:	4a ea       	ldi	r20, 0xAA	; 170
     11c:	50 e4       	ldi	r21, 0x40	; 64
     11e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     122:	dc 01       	movw	r26, r24
     124:	cb 01       	movw	r24, r22
     126:	8e 83       	std	Y+6, r24	; 0x06
     128:	9f 83       	std	Y+7, r25	; 0x07
     12a:	a8 87       	std	Y+8, r26	; 0x08
     12c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     12e:	11 e0       	ldi	r17, 0x01	; 1
     130:	6e 81       	ldd	r22, Y+6	; 0x06
     132:	7f 81       	ldd	r23, Y+7	; 0x07
     134:	88 85       	ldd	r24, Y+8	; 0x08
     136:	99 85       	ldd	r25, Y+9	; 0x09
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e8       	ldi	r20, 0x80	; 128
     13e:	5f e3       	ldi	r21, 0x3F	; 63
     140:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     144:	88 23       	and	r24, r24
     146:	0c f0       	brlt	.+2      	; 0x14a <SEND_TO_LCD+0xb4>
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	11 23       	and	r17, r17
     14c:	19 f0       	breq	.+6      	; 0x154 <SEND_TO_LCD+0xbe>
		__ticks = 1;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	8a 87       	std	Y+10, r24	; 0x0a
     152:	a3 c0       	rjmp	.+326    	; 0x29a <SEND_TO_LCD+0x204>
	else if (__tmp > 255)
     154:	11 e0       	ldi	r17, 0x01	; 1
     156:	6e 81       	ldd	r22, Y+6	; 0x06
     158:	7f 81       	ldd	r23, Y+7	; 0x07
     15a:	88 85       	ldd	r24, Y+8	; 0x08
     15c:	99 85       	ldd	r25, Y+9	; 0x09
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	4f e7       	ldi	r20, 0x7F	; 127
     164:	53 e4       	ldi	r21, 0x43	; 67
     166:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     16a:	18 16       	cp	r1, r24
     16c:	0c f0       	brlt	.+2      	; 0x170 <SEND_TO_LCD+0xda>
     16e:	10 e0       	ldi	r17, 0x00	; 0
     170:	11 23       	and	r17, r17
     172:	09 f4       	brne	.+2      	; 0x176 <SEND_TO_LCD+0xe0>
     174:	89 c0       	rjmp	.+274    	; 0x288 <SEND_TO_LCD+0x1f2>
	{
		_delay_ms(__us / 1000.0);
     176:	6a 81       	ldd	r22, Y+2	; 0x02
     178:	7b 81       	ldd	r23, Y+3	; 0x03
     17a:	8c 81       	ldd	r24, Y+4	; 0x04
     17c:	9d 81       	ldd	r25, Y+5	; 0x05
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	4a e7       	ldi	r20, 0x7A	; 122
     184:	54 e4       	ldi	r21, 0x44	; 68
     186:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__divsf3>
     18a:	dc 01       	movw	r26, r24
     18c:	cb 01       	movw	r24, r22
     18e:	8b 87       	std	Y+11, r24	; 0x0b
     190:	9c 87       	std	Y+12, r25	; 0x0c
     192:	ad 87       	std	Y+13, r26	; 0x0d
     194:	be 87       	std	Y+14, r27	; 0x0e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     196:	6b 85       	ldd	r22, Y+11	; 0x0b
     198:	7c 85       	ldd	r23, Y+12	; 0x0c
     19a:	8d 85       	ldd	r24, Y+13	; 0x0d
     19c:	9e 85       	ldd	r25, Y+14	; 0x0e
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	4a e7       	ldi	r20, 0x7A	; 122
     1a4:	55 e4       	ldi	r21, 0x45	; 69
     1a6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     1aa:	dc 01       	movw	r26, r24
     1ac:	cb 01       	movw	r24, r22
     1ae:	8f 87       	std	Y+15, r24	; 0x0f
     1b0:	98 8b       	std	Y+16, r25	; 0x10
     1b2:	a9 8b       	std	Y+17, r26	; 0x11
     1b4:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	6f 85       	ldd	r22, Y+15	; 0x0f
     1ba:	78 89       	ldd	r23, Y+16	; 0x10
     1bc:	89 89       	ldd	r24, Y+17	; 0x11
     1be:	9a 89       	ldd	r25, Y+18	; 0x12
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 e8       	ldi	r20, 0x80	; 128
     1c6:	5f e3       	ldi	r21, 0x3F	; 63
     1c8:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     1cc:	88 23       	and	r24, r24
     1ce:	0c f0       	brlt	.+2      	; 0x1d2 <SEND_TO_LCD+0x13c>
     1d0:	10 e0       	ldi	r17, 0x00	; 0
     1d2:	11 23       	and	r17, r17
     1d4:	29 f0       	breq	.+10     	; 0x1e0 <SEND_TO_LCD+0x14a>
		__ticks = 1;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	9c 8b       	std	Y+20, r25	; 0x14
     1dc:	8b 8b       	std	Y+19, r24	; 0x13
     1de:	46 c0       	rjmp	.+140    	; 0x26c <SEND_TO_LCD+0x1d6>
	else if (__tmp > 65535)
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	6f 85       	ldd	r22, Y+15	; 0x0f
     1e4:	78 89       	ldd	r23, Y+16	; 0x10
     1e6:	89 89       	ldd	r24, Y+17	; 0x11
     1e8:	9a 89       	ldd	r25, Y+18	; 0x12
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	3f ef       	ldi	r19, 0xFF	; 255
     1ee:	4f e7       	ldi	r20, 0x7F	; 127
     1f0:	57 e4       	ldi	r21, 0x47	; 71
     1f2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     1f6:	18 16       	cp	r1, r24
     1f8:	0c f0       	brlt	.+2      	; 0x1fc <SEND_TO_LCD+0x166>
     1fa:	10 e0       	ldi	r17, 0x00	; 0
     1fc:	11 23       	and	r17, r17
     1fe:	61 f1       	breq	.+88     	; 0x258 <SEND_TO_LCD+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     200:	6b 85       	ldd	r22, Y+11	; 0x0b
     202:	7c 85       	ldd	r23, Y+12	; 0x0c
     204:	8d 85       	ldd	r24, Y+13	; 0x0d
     206:	9e 85       	ldd	r25, Y+14	; 0x0e
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e2       	ldi	r20, 0x20	; 32
     20e:	51 e4       	ldi	r21, 0x41	; 65
     210:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	bc 01       	movw	r22, r24
     21a:	cd 01       	movw	r24, r26
     21c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     220:	dc 01       	movw	r26, r24
     222:	cb 01       	movw	r24, r22
     224:	9c 8b       	std	Y+20, r25	; 0x14
     226:	8b 8b       	std	Y+19, r24	; 0x13
     228:	12 c0       	rjmp	.+36     	; 0x24e <SEND_TO_LCD+0x1b8>
     22a:	80 e9       	ldi	r24, 0x90	; 144
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	9e 8b       	std	Y+22, r25	; 0x16
     230:	8d 8b       	std	Y+21, r24	; 0x15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     232:	8d 89       	ldd	r24, Y+21	; 0x15
     234:	9e 89       	ldd	r25, Y+22	; 0x16
     236:	8c 01       	movw	r16, r24
     238:	c8 01       	movw	r24, r16
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <SEND_TO_LCD+0x1a4>
     23e:	8c 01       	movw	r16, r24
     240:	1e 8b       	std	Y+22, r17	; 0x16
     242:	0d 8b       	std	Y+21, r16	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     244:	8b 89       	ldd	r24, Y+19	; 0x13
     246:	9c 89       	ldd	r25, Y+20	; 0x14
     248:	01 97       	sbiw	r24, 0x01	; 1
     24a:	9c 8b       	std	Y+20, r25	; 0x14
     24c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24e:	8b 89       	ldd	r24, Y+19	; 0x13
     250:	9c 89       	ldd	r25, Y+20	; 0x14
     252:	00 97       	sbiw	r24, 0x00	; 0
     254:	51 f7       	brne	.-44     	; 0x22a <SEND_TO_LCD+0x194>
     256:	28 c0       	rjmp	.+80     	; 0x2a8 <SEND_TO_LCD+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     258:	6f 85       	ldd	r22, Y+15	; 0x0f
     25a:	78 89       	ldd	r23, Y+16	; 0x10
     25c:	89 89       	ldd	r24, Y+17	; 0x11
     25e:	9a 89       	ldd	r25, Y+18	; 0x12
     260:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	9c 8b       	std	Y+20, r25	; 0x14
     26a:	8b 8b       	std	Y+19, r24	; 0x13
     26c:	8b 89       	ldd	r24, Y+19	; 0x13
     26e:	9c 89       	ldd	r25, Y+20	; 0x14
     270:	98 8f       	std	Y+24, r25	; 0x18
     272:	8f 8b       	std	Y+23, r24	; 0x17
     274:	8f 89       	ldd	r24, Y+23	; 0x17
     276:	98 8d       	ldd	r25, Y+24	; 0x18
     278:	8c 01       	movw	r16, r24
     27a:	f8 01       	movw	r30, r16
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <SEND_TO_LCD+0x1e6>
     280:	8f 01       	movw	r16, r30
     282:	18 8f       	std	Y+24, r17	; 0x18
     284:	0f 8b       	std	Y+23, r16	; 0x17
     286:	10 c0       	rjmp	.+32     	; 0x2a8 <SEND_TO_LCD+0x212>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     288:	6e 81       	ldd	r22, Y+6	; 0x06
     28a:	7f 81       	ldd	r23, Y+7	; 0x07
     28c:	88 85       	ldd	r24, Y+8	; 0x08
     28e:	99 85       	ldd	r25, Y+9	; 0x09
     290:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	8a 87       	std	Y+10, r24	; 0x0a
     29a:	8a 85       	ldd	r24, Y+10	; 0x0a
     29c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     29e:	89 8d       	ldd	r24, Y+25	; 0x19
     2a0:	18 2f       	mov	r17, r24
     2a2:	1a 95       	dec	r17
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <SEND_TO_LCD+0x20c>
     2a6:	19 8f       	std	Y+25, r17	; 0x19
     2a8:	88 e2       	ldi	r24, 0x28	; 40
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	2f ef       	ldi	r18, 0xFF	; 255
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
	control_lcd = mode ;			//CMD => RS=0 ,DATA =>RS =1 
     2b2:	ce 01       	movw	r24, r28
     2b4:	87 5a       	subi	r24, 0xA7	; 167
     2b6:	9f 4f       	sbci	r25, 0xFF	; 255
     2b8:	fc 01       	movw	r30, r24
     2ba:	80 81       	ld	r24, Z
     2bc:	89 83       	std	Y+1, r24	; 0x01
	control_lcd |= 2;				// EN = 1
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	82 60       	ori	r24, 0x02	; 2
     2c2:	89 83       	std	Y+1, r24	; 0x01
	write_to_calc(lcd_ctrl_port,control_lcd);
     2c4:	88 e2       	ldi	r24, 0x28	; 40
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	fc 01       	movw	r30, r24
     2cc:	20 83       	st	Z, r18
     2ce:	8a e2       	ldi	r24, 0x2A	; 42
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	2f ef       	ldi	r18, 0xFF	; 255
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18
     2d8:	85 e2       	ldi	r24, 0x25	; 37
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	fc 01       	movw	r30, r24
     2e0:	20 83       	st	Z, r18
     2e2:	8b e2       	ldi	r24, 0x2B	; 43
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	29 81       	ldd	r18, Y+1	; 0x01
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
     2ec:	88 e2       	ldi	r24, 0x28	; 40
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2d ef       	ldi	r18, 0xFD	; 253
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	a0 e2       	ldi	r26, 0x20	; 32
     2fc:	b1 e4       	ldi	r27, 0x41	; 65
     2fe:	8a 8f       	std	Y+26, r24	; 0x1a
     300:	9b 8f       	std	Y+27, r25	; 0x1b
     302:	ac 8f       	std	Y+28, r26	; 0x1c
     304:	bd 8f       	std	Y+29, r27	; 0x1d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     306:	6a 8d       	ldd	r22, Y+26	; 0x1a
     308:	7b 8d       	ldd	r23, Y+27	; 0x1b
     30a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     30c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     30e:	2b ea       	ldi	r18, 0xAB	; 171
     310:	3a ea       	ldi	r19, 0xAA	; 170
     312:	4a ea       	ldi	r20, 0xAA	; 170
     314:	50 e4       	ldi	r21, 0x40	; 64
     316:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     31a:	dc 01       	movw	r26, r24
     31c:	cb 01       	movw	r24, r22
     31e:	8e 8f       	std	Y+30, r24	; 0x1e
     320:	9f 8f       	std	Y+31, r25	; 0x1f
     322:	a8 a3       	std	Y+32, r26	; 0x20
     324:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
     326:	11 e0       	ldi	r17, 0x01	; 1
     328:	6e 8d       	ldd	r22, Y+30	; 0x1e
     32a:	7f 8d       	ldd	r23, Y+31	; 0x1f
     32c:	88 a1       	ldd	r24, Y+32	; 0x20
     32e:	99 a1       	ldd	r25, Y+33	; 0x21
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e8       	ldi	r20, 0x80	; 128
     336:	5f e3       	ldi	r21, 0x3F	; 63
     338:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     33c:	88 23       	and	r24, r24
     33e:	0c f0       	brlt	.+2      	; 0x342 <SEND_TO_LCD+0x2ac>
     340:	10 e0       	ldi	r17, 0x00	; 0
     342:	11 23       	and	r17, r17
     344:	19 f0       	breq	.+6      	; 0x34c <SEND_TO_LCD+0x2b6>
		__ticks = 1;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	8a a3       	std	Y+34, r24	; 0x22
     34a:	a3 c0       	rjmp	.+326    	; 0x492 <SEND_TO_LCD+0x3fc>
	else if (__tmp > 255)
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     350:	7f 8d       	ldd	r23, Y+31	; 0x1f
     352:	88 a1       	ldd	r24, Y+32	; 0x20
     354:	99 a1       	ldd	r25, Y+33	; 0x21
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	4f e7       	ldi	r20, 0x7F	; 127
     35c:	53 e4       	ldi	r21, 0x43	; 67
     35e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     362:	18 16       	cp	r1, r24
     364:	0c f0       	brlt	.+2      	; 0x368 <SEND_TO_LCD+0x2d2>
     366:	10 e0       	ldi	r17, 0x00	; 0
     368:	11 23       	and	r17, r17
     36a:	09 f4       	brne	.+2      	; 0x36e <SEND_TO_LCD+0x2d8>
     36c:	89 c0       	rjmp	.+274    	; 0x480 <SEND_TO_LCD+0x3ea>
	{
		_delay_ms(__us / 1000.0);
     36e:	6a 8d       	ldd	r22, Y+26	; 0x1a
     370:	7b 8d       	ldd	r23, Y+27	; 0x1b
     372:	8c 8d       	ldd	r24, Y+28	; 0x1c
     374:	9d 8d       	ldd	r25, Y+29	; 0x1d
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	4a e7       	ldi	r20, 0x7A	; 122
     37c:	54 e4       	ldi	r21, 0x44	; 68
     37e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__divsf3>
     382:	dc 01       	movw	r26, r24
     384:	cb 01       	movw	r24, r22
     386:	8b a3       	std	Y+35, r24	; 0x23
     388:	9c a3       	std	Y+36, r25	; 0x24
     38a:	ad a3       	std	Y+37, r26	; 0x25
     38c:	be a3       	std	Y+38, r27	; 0x26
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     38e:	6b a1       	ldd	r22, Y+35	; 0x23
     390:	7c a1       	ldd	r23, Y+36	; 0x24
     392:	8d a1       	ldd	r24, Y+37	; 0x25
     394:	9e a1       	ldd	r25, Y+38	; 0x26
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	4a e7       	ldi	r20, 0x7A	; 122
     39c:	55 e4       	ldi	r21, 0x45	; 69
     39e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     3a2:	dc 01       	movw	r26, r24
     3a4:	cb 01       	movw	r24, r22
     3a6:	8f a3       	std	Y+39, r24	; 0x27
     3a8:	98 a7       	std	Y+40, r25	; 0x28
     3aa:	a9 a7       	std	Y+41, r26	; 0x29
     3ac:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
     3ae:	11 e0       	ldi	r17, 0x01	; 1
     3b0:	6f a1       	ldd	r22, Y+39	; 0x27
     3b2:	78 a5       	ldd	r23, Y+40	; 0x28
     3b4:	89 a5       	ldd	r24, Y+41	; 0x29
     3b6:	9a a5       	ldd	r25, Y+42	; 0x2a
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	40 e8       	ldi	r20, 0x80	; 128
     3be:	5f e3       	ldi	r21, 0x3F	; 63
     3c0:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     3c4:	88 23       	and	r24, r24
     3c6:	0c f0       	brlt	.+2      	; 0x3ca <SEND_TO_LCD+0x334>
     3c8:	10 e0       	ldi	r17, 0x00	; 0
     3ca:	11 23       	and	r17, r17
     3cc:	29 f0       	breq	.+10     	; 0x3d8 <SEND_TO_LCD+0x342>
		__ticks = 1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	9c a7       	std	Y+44, r25	; 0x2c
     3d4:	8b a7       	std	Y+43, r24	; 0x2b
     3d6:	46 c0       	rjmp	.+140    	; 0x464 <SEND_TO_LCD+0x3ce>
	else if (__tmp > 65535)
     3d8:	11 e0       	ldi	r17, 0x01	; 1
     3da:	6f a1       	ldd	r22, Y+39	; 0x27
     3dc:	78 a5       	ldd	r23, Y+40	; 0x28
     3de:	89 a5       	ldd	r24, Y+41	; 0x29
     3e0:	9a a5       	ldd	r25, Y+42	; 0x2a
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	3f ef       	ldi	r19, 0xFF	; 255
     3e6:	4f e7       	ldi	r20, 0x7F	; 127
     3e8:	57 e4       	ldi	r21, 0x47	; 71
     3ea:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     3ee:	18 16       	cp	r1, r24
     3f0:	0c f0       	brlt	.+2      	; 0x3f4 <SEND_TO_LCD+0x35e>
     3f2:	10 e0       	ldi	r17, 0x00	; 0
     3f4:	11 23       	and	r17, r17
     3f6:	61 f1       	breq	.+88     	; 0x450 <SEND_TO_LCD+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f8:	6b a1       	ldd	r22, Y+35	; 0x23
     3fa:	7c a1       	ldd	r23, Y+36	; 0x24
     3fc:	8d a1       	ldd	r24, Y+37	; 0x25
     3fe:	9e a1       	ldd	r25, Y+38	; 0x26
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e2       	ldi	r20, 0x20	; 32
     406:	51 e4       	ldi	r21, 0x41	; 65
     408:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	bc 01       	movw	r22, r24
     412:	cd 01       	movw	r24, r26
     414:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     418:	dc 01       	movw	r26, r24
     41a:	cb 01       	movw	r24, r22
     41c:	9c a7       	std	Y+44, r25	; 0x2c
     41e:	8b a7       	std	Y+43, r24	; 0x2b
     420:	12 c0       	rjmp	.+36     	; 0x446 <SEND_TO_LCD+0x3b0>
     422:	80 e9       	ldi	r24, 0x90	; 144
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	9e a7       	std	Y+46, r25	; 0x2e
     428:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     42a:	8d a5       	ldd	r24, Y+45	; 0x2d
     42c:	9e a5       	ldd	r25, Y+46	; 0x2e
     42e:	8c 01       	movw	r16, r24
     430:	c8 01       	movw	r24, r16
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <SEND_TO_LCD+0x39c>
     436:	8c 01       	movw	r16, r24
     438:	1e a7       	std	Y+46, r17	; 0x2e
     43a:	0d a7       	std	Y+45, r16	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     43c:	8b a5       	ldd	r24, Y+43	; 0x2b
     43e:	9c a5       	ldd	r25, Y+44	; 0x2c
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	9c a7       	std	Y+44, r25	; 0x2c
     444:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     446:	8b a5       	ldd	r24, Y+43	; 0x2b
     448:	9c a5       	ldd	r25, Y+44	; 0x2c
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	51 f7       	brne	.-44     	; 0x422 <SEND_TO_LCD+0x38c>
     44e:	28 c0       	rjmp	.+80     	; 0x4a0 <SEND_TO_LCD+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     450:	6f a1       	ldd	r22, Y+39	; 0x27
     452:	78 a5       	ldd	r23, Y+40	; 0x28
     454:	89 a5       	ldd	r24, Y+41	; 0x29
     456:	9a a5       	ldd	r25, Y+42	; 0x2a
     458:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	9c a7       	std	Y+44, r25	; 0x2c
     462:	8b a7       	std	Y+43, r24	; 0x2b
     464:	8b a5       	ldd	r24, Y+43	; 0x2b
     466:	9c a5       	ldd	r25, Y+44	; 0x2c
     468:	98 ab       	std	Y+48, r25	; 0x30
     46a:	8f a7       	std	Y+47, r24	; 0x2f
     46c:	8f a5       	ldd	r24, Y+47	; 0x2f
     46e:	98 a9       	ldd	r25, Y+48	; 0x30
     470:	8c 01       	movw	r16, r24
     472:	f8 01       	movw	r30, r16
     474:	31 97       	sbiw	r30, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <SEND_TO_LCD+0x3de>
     478:	8f 01       	movw	r16, r30
     47a:	18 ab       	std	Y+48, r17	; 0x30
     47c:	0f a7       	std	Y+47, r16	; 0x2f
     47e:	10 c0       	rjmp	.+32     	; 0x4a0 <SEND_TO_LCD+0x40a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     480:	6e 8d       	ldd	r22, Y+30	; 0x1e
     482:	7f 8d       	ldd	r23, Y+31	; 0x1f
     484:	88 a1       	ldd	r24, Y+32	; 0x20
     486:	99 a1       	ldd	r25, Y+33	; 0x21
     488:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	8a a3       	std	Y+34, r24	; 0x22
     492:	8a a1       	ldd	r24, Y+34	; 0x22
     494:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     496:	89 a9       	ldd	r24, Y+49	; 0x31
     498:	18 2f       	mov	r17, r24
     49a:	1a 95       	dec	r17
     49c:	f1 f7       	brne	.-4      	; 0x49a <SEND_TO_LCD+0x404>
     49e:	19 ab       	std	Y+49, r17	; 0x31
     4a0:	88 e2       	ldi	r24, 0x28	; 40
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	2f ef       	ldi	r18, 0xFF	; 255
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	a0 e8       	ldi	r26, 0x80	; 128
     4b0:	bf e3       	ldi	r27, 0x3F	; 63
     4b2:	8a ab       	std	Y+50, r24	; 0x32
     4b4:	9b ab       	std	Y+51, r25	; 0x33
     4b6:	ac ab       	std	Y+52, r26	; 0x34
     4b8:	bd ab       	std	Y+53, r27	; 0x35
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     4ba:	6a a9       	ldd	r22, Y+50	; 0x32
     4bc:	7b a9       	ldd	r23, Y+51	; 0x33
     4be:	8c a9       	ldd	r24, Y+52	; 0x34
     4c0:	9d a9       	ldd	r25, Y+53	; 0x35
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	4a e7       	ldi	r20, 0x7A	; 122
     4c8:	55 e4       	ldi	r21, 0x45	; 69
     4ca:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	8e ab       	std	Y+54, r24	; 0x36
     4d4:	9f ab       	std	Y+55, r25	; 0x37
     4d6:	a8 af       	std	Y+56, r26	; 0x38
     4d8:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
     4da:	11 e0       	ldi	r17, 0x01	; 1
     4dc:	6e a9       	ldd	r22, Y+54	; 0x36
     4de:	7f a9       	ldd	r23, Y+55	; 0x37
     4e0:	88 ad       	ldd	r24, Y+56	; 0x38
     4e2:	99 ad       	ldd	r25, Y+57	; 0x39
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e8       	ldi	r20, 0x80	; 128
     4ea:	5f e3       	ldi	r21, 0x3F	; 63
     4ec:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     4f0:	88 23       	and	r24, r24
     4f2:	0c f0       	brlt	.+2      	; 0x4f6 <SEND_TO_LCD+0x460>
     4f4:	10 e0       	ldi	r17, 0x00	; 0
     4f6:	11 23       	and	r17, r17
     4f8:	29 f0       	breq	.+10     	; 0x504 <SEND_TO_LCD+0x46e>
		__ticks = 1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9b af       	std	Y+59, r25	; 0x3b
     500:	8a af       	std	Y+58, r24	; 0x3a
     502:	46 c0       	rjmp	.+140    	; 0x590 <SEND_TO_LCD+0x4fa>
	else if (__tmp > 65535)
     504:	11 e0       	ldi	r17, 0x01	; 1
     506:	6e a9       	ldd	r22, Y+54	; 0x36
     508:	7f a9       	ldd	r23, Y+55	; 0x37
     50a:	88 ad       	ldd	r24, Y+56	; 0x38
     50c:	99 ad       	ldd	r25, Y+57	; 0x39
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	3f ef       	ldi	r19, 0xFF	; 255
     512:	4f e7       	ldi	r20, 0x7F	; 127
     514:	57 e4       	ldi	r21, 0x47	; 71
     516:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     51a:	18 16       	cp	r1, r24
     51c:	0c f0       	brlt	.+2      	; 0x520 <SEND_TO_LCD+0x48a>
     51e:	10 e0       	ldi	r17, 0x00	; 0
     520:	11 23       	and	r17, r17
     522:	61 f1       	breq	.+88     	; 0x57c <SEND_TO_LCD+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     524:	6a a9       	ldd	r22, Y+50	; 0x32
     526:	7b a9       	ldd	r23, Y+51	; 0x33
     528:	8c a9       	ldd	r24, Y+52	; 0x34
     52a:	9d a9       	ldd	r25, Y+53	; 0x35
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	40 e2       	ldi	r20, 0x20	; 32
     532:	51 e4       	ldi	r21, 0x41	; 65
     534:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	bc 01       	movw	r22, r24
     53e:	cd 01       	movw	r24, r26
     540:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     544:	dc 01       	movw	r26, r24
     546:	cb 01       	movw	r24, r22
     548:	9b af       	std	Y+59, r25	; 0x3b
     54a:	8a af       	std	Y+58, r24	; 0x3a
     54c:	12 c0       	rjmp	.+36     	; 0x572 <SEND_TO_LCD+0x4dc>
     54e:	80 e9       	ldi	r24, 0x90	; 144
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	9d af       	std	Y+61, r25	; 0x3d
     554:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     556:	8c ad       	ldd	r24, Y+60	; 0x3c
     558:	9d ad       	ldd	r25, Y+61	; 0x3d
     55a:	8c 01       	movw	r16, r24
     55c:	c8 01       	movw	r24, r16
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <SEND_TO_LCD+0x4c8>
     562:	8c 01       	movw	r16, r24
     564:	1d af       	std	Y+61, r17	; 0x3d
     566:	0c af       	std	Y+60, r16	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     568:	8a ad       	ldd	r24, Y+58	; 0x3a
     56a:	9b ad       	ldd	r25, Y+59	; 0x3b
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	9b af       	std	Y+59, r25	; 0x3b
     570:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     572:	8a ad       	ldd	r24, Y+58	; 0x3a
     574:	9b ad       	ldd	r25, Y+59	; 0x3b
     576:	00 97       	sbiw	r24, 0x00	; 0
     578:	51 f7       	brne	.-44     	; 0x54e <SEND_TO_LCD+0x4b8>
     57a:	17 c0       	rjmp	.+46     	; 0x5aa <SEND_TO_LCD+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     57c:	6e a9       	ldd	r22, Y+54	; 0x36
     57e:	7f a9       	ldd	r23, Y+55	; 0x37
     580:	88 ad       	ldd	r24, Y+56	; 0x38
     582:	99 ad       	ldd	r25, Y+57	; 0x39
     584:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	9b af       	std	Y+59, r25	; 0x3b
     58e:	8a af       	std	Y+58, r24	; 0x3a
     590:	8a ad       	ldd	r24, Y+58	; 0x3a
     592:	9b ad       	ldd	r25, Y+59	; 0x3b
     594:	9f af       	std	Y+63, r25	; 0x3f
     596:	8e af       	std	Y+62, r24	; 0x3e
     598:	8e ad       	ldd	r24, Y+62	; 0x3e
     59a:	9f ad       	ldd	r25, Y+63	; 0x3f
     59c:	8c 01       	movw	r16, r24
     59e:	f8 01       	movw	r30, r16
     5a0:	31 97       	sbiw	r30, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <SEND_TO_LCD+0x50a>
     5a4:	8f 01       	movw	r16, r30
     5a6:	1f af       	std	Y+63, r17	; 0x3f
     5a8:	0e af       	std	Y+62, r16	; 0x3e
	_delay_ms(1);
	control_lcd &= ~2 ;				// EN =0
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	8d 7f       	andi	r24, 0xFD	; 253
     5ae:	89 83       	std	Y+1, r24	; 0x01
	write_to_calc(lcd_ctrl_port,control_lcd);
     5b0:	88 e2       	ldi	r24, 0x28	; 40
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	2f ef       	ldi	r18, 0xFF	; 255
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
     5ba:	8a e2       	ldi	r24, 0x2A	; 42
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	2f ef       	ldi	r18, 0xFF	; 255
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
     5c4:	85 e2       	ldi	r24, 0x25	; 37
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	21 e0       	ldi	r18, 0x01	; 1
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
     5ce:	8b e2       	ldi	r24, 0x2B	; 43
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	29 81       	ldd	r18, Y+1	; 0x01
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
     5d8:	88 e2       	ldi	r24, 0x28	; 40
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	2d ef       	ldi	r18, 0xFD	; 253
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
     5e2:	9e 01       	movw	r18, r28
     5e4:	20 5c       	subi	r18, 0xC0	; 192
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a0 e2       	ldi	r26, 0x20	; 32
     5ee:	b1 e4       	ldi	r27, 0x41	; 65
     5f0:	f9 01       	movw	r30, r18
     5f2:	80 83       	st	Z, r24
     5f4:	91 83       	std	Z+1, r25	; 0x01
     5f6:	a2 83       	std	Z+2, r26	; 0x02
     5f8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     5fa:	8e 01       	movw	r16, r28
     5fc:	0c 5b       	subi	r16, 0xBC	; 188
     5fe:	1f 4f       	sbci	r17, 0xFF	; 255
     600:	ce 01       	movw	r24, r28
     602:	80 5c       	subi	r24, 0xC0	; 192
     604:	9f 4f       	sbci	r25, 0xFF	; 255
     606:	fc 01       	movw	r30, r24
     608:	60 81       	ld	r22, Z
     60a:	71 81       	ldd	r23, Z+1	; 0x01
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	2b ea       	ldi	r18, 0xAB	; 171
     612:	3a ea       	ldi	r19, 0xAA	; 170
     614:	4a ea       	ldi	r20, 0xAA	; 170
     616:	50 e4       	ldi	r21, 0x40	; 64
     618:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	f8 01       	movw	r30, r16
     622:	80 83       	st	Z, r24
     624:	91 83       	std	Z+1, r25	; 0x01
     626:	a2 83       	std	Z+2, r26	; 0x02
     628:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62a:	ce 01       	movw	r24, r28
     62c:	8c 5b       	subi	r24, 0xBC	; 188
     62e:	9f 4f       	sbci	r25, 0xFF	; 255
     630:	11 e0       	ldi	r17, 0x01	; 1
     632:	fc 01       	movw	r30, r24
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e8       	ldi	r20, 0x80	; 128
     642:	5f e3       	ldi	r21, 0x3F	; 63
     644:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     648:	88 23       	and	r24, r24
     64a:	0c f0       	brlt	.+2      	; 0x64e <SEND_TO_LCD+0x5b8>
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	11 23       	and	r17, r17
     650:	39 f0       	breq	.+14     	; 0x660 <SEND_TO_LCD+0x5ca>
		__ticks = 1;
     652:	ce 01       	movw	r24, r28
     654:	88 5b       	subi	r24, 0xB8	; 184
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
     65e:	05 c1       	rjmp	.+522    	; 0x86a <SEND_TO_LCD+0x7d4>
	else if (__tmp > 255)
     660:	ce 01       	movw	r24, r28
     662:	8c 5b       	subi	r24, 0xBC	; 188
     664:	9f 4f       	sbci	r25, 0xFF	; 255
     666:	11 e0       	ldi	r17, 0x01	; 1
     668:	fc 01       	movw	r30, r24
     66a:	60 81       	ld	r22, Z
     66c:	71 81       	ldd	r23, Z+1	; 0x01
     66e:	82 81       	ldd	r24, Z+2	; 0x02
     670:	93 81       	ldd	r25, Z+3	; 0x03
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	4f e7       	ldi	r20, 0x7F	; 127
     678:	53 e4       	ldi	r21, 0x43	; 67
     67a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     67e:	18 16       	cp	r1, r24
     680:	0c f0       	brlt	.+2      	; 0x684 <SEND_TO_LCD+0x5ee>
     682:	10 e0       	ldi	r17, 0x00	; 0
     684:	11 23       	and	r17, r17
     686:	09 f4       	brne	.+2      	; 0x68a <SEND_TO_LCD+0x5f4>
     688:	df c0       	rjmp	.+446    	; 0x848 <SEND_TO_LCD+0x7b2>
	{
		_delay_ms(__us / 1000.0);
     68a:	ce 01       	movw	r24, r28
     68c:	80 5c       	subi	r24, 0xC0	; 192
     68e:	9f 4f       	sbci	r25, 0xFF	; 255
     690:	fc 01       	movw	r30, r24
     692:	60 81       	ld	r22, Z
     694:	71 81       	ldd	r23, Z+1	; 0x01
     696:	82 81       	ldd	r24, Z+2	; 0x02
     698:	93 81       	ldd	r25, Z+3	; 0x03
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	4a e7       	ldi	r20, 0x7A	; 122
     6a0:	54 e4       	ldi	r21, 0x44	; 68
     6a2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__divsf3>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	9e 01       	movw	r18, r28
     6ac:	27 5b       	subi	r18, 0xB7	; 183
     6ae:	3f 4f       	sbci	r19, 0xFF	; 255
     6b0:	f9 01       	movw	r30, r18
     6b2:	80 83       	st	Z, r24
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	a2 83       	std	Z+2, r26	; 0x02
     6b8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     6ba:	8e 01       	movw	r16, r28
     6bc:	03 5b       	subi	r16, 0xB3	; 179
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
     6c0:	ce 01       	movw	r24, r28
     6c2:	87 5b       	subi	r24, 0xB7	; 183
     6c4:	9f 4f       	sbci	r25, 0xFF	; 255
     6c6:	fc 01       	movw	r30, r24
     6c8:	60 81       	ld	r22, Z
     6ca:	71 81       	ldd	r23, Z+1	; 0x01
     6cc:	82 81       	ldd	r24, Z+2	; 0x02
     6ce:	93 81       	ldd	r25, Z+3	; 0x03
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	4a e7       	ldi	r20, 0x7A	; 122
     6d6:	55 e4       	ldi	r21, 0x45	; 69
     6d8:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	f8 01       	movw	r30, r16
     6e2:	80 83       	st	Z, r24
     6e4:	91 83       	std	Z+1, r25	; 0x01
     6e6:	a2 83       	std	Z+2, r26	; 0x02
     6e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6ea:	ce 01       	movw	r24, r28
     6ec:	83 5b       	subi	r24, 0xB3	; 179
     6ee:	9f 4f       	sbci	r25, 0xFF	; 255
     6f0:	11 e0       	ldi	r17, 0x01	; 1
     6f2:	fc 01       	movw	r30, r24
     6f4:	60 81       	ld	r22, Z
     6f6:	71 81       	ldd	r23, Z+1	; 0x01
     6f8:	82 81       	ldd	r24, Z+2	; 0x02
     6fa:	93 81       	ldd	r25, Z+3	; 0x03
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e8       	ldi	r20, 0x80	; 128
     702:	5f e3       	ldi	r21, 0x3F	; 63
     704:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     708:	88 23       	and	r24, r24
     70a:	0c f0       	brlt	.+2      	; 0x70e <SEND_TO_LCD+0x678>
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	11 23       	and	r17, r17
     710:	49 f0       	breq	.+18     	; 0x724 <SEND_TO_LCD+0x68e>
		__ticks = 1;
     712:	ce 01       	movw	r24, r28
     714:	8f 5a       	subi	r24, 0xAF	; 175
     716:	9f 4f       	sbci	r25, 0xFF	; 255
     718:	21 e0       	ldi	r18, 0x01	; 1
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	fc 01       	movw	r30, r24
     71e:	31 83       	std	Z+1, r19	; 0x01
     720:	20 83       	st	Z, r18
     722:	74 c0       	rjmp	.+232    	; 0x80c <SEND_TO_LCD+0x776>
	else if (__tmp > 65535)
     724:	ce 01       	movw	r24, r28
     726:	83 5b       	subi	r24, 0xB3	; 179
     728:	9f 4f       	sbci	r25, 0xFF	; 255
     72a:	11 e0       	ldi	r17, 0x01	; 1
     72c:	fc 01       	movw	r30, r24
     72e:	60 81       	ld	r22, Z
     730:	71 81       	ldd	r23, Z+1	; 0x01
     732:	82 81       	ldd	r24, Z+2	; 0x02
     734:	93 81       	ldd	r25, Z+3	; 0x03
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	3f ef       	ldi	r19, 0xFF	; 255
     73a:	4f e7       	ldi	r20, 0x7F	; 127
     73c:	57 e4       	ldi	r21, 0x47	; 71
     73e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     742:	18 16       	cp	r1, r24
     744:	0c f0       	brlt	.+2      	; 0x748 <SEND_TO_LCD+0x6b2>
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	11 23       	and	r17, r17
     74a:	09 f4       	brne	.+2      	; 0x74e <SEND_TO_LCD+0x6b8>
     74c:	4d c0       	rjmp	.+154    	; 0x7e8 <SEND_TO_LCD+0x752>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     74e:	ce 01       	movw	r24, r28
     750:	87 5b       	subi	r24, 0xB7	; 183
     752:	9f 4f       	sbci	r25, 0xFF	; 255
     754:	fc 01       	movw	r30, r24
     756:	60 81       	ld	r22, Z
     758:	71 81       	ldd	r23, Z+1	; 0x01
     75a:	82 81       	ldd	r24, Z+2	; 0x02
     75c:	93 81       	ldd	r25, Z+3	; 0x03
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e2       	ldi	r20, 0x20	; 32
     764:	51 e4       	ldi	r21, 0x41	; 65
     766:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	8e 01       	movw	r16, r28
     770:	0f 5a       	subi	r16, 0xAF	; 175
     772:	1f 4f       	sbci	r17, 0xFF	; 255
     774:	bc 01       	movw	r22, r24
     776:	cd 01       	movw	r24, r26
     778:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	f8 01       	movw	r30, r16
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
     786:	27 c0       	rjmp	.+78     	; 0x7d6 <SEND_TO_LCD+0x740>
     788:	ce 01       	movw	r24, r28
     78a:	8d 5a       	subi	r24, 0xAD	; 173
     78c:	9f 4f       	sbci	r25, 0xFF	; 255
     78e:	20 e9       	ldi	r18, 0x90	; 144
     790:	31 e0       	ldi	r19, 0x01	; 1
     792:	fc 01       	movw	r30, r24
     794:	31 83       	std	Z+1, r19	; 0x01
     796:	20 83       	st	Z, r18
     798:	ce 01       	movw	r24, r28
     79a:	8d 5a       	subi	r24, 0xAD	; 173
     79c:	9f 4f       	sbci	r25, 0xFF	; 255
     79e:	fc 01       	movw	r30, r24
     7a0:	80 81       	ld	r24, Z
     7a2:	91 81       	ldd	r25, Z+1	; 0x01
     7a4:	8c 01       	movw	r16, r24
     7a6:	c8 01       	movw	r24, r16
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <SEND_TO_LCD+0x712>
     7ac:	8c 01       	movw	r16, r24
     7ae:	ce 01       	movw	r24, r28
     7b0:	8d 5a       	subi	r24, 0xAD	; 173
     7b2:	9f 4f       	sbci	r25, 0xFF	; 255
     7b4:	fc 01       	movw	r30, r24
     7b6:	11 83       	std	Z+1, r17	; 0x01
     7b8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ba:	ce 01       	movw	r24, r28
     7bc:	8f 5a       	subi	r24, 0xAF	; 175
     7be:	9f 4f       	sbci	r25, 0xFF	; 255
     7c0:	9e 01       	movw	r18, r28
     7c2:	2f 5a       	subi	r18, 0xAF	; 175
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	31 81       	ldd	r19, Z+1	; 0x01
     7cc:	21 50       	subi	r18, 0x01	; 1
     7ce:	30 40       	sbci	r19, 0x00	; 0
     7d0:	fc 01       	movw	r30, r24
     7d2:	31 83       	std	Z+1, r19	; 0x01
     7d4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d6:	ce 01       	movw	r24, r28
     7d8:	8f 5a       	subi	r24, 0xAF	; 175
     7da:	9f 4f       	sbci	r25, 0xFF	; 255
     7dc:	fc 01       	movw	r30, r24
     7de:	80 81       	ld	r24, Z
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	00 97       	sbiw	r24, 0x00	; 0
     7e4:	89 f6       	brne	.-94     	; 0x788 <SEND_TO_LCD+0x6f2>
     7e6:	58 c0       	rjmp	.+176    	; 0x898 <SEND_TO_LCD+0x802>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7e8:	8e 01       	movw	r16, r28
     7ea:	0f 5a       	subi	r16, 0xAF	; 175
     7ec:	1f 4f       	sbci	r17, 0xFF	; 255
     7ee:	ce 01       	movw	r24, r28
     7f0:	83 5b       	subi	r24, 0xB3	; 179
     7f2:	9f 4f       	sbci	r25, 0xFF	; 255
     7f4:	fc 01       	movw	r30, r24
     7f6:	60 81       	ld	r22, Z
     7f8:	71 81       	ldd	r23, Z+1	; 0x01
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
     7fc:	93 81       	ldd	r25, Z+3	; 0x03
     7fe:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     802:	dc 01       	movw	r26, r24
     804:	cb 01       	movw	r24, r22
     806:	f8 01       	movw	r30, r16
     808:	91 83       	std	Z+1, r25	; 0x01
     80a:	80 83       	st	Z, r24
     80c:	ce 01       	movw	r24, r28
     80e:	8b 5a       	subi	r24, 0xAB	; 171
     810:	9f 4f       	sbci	r25, 0xFF	; 255
     812:	9e 01       	movw	r18, r28
     814:	2f 5a       	subi	r18, 0xAF	; 175
     816:	3f 4f       	sbci	r19, 0xFF	; 255
     818:	f9 01       	movw	r30, r18
     81a:	20 81       	ld	r18, Z
     81c:	31 81       	ldd	r19, Z+1	; 0x01
     81e:	fc 01       	movw	r30, r24
     820:	31 83       	std	Z+1, r19	; 0x01
     822:	20 83       	st	Z, r18
     824:	ce 01       	movw	r24, r28
     826:	8b 5a       	subi	r24, 0xAB	; 171
     828:	9f 4f       	sbci	r25, 0xFF	; 255
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	91 81       	ldd	r25, Z+1	; 0x01
     830:	8c 01       	movw	r16, r24
     832:	c8 01       	movw	r24, r16
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <SEND_TO_LCD+0x79e>
     838:	8c 01       	movw	r16, r24
     83a:	ce 01       	movw	r24, r28
     83c:	8b 5a       	subi	r24, 0xAB	; 171
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	fc 01       	movw	r30, r24
     842:	11 83       	std	Z+1, r17	; 0x01
     844:	00 83       	st	Z, r16
     846:	28 c0       	rjmp	.+80     	; 0x898 <SEND_TO_LCD+0x802>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     848:	8e 01       	movw	r16, r28
     84a:	08 5b       	subi	r16, 0xB8	; 184
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	ce 01       	movw	r24, r28
     850:	8c 5b       	subi	r24, 0xBC	; 188
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	fc 01       	movw	r30, r24
     856:	60 81       	ld	r22, Z
     858:	71 81       	ldd	r23, Z+1	; 0x01
     85a:	82 81       	ldd	r24, Z+2	; 0x02
     85c:	93 81       	ldd	r25, Z+3	; 0x03
     85e:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	f8 01       	movw	r30, r16
     868:	80 83       	st	Z, r24
     86a:	ce 01       	movw	r24, r28
     86c:	89 5a       	subi	r24, 0xA9	; 169
     86e:	9f 4f       	sbci	r25, 0xFF	; 255
     870:	9e 01       	movw	r18, r28
     872:	28 5b       	subi	r18, 0xB8	; 184
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	f9 01       	movw	r30, r18
     878:	20 81       	ld	r18, Z
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     87e:	ce 01       	movw	r24, r28
     880:	89 5a       	subi	r24, 0xA9	; 169
     882:	9f 4f       	sbci	r25, 0xFF	; 255
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	18 2f       	mov	r17, r24
     88a:	1a 95       	dec	r17
     88c:	f1 f7       	brne	.-4      	; 0x88a <SEND_TO_LCD+0x7f4>
     88e:	ce 01       	movw	r24, r28
     890:	89 5a       	subi	r24, 0xA9	; 169
     892:	9f 4f       	sbci	r25, 0xFF	; 255
     894:	fc 01       	movw	r30, r24
     896:	10 83       	st	Z, r17
     898:	88 e2       	ldi	r24, 0x28	; 40
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	2f ef       	ldi	r18, 0xFF	; 255
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
}
     8a2:	c7 5a       	subi	r28, 0xA7	; 167
     8a4:	df 4f       	sbci	r29, 0xFF	; 255
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	cf 91       	pop	r28
     8b2:	df 91       	pop	r29
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	08 95       	ret

000008ba <INIT_LCD>:

void INIT_LCD()
{
     8ba:	df 93       	push	r29
     8bc:	cf 93       	push	r28
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
	SEND_TO_LCD(set_size,CMD);
     8c2:	88 e3       	ldi	r24, 0x38	; 56
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	0e 94 4b 00 	call	0x96	; 0x96 <SEND_TO_LCD>
	SEND_TO_LCD(clr,CMD);
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	0e 94 4b 00 	call	0x96	; 0x96 <SEND_TO_LCD>
	SEND_TO_LCD(display_on,CMD)	;
     8d2:	8e e0       	ldi	r24, 0x0E	; 14
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	0e 94 4b 00 	call	0x96	; 0x96 <SEND_TO_LCD>
}
     8da:	cf 91       	pop	r28
     8dc:	df 91       	pop	r29
     8de:	08 95       	ret

000008e0 <write_to_LCD>:

void write_to_LCD(char ch){
     8e0:	df 93       	push	r29
     8e2:	cf 93       	push	r28
     8e4:	0f 92       	push	r0
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	89 83       	std	Y+1, r24	; 0x01
	SEND_TO_LCD(ch,DATA);
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	0e 94 4b 00 	call	0x96	; 0x96 <SEND_TO_LCD>
}
     8f4:	0f 90       	pop	r0
     8f6:	cf 91       	pop	r28
     8f8:	df 91       	pop	r29
     8fa:	08 95       	ret

000008fc <print_to_LCD>:

void print_to_LCD(char *str){
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	00 d0       	rcall	.+0      	; 0x902 <__stack+0x3>
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	9a 83       	std	Y+2, r25	; 0x02
     908:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
     90a:	0b c0       	rjmp	.+22     	; 0x922 <__stack+0x23>
	{
		write_to_LCD(*str);
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	9a 81       	ldd	r25, Y+2	; 0x02
     910:	fc 01       	movw	r30, r24
     912:	80 81       	ld	r24, Z
     914:	0e 94 70 04 	call	0x8e0	; 0x8e0 <write_to_LCD>
		str++;
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	9a 81       	ldd	r25, Y+2	; 0x02
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	9a 83       	std	Y+2, r25	; 0x02
     920:	89 83       	std	Y+1, r24	; 0x01
void write_to_LCD(char ch){
	SEND_TO_LCD(ch,DATA);
}

void print_to_LCD(char *str){
	while(*str != '\0')
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	fc 01       	movw	r30, r24
     928:	80 81       	ld	r24, Z
     92a:	88 23       	and	r24, r24
     92c:	79 f7       	brne	.-34     	; 0x90c <__stack+0xd>
	{
		write_to_LCD(*str);
		str++;
	}
}
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	cf 91       	pop	r28
     934:	df 91       	pop	r29
     936:	08 95       	ret

00000938 <get_key_presed>:

char get_key_presed(){
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	df 93       	push	r29
     93e:	cf 93       	push	r28
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	c5 55       	subi	r28, 0x55	; 85
     946:	d0 40       	sbci	r29, 0x00	; 0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
	uint8_t OUT_VAL[4] ={0XEF,0XDF,0XBF,0X7F};
     952:	ce 01       	movw	r24, r28
     954:	8e 5b       	subi	r24, 0xBE	; 190
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	2f ee       	ldi	r18, 0xEF	; 239
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18
     95e:	ce 01       	movw	r24, r28
     960:	8e 5b       	subi	r24, 0xBE	; 190
     962:	9f 4f       	sbci	r25, 0xFF	; 255
     964:	2f ed       	ldi	r18, 0xDF	; 223
     966:	fc 01       	movw	r30, r24
     968:	21 83       	std	Z+1, r18	; 0x01
     96a:	ce 01       	movw	r24, r28
     96c:	8e 5b       	subi	r24, 0xBE	; 190
     96e:	9f 4f       	sbci	r25, 0xFF	; 255
     970:	2f eb       	ldi	r18, 0xBF	; 191
     972:	fc 01       	movw	r30, r24
     974:	22 83       	std	Z+2, r18	; 0x02
     976:	ce 01       	movw	r24, r28
     978:	8e 5b       	subi	r24, 0xBE	; 190
     97a:	9f 4f       	sbci	r25, 0xFF	; 255
     97c:	2f e7       	ldi	r18, 0x7F	; 127
     97e:	fc 01       	movw	r30, r24
     980:	23 83       	std	Z+3, r18	; 0x03
	uint8_t IN_VAL[4][4] ={{0XEE,0XED,0XEB,0XE7},
     982:	ce 01       	movw	r24, r28
     984:	8a 5b       	subi	r24, 0xBA	; 186
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	26 e1       	ldi	r18, 0x16	; 22
     98a:	31 e0       	ldi	r19, 0x01	; 1
     98c:	40 e1       	ldi	r20, 0x10	; 16
     98e:	f9 01       	movw	r30, r18
     990:	00 80       	ld	r0, Z
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	fc 01       	movw	r30, r24
     998:	00 82       	st	Z, r0
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	41 50       	subi	r20, 0x01	; 1
     99e:	44 23       	and	r20, r20
     9a0:	b1 f7       	brne	.-20     	; 0x98e <get_key_presed+0x56>
						{0XDE,0XDD,0XDB,0XD7},
						{0XBE,0XBD,0XBB,0XB7},
						{0X7E,0X7D,0X7B,0X77}};
	while (1)
	{
			for (uint8_t i=0,tmp;i<4;i++)
     9a2:	19 82       	std	Y+1, r1	; 0x01
     9a4:	c8 c2       	rjmp	.+1424   	; 0xf36 <get_key_presed+0x5fe>
			{
				write_to_calc(keypad_port,OUT_VAL[i]);
     9a6:	88 e2       	ldi	r24, 0x28	; 40
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	2f ef       	ldi	r18, 0xFF	; 255
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
     9b0:	8a e2       	ldi	r24, 0x2A	; 42
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
     9ba:	85 e2       	ldi	r24, 0x25	; 37
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	22 e0       	ldi	r18, 0x02	; 2
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18
     9c4:	8b e2       	ldi	r24, 0x2B	; 43
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	29 81       	ldd	r18, Y+1	; 0x01
     9ca:	22 2f       	mov	r18, r18
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	ae 01       	movw	r20, r28
     9d0:	4e 5b       	subi	r20, 0xBE	; 190
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	24 0f       	add	r18, r20
     9d6:	35 1f       	adc	r19, r21
     9d8:	f9 01       	movw	r30, r18
     9da:	20 81       	ld	r18, Z
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
     9e0:	88 e2       	ldi	r24, 0x28	; 40
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	2d ef       	ldi	r18, 0xFD	; 253
     9e6:	fc 01       	movw	r30, r24
     9e8:	20 83       	st	Z, r18
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a0 e2       	ldi	r26, 0x20	; 32
     9f0:	b1 e4       	ldi	r27, 0x41	; 65
     9f2:	8c 83       	std	Y+4, r24	; 0x04
     9f4:	9d 83       	std	Y+5, r25	; 0x05
     9f6:	ae 83       	std	Y+6, r26	; 0x06
     9f8:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     9fa:	6c 81       	ldd	r22, Y+4	; 0x04
     9fc:	7d 81       	ldd	r23, Y+5	; 0x05
     9fe:	8e 81       	ldd	r24, Y+6	; 0x06
     a00:	9f 81       	ldd	r25, Y+7	; 0x07
     a02:	2b ea       	ldi	r18, 0xAB	; 171
     a04:	3a ea       	ldi	r19, 0xAA	; 170
     a06:	4a ea       	ldi	r20, 0xAA	; 170
     a08:	50 e4       	ldi	r21, 0x40	; 64
     a0a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     a0e:	dc 01       	movw	r26, r24
     a10:	cb 01       	movw	r24, r22
     a12:	88 87       	std	Y+8, r24	; 0x08
     a14:	99 87       	std	Y+9, r25	; 0x09
     a16:	aa 87       	std	Y+10, r26	; 0x0a
     a18:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     a1a:	11 e0       	ldi	r17, 0x01	; 1
     a1c:	68 85       	ldd	r22, Y+8	; 0x08
     a1e:	79 85       	ldd	r23, Y+9	; 0x09
     a20:	8a 85       	ldd	r24, Y+10	; 0x0a
     a22:	9b 85       	ldd	r25, Y+11	; 0x0b
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e8       	ldi	r20, 0x80	; 128
     a2a:	5f e3       	ldi	r21, 0x3F	; 63
     a2c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     a30:	88 23       	and	r24, r24
     a32:	0c f0       	brlt	.+2      	; 0xa36 <get_key_presed+0xfe>
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	11 23       	and	r17, r17
     a38:	19 f0       	breq	.+6      	; 0xa40 <get_key_presed+0x108>
		__ticks = 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	8c 87       	std	Y+12, r24	; 0x0c
     a3e:	a3 c0       	rjmp	.+326    	; 0xb86 <get_key_presed+0x24e>
	else if (__tmp > 255)
     a40:	11 e0       	ldi	r17, 0x01	; 1
     a42:	68 85       	ldd	r22, Y+8	; 0x08
     a44:	79 85       	ldd	r23, Y+9	; 0x09
     a46:	8a 85       	ldd	r24, Y+10	; 0x0a
     a48:	9b 85       	ldd	r25, Y+11	; 0x0b
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	4f e7       	ldi	r20, 0x7F	; 127
     a50:	53 e4       	ldi	r21, 0x43	; 67
     a52:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     a56:	18 16       	cp	r1, r24
     a58:	0c f0       	brlt	.+2      	; 0xa5c <get_key_presed+0x124>
     a5a:	10 e0       	ldi	r17, 0x00	; 0
     a5c:	11 23       	and	r17, r17
     a5e:	09 f4       	brne	.+2      	; 0xa62 <get_key_presed+0x12a>
     a60:	89 c0       	rjmp	.+274    	; 0xb74 <get_key_presed+0x23c>
	{
		_delay_ms(__us / 1000.0);
     a62:	6c 81       	ldd	r22, Y+4	; 0x04
     a64:	7d 81       	ldd	r23, Y+5	; 0x05
     a66:	8e 81       	ldd	r24, Y+6	; 0x06
     a68:	9f 81       	ldd	r25, Y+7	; 0x07
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	4a e7       	ldi	r20, 0x7A	; 122
     a70:	54 e4       	ldi	r21, 0x44	; 68
     a72:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__divsf3>
     a76:	dc 01       	movw	r26, r24
     a78:	cb 01       	movw	r24, r22
     a7a:	8d 87       	std	Y+13, r24	; 0x0d
     a7c:	9e 87       	std	Y+14, r25	; 0x0e
     a7e:	af 87       	std	Y+15, r26	; 0x0f
     a80:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     a82:	6d 85       	ldd	r22, Y+13	; 0x0d
     a84:	7e 85       	ldd	r23, Y+14	; 0x0e
     a86:	8f 85       	ldd	r24, Y+15	; 0x0f
     a88:	98 89       	ldd	r25, Y+16	; 0x10
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	4a e7       	ldi	r20, 0x7A	; 122
     a90:	55 e4       	ldi	r21, 0x45	; 69
     a92:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	89 8b       	std	Y+17, r24	; 0x11
     a9c:	9a 8b       	std	Y+18, r25	; 0x12
     a9e:	ab 8b       	std	Y+19, r26	; 0x13
     aa0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     aa2:	11 e0       	ldi	r17, 0x01	; 1
     aa4:	69 89       	ldd	r22, Y+17	; 0x11
     aa6:	7a 89       	ldd	r23, Y+18	; 0x12
     aa8:	8b 89       	ldd	r24, Y+19	; 0x13
     aaa:	9c 89       	ldd	r25, Y+20	; 0x14
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e8       	ldi	r20, 0x80	; 128
     ab2:	5f e3       	ldi	r21, 0x3F	; 63
     ab4:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     ab8:	88 23       	and	r24, r24
     aba:	0c f0       	brlt	.+2      	; 0xabe <get_key_presed+0x186>
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	11 23       	and	r17, r17
     ac0:	29 f0       	breq	.+10     	; 0xacc <get_key_presed+0x194>
		__ticks = 1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	9e 8b       	std	Y+22, r25	; 0x16
     ac8:	8d 8b       	std	Y+21, r24	; 0x15
     aca:	46 c0       	rjmp	.+140    	; 0xb58 <get_key_presed+0x220>
	else if (__tmp > 65535)
     acc:	11 e0       	ldi	r17, 0x01	; 1
     ace:	69 89       	ldd	r22, Y+17	; 0x11
     ad0:	7a 89       	ldd	r23, Y+18	; 0x12
     ad2:	8b 89       	ldd	r24, Y+19	; 0x13
     ad4:	9c 89       	ldd	r25, Y+20	; 0x14
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	3f ef       	ldi	r19, 0xFF	; 255
     ada:	4f e7       	ldi	r20, 0x7F	; 127
     adc:	57 e4       	ldi	r21, 0x47	; 71
     ade:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     ae2:	18 16       	cp	r1, r24
     ae4:	0c f0       	brlt	.+2      	; 0xae8 <get_key_presed+0x1b0>
     ae6:	10 e0       	ldi	r17, 0x00	; 0
     ae8:	11 23       	and	r17, r17
     aea:	61 f1       	breq	.+88     	; 0xb44 <get_key_presed+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aec:	6d 85       	ldd	r22, Y+13	; 0x0d
     aee:	7e 85       	ldd	r23, Y+14	; 0x0e
     af0:	8f 85       	ldd	r24, Y+15	; 0x0f
     af2:	98 89       	ldd	r25, Y+16	; 0x10
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e2       	ldi	r20, 0x20	; 32
     afa:	51 e4       	ldi	r21, 0x41	; 65
     afc:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     b00:	dc 01       	movw	r26, r24
     b02:	cb 01       	movw	r24, r22
     b04:	bc 01       	movw	r22, r24
     b06:	cd 01       	movw	r24, r26
     b08:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	9e 8b       	std	Y+22, r25	; 0x16
     b12:	8d 8b       	std	Y+21, r24	; 0x15
     b14:	12 c0       	rjmp	.+36     	; 0xb3a <get_key_presed+0x202>
     b16:	80 e9       	ldi	r24, 0x90	; 144
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	98 8f       	std	Y+24, r25	; 0x18
     b1c:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b1e:	8f 89       	ldd	r24, Y+23	; 0x17
     b20:	98 8d       	ldd	r25, Y+24	; 0x18
     b22:	8c 01       	movw	r16, r24
     b24:	c8 01       	movw	r24, r16
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <get_key_presed+0x1ee>
     b2a:	8c 01       	movw	r16, r24
     b2c:	18 8f       	std	Y+24, r17	; 0x18
     b2e:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b30:	8d 89       	ldd	r24, Y+21	; 0x15
     b32:	9e 89       	ldd	r25, Y+22	; 0x16
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	9e 8b       	std	Y+22, r25	; 0x16
     b38:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b3a:	8d 89       	ldd	r24, Y+21	; 0x15
     b3c:	9e 89       	ldd	r25, Y+22	; 0x16
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	51 f7       	brne	.-44     	; 0xb16 <get_key_presed+0x1de>
     b42:	28 c0       	rjmp	.+80     	; 0xb94 <get_key_presed+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b44:	69 89       	ldd	r22, Y+17	; 0x11
     b46:	7a 89       	ldd	r23, Y+18	; 0x12
     b48:	8b 89       	ldd	r24, Y+19	; 0x13
     b4a:	9c 89       	ldd	r25, Y+20	; 0x14
     b4c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	9e 8b       	std	Y+22, r25	; 0x16
     b56:	8d 8b       	std	Y+21, r24	; 0x15
     b58:	8d 89       	ldd	r24, Y+21	; 0x15
     b5a:	9e 89       	ldd	r25, Y+22	; 0x16
     b5c:	9a 8f       	std	Y+26, r25	; 0x1a
     b5e:	89 8f       	std	Y+25, r24	; 0x19
     b60:	89 8d       	ldd	r24, Y+25	; 0x19
     b62:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b64:	8c 01       	movw	r16, r24
     b66:	f8 01       	movw	r30, r16
     b68:	31 97       	sbiw	r30, 0x01	; 1
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <get_key_presed+0x230>
     b6c:	8f 01       	movw	r16, r30
     b6e:	1a 8f       	std	Y+26, r17	; 0x1a
     b70:	09 8f       	std	Y+25, r16	; 0x19
     b72:	10 c0       	rjmp	.+32     	; 0xb94 <get_key_presed+0x25c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b74:	68 85       	ldd	r22, Y+8	; 0x08
     b76:	79 85       	ldd	r23, Y+9	; 0x09
     b78:	8a 85       	ldd	r24, Y+10	; 0x0a
     b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b7c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	8c 87       	std	Y+12, r24	; 0x0c
     b86:	8c 85       	ldd	r24, Y+12	; 0x0c
     b88:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b8c:	18 2f       	mov	r17, r24
     b8e:	1a 95       	dec	r17
     b90:	f1 f7       	brne	.-4      	; 0xb8e <get_key_presed+0x256>
     b92:	1b 8f       	std	Y+27, r17	; 0x1b
     b94:	88 e2       	ldi	r24, 0x28	; 40
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	2f ef       	ldi	r18, 0xFF	; 255
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e8       	ldi	r26, 0x80	; 128
     ba4:	bf e3       	ldi	r27, 0x3F	; 63
     ba6:	8c 8f       	std	Y+28, r24	; 0x1c
     ba8:	9d 8f       	std	Y+29, r25	; 0x1d
     baa:	ae 8f       	std	Y+30, r26	; 0x1e
     bac:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     bae:	6c 8d       	ldd	r22, Y+28	; 0x1c
     bb0:	7d 8d       	ldd	r23, Y+29	; 0x1d
     bb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bb4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	4a e7       	ldi	r20, 0x7A	; 122
     bbc:	55 e4       	ldi	r21, 0x45	; 69
     bbe:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	88 a3       	std	Y+32, r24	; 0x20
     bc8:	99 a3       	std	Y+33, r25	; 0x21
     bca:	aa a3       	std	Y+34, r26	; 0x22
     bcc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     bce:	11 e0       	ldi	r17, 0x01	; 1
     bd0:	68 a1       	ldd	r22, Y+32	; 0x20
     bd2:	79 a1       	ldd	r23, Y+33	; 0x21
     bd4:	8a a1       	ldd	r24, Y+34	; 0x22
     bd6:	9b a1       	ldd	r25, Y+35	; 0x23
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e8       	ldi	r20, 0x80	; 128
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     be4:	88 23       	and	r24, r24
     be6:	0c f0       	brlt	.+2      	; 0xbea <get_key_presed+0x2b2>
     be8:	10 e0       	ldi	r17, 0x00	; 0
     bea:	11 23       	and	r17, r17
     bec:	29 f0       	breq	.+10     	; 0xbf8 <get_key_presed+0x2c0>
		__ticks = 1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	9d a3       	std	Y+37, r25	; 0x25
     bf4:	8c a3       	std	Y+36, r24	; 0x24
     bf6:	46 c0       	rjmp	.+140    	; 0xc84 <get_key_presed+0x34c>
	else if (__tmp > 65535)
     bf8:	11 e0       	ldi	r17, 0x01	; 1
     bfa:	68 a1       	ldd	r22, Y+32	; 0x20
     bfc:	79 a1       	ldd	r23, Y+33	; 0x21
     bfe:	8a a1       	ldd	r24, Y+34	; 0x22
     c00:	9b a1       	ldd	r25, Y+35	; 0x23
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	3f ef       	ldi	r19, 0xFF	; 255
     c06:	4f e7       	ldi	r20, 0x7F	; 127
     c08:	57 e4       	ldi	r21, 0x47	; 71
     c0a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     c0e:	18 16       	cp	r1, r24
     c10:	0c f0       	brlt	.+2      	; 0xc14 <get_key_presed+0x2dc>
     c12:	10 e0       	ldi	r17, 0x00	; 0
     c14:	11 23       	and	r17, r17
     c16:	61 f1       	breq	.+88     	; 0xc70 <get_key_presed+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c18:	6c 8d       	ldd	r22, Y+28	; 0x1c
     c1a:	7d 8d       	ldd	r23, Y+29	; 0x1d
     c1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e2       	ldi	r20, 0x20	; 32
     c26:	51 e4       	ldi	r21, 0x41	; 65
     c28:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	bc 01       	movw	r22, r24
     c32:	cd 01       	movw	r24, r26
     c34:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	9d a3       	std	Y+37, r25	; 0x25
     c3e:	8c a3       	std	Y+36, r24	; 0x24
     c40:	12 c0       	rjmp	.+36     	; 0xc66 <get_key_presed+0x32e>
     c42:	80 e9       	ldi	r24, 0x90	; 144
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	9f a3       	std	Y+39, r25	; 0x27
     c48:	8e a3       	std	Y+38, r24	; 0x26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c4a:	8e a1       	ldd	r24, Y+38	; 0x26
     c4c:	9f a1       	ldd	r25, Y+39	; 0x27
     c4e:	8c 01       	movw	r16, r24
     c50:	c8 01       	movw	r24, r16
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <get_key_presed+0x31a>
     c56:	8c 01       	movw	r16, r24
     c58:	1f a3       	std	Y+39, r17	; 0x27
     c5a:	0e a3       	std	Y+38, r16	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5c:	8c a1       	ldd	r24, Y+36	; 0x24
     c5e:	9d a1       	ldd	r25, Y+37	; 0x25
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9d a3       	std	Y+37, r25	; 0x25
     c64:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	8c a1       	ldd	r24, Y+36	; 0x24
     c68:	9d a1       	ldd	r25, Y+37	; 0x25
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	51 f7       	brne	.-44     	; 0xc42 <get_key_presed+0x30a>
     c6e:	17 c0       	rjmp	.+46     	; 0xc9e <get_key_presed+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	68 a1       	ldd	r22, Y+32	; 0x20
     c72:	79 a1       	ldd	r23, Y+33	; 0x21
     c74:	8a a1       	ldd	r24, Y+34	; 0x22
     c76:	9b a1       	ldd	r25, Y+35	; 0x23
     c78:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9d a3       	std	Y+37, r25	; 0x25
     c82:	8c a3       	std	Y+36, r24	; 0x24
     c84:	8c a1       	ldd	r24, Y+36	; 0x24
     c86:	9d a1       	ldd	r25, Y+37	; 0x25
     c88:	99 a7       	std	Y+41, r25	; 0x29
     c8a:	88 a7       	std	Y+40, r24	; 0x28
     c8c:	88 a5       	ldd	r24, Y+40	; 0x28
     c8e:	99 a5       	ldd	r25, Y+41	; 0x29
     c90:	8c 01       	movw	r16, r24
     c92:	f8 01       	movw	r30, r16
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <get_key_presed+0x35c>
     c98:	8f 01       	movw	r16, r30
     c9a:	19 a7       	std	Y+41, r17	; 0x29
     c9c:	08 a7       	std	Y+40, r16	; 0x28
				_delay_ms(1);
				read_from_calc(keypad_port,tmp);
     c9e:	88 e2       	ldi	r24, 0x28	; 40
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	2f ef       	ldi	r18, 0xFF	; 255
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 83       	st	Z, r18
     ca8:	8a e2       	ldi	r24, 0x2A	; 42
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	fc 01       	movw	r30, r24
     cae:	10 82       	st	Z, r1
     cb0:	8b e2       	ldi	r24, 0x2B	; 43
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	2f ef       	ldi	r18, 0xFF	; 255
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
     cba:	85 e2       	ldi	r24, 0x25	; 37
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	22 e0       	ldi	r18, 0x02	; 2
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
     cc4:	89 e2       	ldi	r24, 0x29	; 41
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	fc 01       	movw	r30, r24
     cca:	80 81       	ld	r24, Z
     ccc:	8b 83       	std	Y+3, r24	; 0x03
     cce:	88 e2       	ldi	r24, 0x28	; 40
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	2e ef       	ldi	r18, 0xFE	; 254
     cd4:	fc 01       	movw	r30, r24
     cd6:	20 83       	st	Z, r18
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e2       	ldi	r26, 0x20	; 32
     cde:	b1 e4       	ldi	r27, 0x41	; 65
     ce0:	8a a7       	std	Y+42, r24	; 0x2a
     ce2:	9b a7       	std	Y+43, r25	; 0x2b
     ce4:	ac a7       	std	Y+44, r26	; 0x2c
     ce6:	bd a7       	std	Y+45, r27	; 0x2d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     ce8:	6a a5       	ldd	r22, Y+42	; 0x2a
     cea:	7b a5       	ldd	r23, Y+43	; 0x2b
     cec:	8c a5       	ldd	r24, Y+44	; 0x2c
     cee:	9d a5       	ldd	r25, Y+45	; 0x2d
     cf0:	2b ea       	ldi	r18, 0xAB	; 171
     cf2:	3a ea       	ldi	r19, 0xAA	; 170
     cf4:	4a ea       	ldi	r20, 0xAA	; 170
     cf6:	50 e4       	ldi	r21, 0x40	; 64
     cf8:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	8e a7       	std	Y+46, r24	; 0x2e
     d02:	9f a7       	std	Y+47, r25	; 0x2f
     d04:	a8 ab       	std	Y+48, r26	; 0x30
     d06:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     d08:	11 e0       	ldi	r17, 0x01	; 1
     d0a:	6e a5       	ldd	r22, Y+46	; 0x2e
     d0c:	7f a5       	ldd	r23, Y+47	; 0x2f
     d0e:	88 a9       	ldd	r24, Y+48	; 0x30
     d10:	99 a9       	ldd	r25, Y+49	; 0x31
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e8       	ldi	r20, 0x80	; 128
     d18:	5f e3       	ldi	r21, 0x3F	; 63
     d1a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     d1e:	88 23       	and	r24, r24
     d20:	0c f0       	brlt	.+2      	; 0xd24 <get_key_presed+0x3ec>
     d22:	10 e0       	ldi	r17, 0x00	; 0
     d24:	11 23       	and	r17, r17
     d26:	19 f0       	breq	.+6      	; 0xd2e <get_key_presed+0x3f6>
		__ticks = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	8a ab       	std	Y+50, r24	; 0x32
     d2c:	ac c0       	rjmp	.+344    	; 0xe86 <get_key_presed+0x54e>
	else if (__tmp > 255)
     d2e:	11 e0       	ldi	r17, 0x01	; 1
     d30:	6e a5       	ldd	r22, Y+46	; 0x2e
     d32:	7f a5       	ldd	r23, Y+47	; 0x2f
     d34:	88 a9       	ldd	r24, Y+48	; 0x30
     d36:	99 a9       	ldd	r25, Y+49	; 0x31
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	4f e7       	ldi	r20, 0x7F	; 127
     d3e:	53 e4       	ldi	r21, 0x43	; 67
     d40:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     d44:	18 16       	cp	r1, r24
     d46:	0c f0       	brlt	.+2      	; 0xd4a <get_key_presed+0x412>
     d48:	10 e0       	ldi	r17, 0x00	; 0
     d4a:	11 23       	and	r17, r17
     d4c:	09 f4       	brne	.+2      	; 0xd50 <get_key_presed+0x418>
     d4e:	92 c0       	rjmp	.+292    	; 0xe74 <get_key_presed+0x53c>
	{
		_delay_ms(__us / 1000.0);
     d50:	6a a5       	ldd	r22, Y+42	; 0x2a
     d52:	7b a5       	ldd	r23, Y+43	; 0x2b
     d54:	8c a5       	ldd	r24, Y+44	; 0x2c
     d56:	9d a5       	ldd	r25, Y+45	; 0x2d
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a e7       	ldi	r20, 0x7A	; 122
     d5e:	54 e4       	ldi	r21, 0x44	; 68
     d60:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__divsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	8b ab       	std	Y+51, r24	; 0x33
     d6a:	9c ab       	std	Y+52, r25	; 0x34
     d6c:	ad ab       	std	Y+53, r26	; 0x35
     d6e:	be ab       	std	Y+54, r27	; 0x36
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     d70:	6b a9       	ldd	r22, Y+51	; 0x33
     d72:	7c a9       	ldd	r23, Y+52	; 0x34
     d74:	8d a9       	ldd	r24, Y+53	; 0x35
     d76:	9e a9       	ldd	r25, Y+54	; 0x36
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	4a e7       	ldi	r20, 0x7A	; 122
     d7e:	55 e4       	ldi	r21, 0x45	; 69
     d80:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	8f ab       	std	Y+55, r24	; 0x37
     d8a:	98 af       	std	Y+56, r25	; 0x38
     d8c:	a9 af       	std	Y+57, r26	; 0x39
     d8e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     d90:	11 e0       	ldi	r17, 0x01	; 1
     d92:	6f a9       	ldd	r22, Y+55	; 0x37
     d94:	78 ad       	ldd	r23, Y+56	; 0x38
     d96:	89 ad       	ldd	r24, Y+57	; 0x39
     d98:	9a ad       	ldd	r25, Y+58	; 0x3a
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e8       	ldi	r20, 0x80	; 128
     da0:	5f e3       	ldi	r21, 0x3F	; 63
     da2:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
     da6:	88 23       	and	r24, r24
     da8:	0c f0       	brlt	.+2      	; 0xdac <get_key_presed+0x474>
     daa:	10 e0       	ldi	r17, 0x00	; 0
     dac:	11 23       	and	r17, r17
     dae:	29 f0       	breq	.+10     	; 0xdba <get_key_presed+0x482>
		__ticks = 1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c af       	std	Y+60, r25	; 0x3c
     db6:	8b af       	std	Y+59, r24	; 0x3b
     db8:	46 c0       	rjmp	.+140    	; 0xe46 <get_key_presed+0x50e>
	else if (__tmp > 65535)
     dba:	11 e0       	ldi	r17, 0x01	; 1
     dbc:	6f a9       	ldd	r22, Y+55	; 0x37
     dbe:	78 ad       	ldd	r23, Y+56	; 0x38
     dc0:	89 ad       	ldd	r24, Y+57	; 0x39
     dc2:	9a ad       	ldd	r25, Y+58	; 0x3a
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	3f ef       	ldi	r19, 0xFF	; 255
     dc8:	4f e7       	ldi	r20, 0x7F	; 127
     dca:	57 e4       	ldi	r21, 0x47	; 71
     dcc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
     dd0:	18 16       	cp	r1, r24
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <get_key_presed+0x49e>
     dd4:	10 e0       	ldi	r17, 0x00	; 0
     dd6:	11 23       	and	r17, r17
     dd8:	61 f1       	breq	.+88     	; 0xe32 <get_key_presed+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dda:	6b a9       	ldd	r22, Y+51	; 0x33
     ddc:	7c a9       	ldd	r23, Y+52	; 0x34
     dde:	8d a9       	ldd	r24, Y+53	; 0x35
     de0:	9e a9       	ldd	r25, Y+54	; 0x36
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e2       	ldi	r20, 0x20	; 32
     de8:	51 e4       	ldi	r21, 0x41	; 65
     dea:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	9c af       	std	Y+60, r25	; 0x3c
     e00:	8b af       	std	Y+59, r24	; 0x3b
     e02:	12 c0       	rjmp	.+36     	; 0xe28 <get_key_presed+0x4f0>
     e04:	80 e9       	ldi	r24, 0x90	; 144
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	9e af       	std	Y+62, r25	; 0x3e
     e0a:	8d af       	std	Y+61, r24	; 0x3d
     e0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e0e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e10:	8c 01       	movw	r16, r24
     e12:	c8 01       	movw	r24, r16
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <get_key_presed+0x4dc>
     e18:	8c 01       	movw	r16, r24
     e1a:	1e af       	std	Y+62, r17	; 0x3e
     e1c:	0d af       	std	Y+61, r16	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1e:	8b ad       	ldd	r24, Y+59	; 0x3b
     e20:	9c ad       	ldd	r25, Y+60	; 0x3c
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	9c af       	std	Y+60, r25	; 0x3c
     e26:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e28:	8b ad       	ldd	r24, Y+59	; 0x3b
     e2a:	9c ad       	ldd	r25, Y+60	; 0x3c
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	51 f7       	brne	.-44     	; 0xe04 <get_key_presed+0x4cc>
     e30:	3d c0       	rjmp	.+122    	; 0xeac <get_key_presed+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e32:	6f a9       	ldd	r22, Y+55	; 0x37
     e34:	78 ad       	ldd	r23, Y+56	; 0x38
     e36:	89 ad       	ldd	r24, Y+57	; 0x39
     e38:	9a ad       	ldd	r25, Y+58	; 0x3a
     e3a:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9c af       	std	Y+60, r25	; 0x3c
     e44:	8b af       	std	Y+59, r24	; 0x3b
     e46:	2b ad       	ldd	r18, Y+59	; 0x3b
     e48:	3c ad       	ldd	r19, Y+60	; 0x3c
     e4a:	ce 01       	movw	r24, r28
     e4c:	cf 96       	adiw	r24, 0x3f	; 63
     e4e:	fc 01       	movw	r30, r24
     e50:	31 83       	std	Z+1, r19	; 0x01
     e52:	20 83       	st	Z, r18
     e54:	ce 01       	movw	r24, r28
     e56:	cf 96       	adiw	r24, 0x3f	; 63
     e58:	fc 01       	movw	r30, r24
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	8c 01       	movw	r16, r24
     e60:	c8 01       	movw	r24, r16
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <get_key_presed+0x52a>
     e66:	8c 01       	movw	r16, r24
     e68:	ce 01       	movw	r24, r28
     e6a:	cf 96       	adiw	r24, 0x3f	; 63
     e6c:	fc 01       	movw	r30, r24
     e6e:	11 83       	std	Z+1, r17	; 0x01
     e70:	00 83       	st	Z, r16
     e72:	1c c0       	rjmp	.+56     	; 0xeac <get_key_presed+0x574>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e74:	6e a5       	ldd	r22, Y+46	; 0x2e
     e76:	7f a5       	ldd	r23, Y+47	; 0x2f
     e78:	88 a9       	ldd	r24, Y+48	; 0x30
     e7a:	99 a9       	ldd	r25, Y+49	; 0x31
     e7c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	8a ab       	std	Y+50, r24	; 0x32
     e86:	ce 01       	movw	r24, r28
     e88:	8f 5b       	subi	r24, 0xBF	; 191
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
     e8c:	2a a9       	ldd	r18, Y+50	; 0x32
     e8e:	fc 01       	movw	r30, r24
     e90:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e92:	ce 01       	movw	r24, r28
     e94:	8f 5b       	subi	r24, 0xBF	; 191
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	fc 01       	movw	r30, r24
     e9a:	80 81       	ld	r24, Z
     e9c:	18 2f       	mov	r17, r24
     e9e:	1a 95       	dec	r17
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <get_key_presed+0x566>
     ea2:	ce 01       	movw	r24, r28
     ea4:	8f 5b       	subi	r24, 0xBF	; 191
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	fc 01       	movw	r30, r24
     eaa:	10 83       	st	Z, r17
     eac:	88 e2       	ldi	r24, 0x28	; 40
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	2f ef       	ldi	r18, 0xFF	; 255
     eb2:	fc 01       	movw	r30, r24
     eb4:	20 83       	st	Z, r18
				for(uint8_t j=0;j<4;j++)
     eb6:	1a 82       	std	Y+2, r1	; 0x02
     eb8:	38 c0       	rjmp	.+112    	; 0xf2a <get_key_presed+0x5f2>
				{
					if(tmp == IN_VAL[i][j]) return MyKeypad[i-4][j];
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	48 2f       	mov	r20, r24
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9e 01       	movw	r18, r28
     ec8:	2a 5b       	subi	r18, 0xBA	; 186
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	44 0f       	add	r20, r20
     ece:	55 1f       	adc	r21, r21
     ed0:	44 0f       	add	r20, r20
     ed2:	55 1f       	adc	r21, r21
     ed4:	84 0f       	add	r24, r20
     ed6:	95 1f       	adc	r25, r21
     ed8:	82 0f       	add	r24, r18
     eda:	93 1f       	adc	r25, r19
     edc:	fc 01       	movw	r30, r24
     ede:	90 81       	ld	r25, Z
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	98 17       	cp	r25, r24
     ee4:	f9 f4       	brne	.+62     	; 0xf24 <get_key_presed+0x5ec>
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9c 01       	movw	r18, r24
     eee:	24 50       	subi	r18, 0x04	; 4
     ef0:	30 40       	sbci	r19, 0x00	; 0
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	22 0f       	add	r18, r18
     efa:	33 1f       	adc	r19, r19
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	82 0f       	add	r24, r18
     f02:	93 1f       	adc	r25, r19
     f04:	80 50       	subi	r24, 0x00	; 0
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	fc 01       	movw	r30, r24
     f0a:	80 81       	ld	r24, Z
				}					
			}
	}
}
     f0c:	cb 5a       	subi	r28, 0xAB	; 171
     f0e:	df 4f       	sbci	r29, 0xFF	; 255
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret
			for (uint8_t i=0,tmp;i<4;i++)
			{
				write_to_calc(keypad_port,OUT_VAL[i]);
				_delay_ms(1);
				read_from_calc(keypad_port,tmp);
				for(uint8_t j=0;j<4;j++)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	84 30       	cpi	r24, 0x04	; 4
     f2e:	28 f2       	brcs	.-118    	; 0xeba <get_key_presed+0x582>
						{0XDE,0XDD,0XDB,0XD7},
						{0XBE,0XBD,0XBB,0XB7},
						{0X7E,0X7D,0X7B,0X77}};
	while (1)
	{
			for (uint8_t i=0,tmp;i<4;i++)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	84 30       	cpi	r24, 0x04	; 4
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <get_key_presed+0x606>
     f3c:	34 cd       	rjmp	.-1432   	; 0x9a6 <get_key_presed+0x6e>
				for(uint8_t j=0;j<4;j++)
				{
					if(tmp == IN_VAL[i][j]) return MyKeypad[i-4][j];
				}					
			}
	}
     f3e:	31 cd       	rjmp	.-1438   	; 0x9a2 <get_key_presed+0x6a>

00000f40 <Sign_to_Unsign>:
}

int Sign_to_Unsign(char *sign,int Num ,int x){
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <Sign_to_Unsign+0x6>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <Sign_to_Unsign+0x8>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <Sign_to_Unsign+0xa>
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	9a 83       	std	Y+2, r25	; 0x02
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	7c 83       	std	Y+4, r23	; 0x04
     f54:	6b 83       	std	Y+3, r22	; 0x03
     f56:	5e 83       	std	Y+6, r21	; 0x06
     f58:	4d 83       	std	Y+5, r20	; 0x05
		ret+=sign[Num]-'0';
		ret*=10;
		Num++;
	}
	return (ret/10)*mul;*/
}
     f5a:	26 96       	adiw	r28, 0x06	; 6
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <res>:
 
int res(int firNum ,int SecNum,char op){
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <res+0x6>
     f72:	00 d0       	rcall	.+0      	; 0xf74 <res+0x8>
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	7c 83       	std	Y+4, r23	; 0x04
     f80:	6b 83       	std	Y+3, r22	; 0x03
     f82:	4d 83       	std	Y+5, r20	; 0x05
			if(SecNum=0)
			  write_to_LCD(Error);
			else
			  return firNum/SecNum;  
		} */			
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <operate>:

void operate(){
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
				break;
			}
			if (arr[i]=='=') return ;
		}
	}*/
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <to_string>:

void to_string(int in){ 
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <to_string+0x6>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
		tarr[ptr++]=(in%10)+'0';
		in/=10;
	}
	if (tmp<0) tarr[ptr++]='-';
	for (int i=0;i<ptr;i++) arr[i]=tarr[ptr-1-i];*/
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <calculate>:

int calculate(){
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
		f=Sign_to_Unsign(arr,0,pos-1);
		s=Sign_to_Unsign(arr,pos+1,sz-2);
		return res(f,s,op);
	}
*/
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <main>:

int main(void)
{
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	a7 97       	sbiw	r28, 0x27	; 39
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
	init_calc();
     fe0:	84 e2       	ldi	r24, 0x24	; 36
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	2f ef       	ldi	r18, 0xFF	; 255
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
     fea:	87 e2       	ldi	r24, 0x27	; 39
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	2f ef       	ldi	r18, 0xFF	; 255
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
     ff4:	88 e2       	ldi	r24, 0x28	; 40
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	2f ef       	ldi	r18, 0xFF	; 255
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
     ffe:	8a e2       	ldi	r24, 0x2A	; 42
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	2f ef       	ldi	r18, 0xFF	; 255
    1004:	fc 01       	movw	r30, r24
    1006:	20 83       	st	Z, r18
    1008:	85 e2       	ldi	r24, 0x25	; 37
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	23 e0       	ldi	r18, 0x03	; 3
    100e:	fc 01       	movw	r30, r24
    1010:	20 83       	st	Z, r18
    1012:	8b e2       	ldi	r24, 0x2B	; 43
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	21 e8       	ldi	r18, 0x81	; 129
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18
    101c:	88 e2       	ldi	r24, 0x28	; 40
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	2d ef       	ldi	r18, 0xFD	; 253
    1022:	fc 01       	movw	r30, r24
    1024:	20 83       	st	Z, r18
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	a0 e2       	ldi	r26, 0x20	; 32
    102c:	b1 e4       	ldi	r27, 0x41	; 65
    102e:	8a 83       	std	Y+2, r24	; 0x02
    1030:	9b 83       	std	Y+3, r25	; 0x03
    1032:	ac 83       	std	Y+4, r26	; 0x04
    1034:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1036:	6a 81       	ldd	r22, Y+2	; 0x02
    1038:	7b 81       	ldd	r23, Y+3	; 0x03
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	2b ea       	ldi	r18, 0xAB	; 171
    1040:	3a ea       	ldi	r19, 0xAA	; 170
    1042:	4a ea       	ldi	r20, 0xAA	; 170
    1044:	50 e4       	ldi	r21, 0x40	; 64
    1046:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	8e 83       	std	Y+6, r24	; 0x06
    1050:	9f 83       	std	Y+7, r25	; 0x07
    1052:	a8 87       	std	Y+8, r26	; 0x08
    1054:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1056:	11 e0       	ldi	r17, 0x01	; 1
    1058:	6e 81       	ldd	r22, Y+6	; 0x06
    105a:	7f 81       	ldd	r23, Y+7	; 0x07
    105c:	88 85       	ldd	r24, Y+8	; 0x08
    105e:	99 85       	ldd	r25, Y+9	; 0x09
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
    106c:	88 23       	and	r24, r24
    106e:	0c f0       	brlt	.+2      	; 0x1072 <main+0xaa>
    1070:	10 e0       	ldi	r17, 0x00	; 0
    1072:	11 23       	and	r17, r17
    1074:	19 f0       	breq	.+6      	; 0x107c <main+0xb4>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	8a 87       	std	Y+10, r24	; 0x0a
    107a:	a3 c0       	rjmp	.+326    	; 0x11c2 <main+0x1fa>
	else if (__tmp > 255)
    107c:	11 e0       	ldi	r17, 0x01	; 1
    107e:	6e 81       	ldd	r22, Y+6	; 0x06
    1080:	7f 81       	ldd	r23, Y+7	; 0x07
    1082:	88 85       	ldd	r24, Y+8	; 0x08
    1084:	99 85       	ldd	r25, Y+9	; 0x09
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	4f e7       	ldi	r20, 0x7F	; 127
    108c:	53 e4       	ldi	r21, 0x43	; 67
    108e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
    1092:	18 16       	cp	r1, r24
    1094:	0c f0       	brlt	.+2      	; 0x1098 <main+0xd0>
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	11 23       	and	r17, r17
    109a:	09 f4       	brne	.+2      	; 0x109e <main+0xd6>
    109c:	89 c0       	rjmp	.+274    	; 0x11b0 <main+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    109e:	6a 81       	ldd	r22, Y+2	; 0x02
    10a0:	7b 81       	ldd	r23, Y+3	; 0x03
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	4a e7       	ldi	r20, 0x7A	; 122
    10ac:	54 e4       	ldi	r21, 0x44	; 68
    10ae:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__divsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	8b 87       	std	Y+11, r24	; 0x0b
    10b8:	9c 87       	std	Y+12, r25	; 0x0c
    10ba:	ad 87       	std	Y+13, r26	; 0x0d
    10bc:	be 87       	std	Y+14, r27	; 0x0e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    10be:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	4a e7       	ldi	r20, 0x7A	; 122
    10cc:	55 e4       	ldi	r21, 0x45	; 69
    10ce:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	8f 87       	std	Y+15, r24	; 0x0f
    10d8:	98 8b       	std	Y+16, r25	; 0x10
    10da:	a9 8b       	std	Y+17, r26	; 0x11
    10dc:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
    10de:	11 e0       	ldi	r17, 0x01	; 1
    10e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    10e2:	78 89       	ldd	r23, Y+16	; 0x10
    10e4:	89 89       	ldd	r24, Y+17	; 0x11
    10e6:	9a 89       	ldd	r25, Y+18	; 0x12
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	0c f0       	brlt	.+2      	; 0x10fa <main+0x132>
    10f8:	10 e0       	ldi	r17, 0x00	; 0
    10fa:	11 23       	and	r17, r17
    10fc:	29 f0       	breq	.+10     	; 0x1108 <main+0x140>
		__ticks = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 8b       	std	Y+20, r25	; 0x14
    1104:	8b 8b       	std	Y+19, r24	; 0x13
    1106:	46 c0       	rjmp	.+140    	; 0x1194 <main+0x1cc>
	else if (__tmp > 65535)
    1108:	11 e0       	ldi	r17, 0x01	; 1
    110a:	6f 85       	ldd	r22, Y+15	; 0x0f
    110c:	78 89       	ldd	r23, Y+16	; 0x10
    110e:	89 89       	ldd	r24, Y+17	; 0x11
    1110:	9a 89       	ldd	r25, Y+18	; 0x12
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	3f ef       	ldi	r19, 0xFF	; 255
    1116:	4f e7       	ldi	r20, 0x7F	; 127
    1118:	57 e4       	ldi	r21, 0x47	; 71
    111a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
    111e:	18 16       	cp	r1, r24
    1120:	0c f0       	brlt	.+2      	; 0x1124 <main+0x15c>
    1122:	10 e0       	ldi	r17, 0x00	; 0
    1124:	11 23       	and	r17, r17
    1126:	61 f1       	breq	.+88     	; 0x1180 <main+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1128:	6b 85       	ldd	r22, Y+11	; 0x0b
    112a:	7c 85       	ldd	r23, Y+12	; 0x0c
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	9c 8b       	std	Y+20, r25	; 0x14
    114e:	8b 8b       	std	Y+19, r24	; 0x13
    1150:	12 c0       	rjmp	.+36     	; 0x1176 <main+0x1ae>
    1152:	80 e9       	ldi	r24, 0x90	; 144
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	9e 8b       	std	Y+22, r25	; 0x16
    1158:	8d 8b       	std	Y+21, r24	; 0x15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    115a:	8d 89       	ldd	r24, Y+21	; 0x15
    115c:	9e 89       	ldd	r25, Y+22	; 0x16
    115e:	8c 01       	movw	r16, r24
    1160:	c8 01       	movw	r24, r16
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <main+0x19a>
    1166:	8c 01       	movw	r16, r24
    1168:	1e 8b       	std	Y+22, r17	; 0x16
    116a:	0d 8b       	std	Y+21, r16	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116c:	8b 89       	ldd	r24, Y+19	; 0x13
    116e:	9c 89       	ldd	r25, Y+20	; 0x14
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	9c 8b       	std	Y+20, r25	; 0x14
    1174:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1176:	8b 89       	ldd	r24, Y+19	; 0x13
    1178:	9c 89       	ldd	r25, Y+20	; 0x14
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	51 f7       	brne	.-44     	; 0x1152 <main+0x18a>
    117e:	28 c0       	rjmp	.+80     	; 0x11d0 <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1180:	6f 85       	ldd	r22, Y+15	; 0x0f
    1182:	78 89       	ldd	r23, Y+16	; 0x10
    1184:	89 89       	ldd	r24, Y+17	; 0x11
    1186:	9a 89       	ldd	r25, Y+18	; 0x12
    1188:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	9c 8b       	std	Y+20, r25	; 0x14
    1192:	8b 8b       	std	Y+19, r24	; 0x13
    1194:	8b 89       	ldd	r24, Y+19	; 0x13
    1196:	9c 89       	ldd	r25, Y+20	; 0x14
    1198:	98 8f       	std	Y+24, r25	; 0x18
    119a:	8f 8b       	std	Y+23, r24	; 0x17
    119c:	8f 89       	ldd	r24, Y+23	; 0x17
    119e:	98 8d       	ldd	r25, Y+24	; 0x18
    11a0:	8c 01       	movw	r16, r24
    11a2:	f8 01       	movw	r30, r16
    11a4:	31 97       	sbiw	r30, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <main+0x1dc>
    11a8:	8f 01       	movw	r16, r30
    11aa:	18 8f       	std	Y+24, r17	; 0x18
    11ac:	0f 8b       	std	Y+23, r16	; 0x17
    11ae:	10 c0       	rjmp	.+32     	; 0x11d0 <main+0x208>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11b0:	6e 81       	ldd	r22, Y+6	; 0x06
    11b2:	7f 81       	ldd	r23, Y+7	; 0x07
    11b4:	88 85       	ldd	r24, Y+8	; 0x08
    11b6:	99 85       	ldd	r25, Y+9	; 0x09
    11b8:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	8a 87       	std	Y+10, r24	; 0x0a
    11c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11c6:	89 8d       	ldd	r24, Y+25	; 0x19
    11c8:	18 2f       	mov	r17, r24
    11ca:	1a 95       	dec	r17
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <main+0x202>
    11ce:	19 8f       	std	Y+25, r17	; 0x19
    11d0:	88 e2       	ldi	r24, 0x28	; 40
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	2f ef       	ldi	r18, 0xFF	; 255
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
	INIT_LCD();
    11da:	0e 94 5d 04 	call	0x8ba	; 0x8ba <INIT_LCD>
	print_to_LCD("hello");
    11de:	80 e1       	ldi	r24, 0x10	; 16
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <print_to_LCD>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	aa e7       	ldi	r26, 0x7A	; 122
    11ec:	b4 e4       	ldi	r27, 0x44	; 68
    11ee:	8a 8f       	std	Y+26, r24	; 0x1a
    11f0:	9b 8f       	std	Y+27, r25	; 0x1b
    11f2:	ac 8f       	std	Y+28, r26	; 0x1c
    11f4:	bd 8f       	std	Y+29, r27	; 0x1d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    11f6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    11f8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    11fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	4a e7       	ldi	r20, 0x7A	; 122
    1204:	55 e4       	ldi	r21, 0x45	; 69
    1206:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	8e 8f       	std	Y+30, r24	; 0x1e
    1210:	9f 8f       	std	Y+31, r25	; 0x1f
    1212:	a8 a3       	std	Y+32, r26	; 0x20
    1214:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
    1216:	11 e0       	ldi	r17, 0x01	; 1
    1218:	6e 8d       	ldd	r22, Y+30	; 0x1e
    121a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    121c:	88 a1       	ldd	r24, Y+32	; 0x20
    121e:	99 a1       	ldd	r25, Y+33	; 0x21
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	0c f0       	brlt	.+2      	; 0x1232 <main+0x26a>
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	11 23       	and	r17, r17
    1234:	29 f0       	breq	.+10     	; 0x1240 <main+0x278>
		__ticks = 1;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9b a3       	std	Y+35, r25	; 0x23
    123c:	8a a3       	std	Y+34, r24	; 0x22
    123e:	46 c0       	rjmp	.+140    	; 0x12cc <main+0x304>
	else if (__tmp > 65535)
    1240:	11 e0       	ldi	r17, 0x01	; 1
    1242:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1244:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1246:	88 a1       	ldd	r24, Y+32	; 0x20
    1248:	99 a1       	ldd	r25, Y+33	; 0x21
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	3f ef       	ldi	r19, 0xFF	; 255
    124e:	4f e7       	ldi	r20, 0x7F	; 127
    1250:	57 e4       	ldi	r21, 0x47	; 71
    1252:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__gtsf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <main+0x294>
    125a:	10 e0       	ldi	r17, 0x00	; 0
    125c:	11 23       	and	r17, r17
    125e:	61 f1       	breq	.+88     	; 0x12b8 <main+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1260:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1262:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1264:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1266:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e2       	ldi	r20, 0x20	; 32
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9b a3       	std	Y+35, r25	; 0x23
    1286:	8a a3       	std	Y+34, r24	; 0x22
    1288:	12 c0       	rjmp	.+36     	; 0x12ae <main+0x2e6>
    128a:	80 e9       	ldi	r24, 0x90	; 144
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	9d a3       	std	Y+37, r25	; 0x25
    1290:	8c a3       	std	Y+36, r24	; 0x24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1292:	8c a1       	ldd	r24, Y+36	; 0x24
    1294:	9d a1       	ldd	r25, Y+37	; 0x25
    1296:	8c 01       	movw	r16, r24
    1298:	c8 01       	movw	r24, r16
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <main+0x2d2>
    129e:	8c 01       	movw	r16, r24
    12a0:	1d a3       	std	Y+37, r17	; 0x25
    12a2:	0c a3       	std	Y+36, r16	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8a a1       	ldd	r24, Y+34	; 0x22
    12a6:	9b a1       	ldd	r25, Y+35	; 0x23
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9b a3       	std	Y+35, r25	; 0x23
    12ac:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8a a1       	ldd	r24, Y+34	; 0x22
    12b0:	9b a1       	ldd	r25, Y+35	; 0x23
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	51 f7       	brne	.-44     	; 0x128a <main+0x2c2>
    12b6:	17 c0       	rjmp	.+46     	; 0x12e6 <main+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    12ba:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12bc:	88 a1       	ldd	r24, Y+32	; 0x20
    12be:	99 a1       	ldd	r25, Y+33	; 0x21
    12c0:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	9b a3       	std	Y+35, r25	; 0x23
    12ca:	8a a3       	std	Y+34, r24	; 0x22
    12cc:	8a a1       	ldd	r24, Y+34	; 0x22
    12ce:	9b a1       	ldd	r25, Y+35	; 0x23
    12d0:	9f a3       	std	Y+39, r25	; 0x27
    12d2:	8e a3       	std	Y+38, r24	; 0x26
    12d4:	8e a1       	ldd	r24, Y+38	; 0x26
    12d6:	9f a1       	ldd	r25, Y+39	; 0x27
    12d8:	8c 01       	movw	r16, r24
    12da:	f8 01       	movw	r30, r16
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <main+0x314>
    12e0:	8f 01       	movw	r16, r30
    12e2:	1f a3       	std	Y+39, r17	; 0x27
    12e4:	0e a3       	std	Y+38, r16	; 0x26
	_delay_ms(1000);
	SEND_TO_LCD(clr,CMD);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	0e 94 4b 00 	call	0x96	; 0x96 <SEND_TO_LCD>
	char ch = get_key_presed();
    12ee:	0e 94 9c 04 	call	0x938	; 0x938 <get_key_presed>
    12f2:	89 83       	std	Y+1, r24	; 0x01
	write_to_LCD(ch);
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <write_to_LCD>
	return 0;
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a7 96       	adiw	r28, 0x27	; 39
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <__fixunssfsi>:
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	7b 01       	movw	r14, r22
    131e:	8c 01       	movw	r16, r24
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	5f e4       	ldi	r21, 0x4F	; 79
    1328:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__gesf2>
    132c:	87 fd       	sbrc	r24, 7
    132e:	11 c0       	rjmp	.+34     	; 0x1352 <__fixunssfsi+0x3e>
    1330:	c8 01       	movw	r24, r16
    1332:	b7 01       	movw	r22, r14
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	5f e4       	ldi	r21, 0x4F	; 79
    133c:	0e 94 2d 0b 	call	0x165a	; 0x165a <__subsf3>
    1340:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixsfsi>
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	20 50       	subi	r18, 0x00	; 0
    134a:	30 40       	sbci	r19, 0x00	; 0
    134c:	40 40       	sbci	r20, 0x00	; 0
    134e:	50 48       	sbci	r21, 0x80	; 128
    1350:	06 c0       	rjmp	.+12     	; 0x135e <__fixunssfsi+0x4a>
    1352:	c8 01       	movw	r24, r16
    1354:	b7 01       	movw	r22, r14
    1356:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixsfsi>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	b9 01       	movw	r22, r18
    1360:	ca 01       	movw	r24, r20
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	08 95       	ret

0000136c <_fpadd_parts>:
    136c:	a0 e0       	ldi	r26, 0x00	; 0
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	ec eb       	ldi	r30, 0xBC	; 188
    1372:	f9 e0       	ldi	r31, 0x09	; 9
    1374:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__prologue_saves__+0x8>
    1378:	fc 01       	movw	r30, r24
    137a:	ea 01       	movw	r28, r20
    137c:	80 81       	ld	r24, Z
    137e:	82 30       	cpi	r24, 0x02	; 2
    1380:	08 f4       	brcc	.+2      	; 0x1384 <_fpadd_parts+0x18>
    1382:	38 c1       	rjmp	.+624    	; 0x15f4 <_fpadd_parts+0x288>
    1384:	db 01       	movw	r26, r22
    1386:	9c 91       	ld	r25, X
    1388:	92 30       	cpi	r25, 0x02	; 2
    138a:	08 f4       	brcc	.+2      	; 0x138e <_fpadd_parts+0x22>
    138c:	30 c1       	rjmp	.+608    	; 0x15ee <_fpadd_parts+0x282>
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	59 f4       	brne	.+22     	; 0x13a8 <_fpadd_parts+0x3c>
    1392:	94 30       	cpi	r25, 0x04	; 4
    1394:	09 f0       	breq	.+2      	; 0x1398 <_fpadd_parts+0x2c>
    1396:	2e c1       	rjmp	.+604    	; 0x15f4 <_fpadd_parts+0x288>
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	8c 91       	ld	r24, X
    139e:	11 97       	sbiw	r26, 0x01	; 1
    13a0:	98 17       	cp	r25, r24
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <_fpadd_parts+0x3a>
    13a4:	21 c1       	rjmp	.+578    	; 0x15e8 <_fpadd_parts+0x27c>
    13a6:	26 c1       	rjmp	.+588    	; 0x15f4 <_fpadd_parts+0x288>
    13a8:	94 30       	cpi	r25, 0x04	; 4
    13aa:	09 f4       	brne	.+2      	; 0x13ae <_fpadd_parts+0x42>
    13ac:	20 c1       	rjmp	.+576    	; 0x15ee <_fpadd_parts+0x282>
    13ae:	92 30       	cpi	r25, 0x02	; 2
    13b0:	b1 f4       	brne	.+44     	; 0x13de <_fpadd_parts+0x72>
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <_fpadd_parts+0x4c>
    13b6:	1e c1       	rjmp	.+572    	; 0x15f4 <_fpadd_parts+0x288>
    13b8:	ca 01       	movw	r24, r20
    13ba:	af 01       	movw	r20, r30
    13bc:	28 e0       	ldi	r18, 0x08	; 8
    13be:	da 01       	movw	r26, r20
    13c0:	0d 90       	ld	r0, X+
    13c2:	ad 01       	movw	r20, r26
    13c4:	dc 01       	movw	r26, r24
    13c6:	0d 92       	st	X+, r0
    13c8:	cd 01       	movw	r24, r26
    13ca:	21 50       	subi	r18, 0x01	; 1
    13cc:	c1 f7       	brne	.-16     	; 0x13be <_fpadd_parts+0x52>
    13ce:	db 01       	movw	r26, r22
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	8c 91       	ld	r24, X
    13d4:	11 97       	sbiw	r26, 0x01	; 1
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	89 23       	and	r24, r25
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	0a c1       	rjmp	.+532    	; 0x15f2 <_fpadd_parts+0x286>
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <_fpadd_parts+0x78>
    13e2:	05 c1       	rjmp	.+522    	; 0x15ee <_fpadd_parts+0x282>
    13e4:	c2 80       	ldd	r12, Z+2	; 0x02
    13e6:	d3 80       	ldd	r13, Z+3	; 0x03
    13e8:	db 01       	movw	r26, r22
    13ea:	12 96       	adiw	r26, 0x02	; 2
    13ec:	6d 90       	ld	r6, X+
    13ee:	7c 90       	ld	r7, X
    13f0:	13 97       	sbiw	r26, 0x03	; 3
    13f2:	24 81       	ldd	r18, Z+4	; 0x04
    13f4:	35 81       	ldd	r19, Z+5	; 0x05
    13f6:	46 81       	ldd	r20, Z+6	; 0x06
    13f8:	57 81       	ldd	r21, Z+7	; 0x07
    13fa:	14 96       	adiw	r26, 0x04	; 4
    13fc:	ed 90       	ld	r14, X+
    13fe:	fd 90       	ld	r15, X+
    1400:	0d 91       	ld	r16, X+
    1402:	1c 91       	ld	r17, X
    1404:	17 97       	sbiw	r26, 0x07	; 7
    1406:	c6 01       	movw	r24, r12
    1408:	86 19       	sub	r24, r6
    140a:	97 09       	sbc	r25, r7
    140c:	5c 01       	movw	r10, r24
    140e:	97 ff       	sbrs	r25, 7
    1410:	04 c0       	rjmp	.+8      	; 0x141a <_fpadd_parts+0xae>
    1412:	aa 24       	eor	r10, r10
    1414:	bb 24       	eor	r11, r11
    1416:	a8 1a       	sub	r10, r24
    1418:	b9 0a       	sbc	r11, r25
    141a:	b0 e2       	ldi	r27, 0x20	; 32
    141c:	ab 16       	cp	r10, r27
    141e:	b1 04       	cpc	r11, r1
    1420:	0c f0       	brlt	.+2      	; 0x1424 <_fpadd_parts+0xb8>
    1422:	61 c0       	rjmp	.+194    	; 0x14e6 <_fpadd_parts+0x17a>
    1424:	18 16       	cp	r1, r24
    1426:	19 06       	cpc	r1, r25
    1428:	6c f5       	brge	.+90     	; 0x1484 <_fpadd_parts+0x118>
    142a:	37 01       	movw	r6, r14
    142c:	48 01       	movw	r8, r16
    142e:	0a 2c       	mov	r0, r10
    1430:	04 c0       	rjmp	.+8      	; 0x143a <_fpadd_parts+0xce>
    1432:	96 94       	lsr	r9
    1434:	87 94       	ror	r8
    1436:	77 94       	ror	r7
    1438:	67 94       	ror	r6
    143a:	0a 94       	dec	r0
    143c:	d2 f7       	brpl	.-12     	; 0x1432 <_fpadd_parts+0xc6>
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a0 e0       	ldi	r26, 0x00	; 0
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	0a 2c       	mov	r0, r10
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <_fpadd_parts+0xe6>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	aa 1f       	adc	r26, r26
    1450:	bb 1f       	adc	r27, r27
    1452:	0a 94       	dec	r0
    1454:	d2 f7       	brpl	.-12     	; 0x144a <_fpadd_parts+0xde>
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	a1 09       	sbc	r26, r1
    145a:	b1 09       	sbc	r27, r1
    145c:	8e 21       	and	r24, r14
    145e:	9f 21       	and	r25, r15
    1460:	a0 23       	and	r26, r16
    1462:	b1 23       	and	r27, r17
    1464:	ee 24       	eor	r14, r14
    1466:	ff 24       	eor	r15, r15
    1468:	87 01       	movw	r16, r14
    146a:	e3 94       	inc	r14
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	a1 05       	cpc	r26, r1
    1470:	b1 05       	cpc	r27, r1
    1472:	19 f4       	brne	.+6      	; 0x147a <_fpadd_parts+0x10e>
    1474:	ee 24       	eor	r14, r14
    1476:	ff 24       	eor	r15, r15
    1478:	87 01       	movw	r16, r14
    147a:	e6 28       	or	r14, r6
    147c:	f7 28       	or	r15, r7
    147e:	08 29       	or	r16, r8
    1480:	19 29       	or	r17, r9
    1482:	3c c0       	rjmp	.+120    	; 0x14fc <_fpadd_parts+0x190>
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	d1 f1       	breq	.+116    	; 0x14fc <_fpadd_parts+0x190>
    1488:	ca 0c       	add	r12, r10
    148a:	db 1c       	adc	r13, r11
    148c:	39 01       	movw	r6, r18
    148e:	4a 01       	movw	r8, r20
    1490:	0a 2c       	mov	r0, r10
    1492:	04 c0       	rjmp	.+8      	; 0x149c <_fpadd_parts+0x130>
    1494:	96 94       	lsr	r9
    1496:	87 94       	ror	r8
    1498:	77 94       	ror	r7
    149a:	67 94       	ror	r6
    149c:	0a 94       	dec	r0
    149e:	d2 f7       	brpl	.-12     	; 0x1494 <_fpadd_parts+0x128>
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a0 e0       	ldi	r26, 0x00	; 0
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	0a 2c       	mov	r0, r10
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <_fpadd_parts+0x148>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	aa 1f       	adc	r26, r26
    14b2:	bb 1f       	adc	r27, r27
    14b4:	0a 94       	dec	r0
    14b6:	d2 f7       	brpl	.-12     	; 0x14ac <_fpadd_parts+0x140>
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	a1 09       	sbc	r26, r1
    14bc:	b1 09       	sbc	r27, r1
    14be:	82 23       	and	r24, r18
    14c0:	93 23       	and	r25, r19
    14c2:	a4 23       	and	r26, r20
    14c4:	b5 23       	and	r27, r21
    14c6:	21 e0       	ldi	r18, 0x01	; 1
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	a1 05       	cpc	r26, r1
    14d2:	b1 05       	cpc	r27, r1
    14d4:	19 f4       	brne	.+6      	; 0x14dc <_fpadd_parts+0x170>
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	a9 01       	movw	r20, r18
    14dc:	26 29       	or	r18, r6
    14de:	37 29       	or	r19, r7
    14e0:	48 29       	or	r20, r8
    14e2:	59 29       	or	r21, r9
    14e4:	0b c0       	rjmp	.+22     	; 0x14fc <_fpadd_parts+0x190>
    14e6:	6c 14       	cp	r6, r12
    14e8:	7d 04       	cpc	r7, r13
    14ea:	24 f4       	brge	.+8      	; 0x14f4 <_fpadd_parts+0x188>
    14ec:	ee 24       	eor	r14, r14
    14ee:	ff 24       	eor	r15, r15
    14f0:	87 01       	movw	r16, r14
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <_fpadd_parts+0x190>
    14f4:	63 01       	movw	r12, r6
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	a9 01       	movw	r20, r18
    14fc:	81 81       	ldd	r24, Z+1	; 0x01
    14fe:	fb 01       	movw	r30, r22
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	89 17       	cp	r24, r25
    1504:	09 f4       	brne	.+2      	; 0x1508 <_fpadd_parts+0x19c>
    1506:	45 c0       	rjmp	.+138    	; 0x1592 <_fpadd_parts+0x226>
    1508:	88 23       	and	r24, r24
    150a:	49 f0       	breq	.+18     	; 0x151e <_fpadd_parts+0x1b2>
    150c:	d8 01       	movw	r26, r16
    150e:	c7 01       	movw	r24, r14
    1510:	82 1b       	sub	r24, r18
    1512:	93 0b       	sbc	r25, r19
    1514:	a4 0b       	sbc	r26, r20
    1516:	b5 0b       	sbc	r27, r21
    1518:	9c 01       	movw	r18, r24
    151a:	ad 01       	movw	r20, r26
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <_fpadd_parts+0x1ba>
    151e:	2e 19       	sub	r18, r14
    1520:	3f 09       	sbc	r19, r15
    1522:	40 0b       	sbc	r20, r16
    1524:	51 0b       	sbc	r21, r17
    1526:	57 fd       	sbrc	r21, 7
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <_fpadd_parts+0x1c6>
    152a:	19 82       	std	Y+1, r1	; 0x01
    152c:	db 82       	std	Y+3, r13	; 0x03
    152e:	ca 82       	std	Y+2, r12	; 0x02
    1530:	0b c0       	rjmp	.+22     	; 0x1548 <_fpadd_parts+0x1dc>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	db 82       	std	Y+3, r13	; 0x03
    1538:	ca 82       	std	Y+2, r12	; 0x02
    153a:	50 95       	com	r21
    153c:	40 95       	com	r20
    153e:	30 95       	com	r19
    1540:	21 95       	neg	r18
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	4f 4f       	sbci	r20, 0xFF	; 255
    1546:	5f 4f       	sbci	r21, 0xFF	; 255
    1548:	2c 83       	std	Y+4, r18	; 0x04
    154a:	3d 83       	std	Y+5, r19	; 0x05
    154c:	4e 83       	std	Y+6, r20	; 0x06
    154e:	5f 83       	std	Y+7, r21	; 0x07
    1550:	0d c0       	rjmp	.+26     	; 0x156c <_fpadd_parts+0x200>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	aa 1f       	adc	r26, r26
    1558:	bb 1f       	adc	r27, r27
    155a:	8c 83       	std	Y+4, r24	; 0x04
    155c:	9d 83       	std	Y+5, r25	; 0x05
    155e:	ae 83       	std	Y+6, r26	; 0x06
    1560:	bf 83       	std	Y+7, r27	; 0x07
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	9b 81       	ldd	r25, Y+3	; 0x03
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9b 83       	std	Y+3, r25	; 0x03
    156a:	8a 83       	std	Y+2, r24	; 0x02
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	ae 81       	ldd	r26, Y+6	; 0x06
    1572:	bf 81       	ldd	r27, Y+7	; 0x07
    1574:	9c 01       	movw	r18, r24
    1576:	ad 01       	movw	r20, r26
    1578:	21 50       	subi	r18, 0x01	; 1
    157a:	30 40       	sbci	r19, 0x00	; 0
    157c:	40 40       	sbci	r20, 0x00	; 0
    157e:	50 40       	sbci	r21, 0x00	; 0
    1580:	2f 3f       	cpi	r18, 0xFF	; 255
    1582:	ef ef       	ldi	r30, 0xFF	; 255
    1584:	3e 07       	cpc	r19, r30
    1586:	ef ef       	ldi	r30, 0xFF	; 255
    1588:	4e 07       	cpc	r20, r30
    158a:	ef e3       	ldi	r30, 0x3F	; 63
    158c:	5e 07       	cpc	r21, r30
    158e:	08 f3       	brcs	.-62     	; 0x1552 <_fpadd_parts+0x1e6>
    1590:	0b c0       	rjmp	.+22     	; 0x15a8 <_fpadd_parts+0x23c>
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	db 82       	std	Y+3, r13	; 0x03
    1596:	ca 82       	std	Y+2, r12	; 0x02
    1598:	2e 0d       	add	r18, r14
    159a:	3f 1d       	adc	r19, r15
    159c:	40 1f       	adc	r20, r16
    159e:	51 1f       	adc	r21, r17
    15a0:	2c 83       	std	Y+4, r18	; 0x04
    15a2:	3d 83       	std	Y+5, r19	; 0x05
    15a4:	4e 83       	std	Y+6, r20	; 0x06
    15a6:	5f 83       	std	Y+7, r21	; 0x07
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	88 83       	st	Y, r24
    15ac:	2c 81       	ldd	r18, Y+4	; 0x04
    15ae:	3d 81       	ldd	r19, Y+5	; 0x05
    15b0:	4e 81       	ldd	r20, Y+6	; 0x06
    15b2:	5f 81       	ldd	r21, Y+7	; 0x07
    15b4:	57 ff       	sbrs	r21, 7
    15b6:	1d c0       	rjmp	.+58     	; 0x15f2 <_fpadd_parts+0x286>
    15b8:	da 01       	movw	r26, r20
    15ba:	c9 01       	movw	r24, r18
    15bc:	81 70       	andi	r24, 0x01	; 1
    15be:	90 70       	andi	r25, 0x00	; 0
    15c0:	a0 70       	andi	r26, 0x00	; 0
    15c2:	b0 70       	andi	r27, 0x00	; 0
    15c4:	56 95       	lsr	r21
    15c6:	47 95       	ror	r20
    15c8:	37 95       	ror	r19
    15ca:	27 95       	ror	r18
    15cc:	82 2b       	or	r24, r18
    15ce:	93 2b       	or	r25, r19
    15d0:	a4 2b       	or	r26, r20
    15d2:	b5 2b       	or	r27, r21
    15d4:	8c 83       	std	Y+4, r24	; 0x04
    15d6:	9d 83       	std	Y+5, r25	; 0x05
    15d8:	ae 83       	std	Y+6, r26	; 0x06
    15da:	bf 83       	std	Y+7, r27	; 0x07
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	9b 83       	std	Y+3, r25	; 0x03
    15e4:	8a 83       	std	Y+2, r24	; 0x02
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <_fpadd_parts+0x286>
    15e8:	e6 e2       	ldi	r30, 0x26	; 38
    15ea:	f1 e0       	ldi	r31, 0x01	; 1
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <_fpadd_parts+0x288>
    15ee:	fb 01       	movw	r30, r22
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <_fpadd_parts+0x288>
    15f2:	fe 01       	movw	r30, r28
    15f4:	cf 01       	movw	r24, r30
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	ee e0       	ldi	r30, 0x0E	; 14
    15fc:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__epilogue_restores__+0x8>

00001600 <__addsf3>:
    1600:	a0 e2       	ldi	r26, 0x20	; 32
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e6 e0       	ldi	r30, 0x06	; 6
    1606:	fb e0       	ldi	r31, 0x0B	; 11
    1608:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__prologue_saves__+0x18>
    160c:	69 83       	std	Y+1, r22	; 0x01
    160e:	7a 83       	std	Y+2, r23	; 0x02
    1610:	8b 83       	std	Y+3, r24	; 0x03
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	2d 83       	std	Y+5, r18	; 0x05
    1616:	3e 83       	std	Y+6, r19	; 0x06
    1618:	4f 83       	std	Y+7, r20	; 0x07
    161a:	58 87       	std	Y+8, r21	; 0x08
    161c:	89 e0       	ldi	r24, 0x09	; 9
    161e:	e8 2e       	mov	r14, r24
    1620:	f1 2c       	mov	r15, r1
    1622:	ec 0e       	add	r14, r28
    1624:	fd 1e       	adc	r15, r29
    1626:	ce 01       	movw	r24, r28
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	b7 01       	movw	r22, r14
    162c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1630:	8e 01       	movw	r16, r28
    1632:	0f 5e       	subi	r16, 0xEF	; 239
    1634:	1f 4f       	sbci	r17, 0xFF	; 255
    1636:	ce 01       	movw	r24, r28
    1638:	05 96       	adiw	r24, 0x05	; 5
    163a:	b8 01       	movw	r22, r16
    163c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1640:	c7 01       	movw	r24, r14
    1642:	b8 01       	movw	r22, r16
    1644:	ae 01       	movw	r20, r28
    1646:	47 5e       	subi	r20, 0xE7	; 231
    1648:	5f 4f       	sbci	r21, 0xFF	; 255
    164a:	0e 94 b6 09 	call	0x136c	; 0x136c <_fpadd_parts>
    164e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__pack_f>
    1652:	a0 96       	adiw	r28, 0x20	; 32
    1654:	e6 e0       	ldi	r30, 0x06	; 6
    1656:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__epilogue_restores__+0x18>

0000165a <__subsf3>:
    165a:	a0 e2       	ldi	r26, 0x20	; 32
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e3 e3       	ldi	r30, 0x33	; 51
    1660:	fb e0       	ldi	r31, 0x0B	; 11
    1662:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__prologue_saves__+0x18>
    1666:	69 83       	std	Y+1, r22	; 0x01
    1668:	7a 83       	std	Y+2, r23	; 0x02
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	9c 83       	std	Y+4, r25	; 0x04
    166e:	2d 83       	std	Y+5, r18	; 0x05
    1670:	3e 83       	std	Y+6, r19	; 0x06
    1672:	4f 83       	std	Y+7, r20	; 0x07
    1674:	58 87       	std	Y+8, r21	; 0x08
    1676:	8e 01       	movw	r16, r28
    1678:	07 5f       	subi	r16, 0xF7	; 247
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
    167c:	ce 01       	movw	r24, r28
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	b8 01       	movw	r22, r16
    1682:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1686:	91 e1       	ldi	r25, 0x11	; 17
    1688:	e9 2e       	mov	r14, r25
    168a:	f1 2c       	mov	r15, r1
    168c:	ec 0e       	add	r14, r28
    168e:	fd 1e       	adc	r15, r29
    1690:	ce 01       	movw	r24, r28
    1692:	05 96       	adiw	r24, 0x05	; 5
    1694:	b7 01       	movw	r22, r14
    1696:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    169a:	8a 89       	ldd	r24, Y+18	; 0x12
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	89 27       	eor	r24, r25
    16a0:	8a 8b       	std	Y+18, r24	; 0x12
    16a2:	c8 01       	movw	r24, r16
    16a4:	b7 01       	movw	r22, r14
    16a6:	ae 01       	movw	r20, r28
    16a8:	47 5e       	subi	r20, 0xE7	; 231
    16aa:	5f 4f       	sbci	r21, 0xFF	; 255
    16ac:	0e 94 b6 09 	call	0x136c	; 0x136c <_fpadd_parts>
    16b0:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__pack_f>
    16b4:	a0 96       	adiw	r28, 0x20	; 32
    16b6:	e6 e0       	ldi	r30, 0x06	; 6
    16b8:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__epilogue_restores__+0x18>

000016bc <__mulsf3>:
    16bc:	a0 e2       	ldi	r26, 0x20	; 32
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e4 e6       	ldi	r30, 0x64	; 100
    16c2:	fb e0       	ldi	r31, 0x0B	; 11
    16c4:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__prologue_saves__>
    16c8:	69 83       	std	Y+1, r22	; 0x01
    16ca:	7a 83       	std	Y+2, r23	; 0x02
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    16ce:	9c 83       	std	Y+4, r25	; 0x04
    16d0:	2d 83       	std	Y+5, r18	; 0x05
    16d2:	3e 83       	std	Y+6, r19	; 0x06
    16d4:	4f 83       	std	Y+7, r20	; 0x07
    16d6:	58 87       	std	Y+8, r21	; 0x08
    16d8:	ce 01       	movw	r24, r28
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	be 01       	movw	r22, r28
    16de:	67 5f       	subi	r22, 0xF7	; 247
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    16e6:	ce 01       	movw	r24, r28
    16e8:	05 96       	adiw	r24, 0x05	; 5
    16ea:	be 01       	movw	r22, r28
    16ec:	6f 5e       	subi	r22, 0xEF	; 239
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    16f4:	99 85       	ldd	r25, Y+9	; 0x09
    16f6:	92 30       	cpi	r25, 0x02	; 2
    16f8:	78 f0       	brcs	.+30     	; 0x1718 <__mulsf3+0x5c>
    16fa:	89 89       	ldd	r24, Y+17	; 0x11
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	c0 f0       	brcs	.+48     	; 0x1730 <__mulsf3+0x74>
    1700:	94 30       	cpi	r25, 0x04	; 4
    1702:	19 f4       	brne	.+6      	; 0x170a <__mulsf3+0x4e>
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	41 f4       	brne	.+16     	; 0x1718 <__mulsf3+0x5c>
    1708:	cb c0       	rjmp	.+406    	; 0x18a0 <__mulsf3+0x1e4>
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	19 f4       	brne	.+6      	; 0x1714 <__mulsf3+0x58>
    170e:	92 30       	cpi	r25, 0x02	; 2
    1710:	79 f4       	brne	.+30     	; 0x1730 <__mulsf3+0x74>
    1712:	c6 c0       	rjmp	.+396    	; 0x18a0 <__mulsf3+0x1e4>
    1714:	92 30       	cpi	r25, 0x02	; 2
    1716:	51 f4       	brne	.+20     	; 0x172c <__mulsf3+0x70>
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	2a 85       	ldd	r18, Y+10	; 0x0a
    171c:	9a 89       	ldd	r25, Y+18	; 0x12
    171e:	29 17       	cp	r18, r25
    1720:	09 f4       	brne	.+2      	; 0x1724 <__mulsf3+0x68>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	8a 87       	std	Y+10, r24	; 0x0a
    1726:	ce 01       	movw	r24, r28
    1728:	09 96       	adiw	r24, 0x09	; 9
    172a:	bc c0       	rjmp	.+376    	; 0x18a4 <__mulsf3+0x1e8>
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	51 f4       	brne	.+20     	; 0x1744 <__mulsf3+0x88>
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	2a 85       	ldd	r18, Y+10	; 0x0a
    1734:	9a 89       	ldd	r25, Y+18	; 0x12
    1736:	29 17       	cp	r18, r25
    1738:	09 f4       	brne	.+2      	; 0x173c <__mulsf3+0x80>
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	8a 8b       	std	Y+18, r24	; 0x12
    173e:	ce 01       	movw	r24, r28
    1740:	41 96       	adiw	r24, 0x11	; 17
    1742:	b0 c0       	rjmp	.+352    	; 0x18a4 <__mulsf3+0x1e8>
    1744:	6d 84       	ldd	r6, Y+13	; 0x0d
    1746:	7e 84       	ldd	r7, Y+14	; 0x0e
    1748:	8f 84       	ldd	r8, Y+15	; 0x0f
    174a:	98 88       	ldd	r9, Y+16	; 0x10
    174c:	ed 88       	ldd	r14, Y+21	; 0x15
    174e:	fe 88       	ldd	r15, Y+22	; 0x16
    1750:	0f 89       	ldd	r16, Y+23	; 0x17
    1752:	18 8d       	ldd	r17, Y+24	; 0x18
    1754:	e0 e2       	ldi	r30, 0x20	; 32
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	dc 01       	movw	r26, r24
    175e:	aa 24       	eor	r10, r10
    1760:	bb 24       	eor	r11, r11
    1762:	65 01       	movw	r12, r10
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	a9 01       	movw	r20, r18
    176a:	b3 01       	movw	r22, r6
    176c:	61 70       	andi	r22, 0x01	; 1
    176e:	70 70       	andi	r23, 0x00	; 0
    1770:	61 15       	cp	r22, r1
    1772:	71 05       	cpc	r23, r1
    1774:	d1 f0       	breq	.+52     	; 0x17aa <__mulsf3+0xee>
    1776:	2e 0d       	add	r18, r14
    1778:	3f 1d       	adc	r19, r15
    177a:	40 1f       	adc	r20, r16
    177c:	51 1f       	adc	r21, r17
    177e:	15 01       	movw	r2, r10
    1780:	26 01       	movw	r4, r12
    1782:	28 0e       	add	r2, r24
    1784:	39 1e       	adc	r3, r25
    1786:	4a 1e       	adc	r4, r26
    1788:	5b 1e       	adc	r5, r27
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e0       	ldi	r26, 0x00	; 0
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	2e 15       	cp	r18, r14
    1794:	3f 05       	cpc	r19, r15
    1796:	40 07       	cpc	r20, r16
    1798:	51 07       	cpc	r21, r17
    179a:	18 f0       	brcs	.+6      	; 0x17a2 <__mulsf3+0xe6>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	dc 01       	movw	r26, r24
    17a2:	82 0d       	add	r24, r2
    17a4:	93 1d       	adc	r25, r3
    17a6:	a4 1d       	adc	r26, r4
    17a8:	b5 1d       	adc	r27, r5
    17aa:	aa 0c       	add	r10, r10
    17ac:	bb 1c       	adc	r11, r11
    17ae:	cc 1c       	adc	r12, r12
    17b0:	dd 1c       	adc	r13, r13
    17b2:	17 ff       	sbrs	r17, 7
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <__mulsf3+0x10c>
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	26 2e       	mov	r2, r22
    17ba:	31 2c       	mov	r3, r1
    17bc:	41 2c       	mov	r4, r1
    17be:	51 2c       	mov	r5, r1
    17c0:	a2 28       	or	r10, r2
    17c2:	b3 28       	or	r11, r3
    17c4:	c4 28       	or	r12, r4
    17c6:	d5 28       	or	r13, r5
    17c8:	31 97       	sbiw	r30, 0x01	; 1
    17ca:	49 f0       	breq	.+18     	; 0x17de <__mulsf3+0x122>
    17cc:	ee 0c       	add	r14, r14
    17ce:	ff 1c       	adc	r15, r15
    17d0:	00 1f       	adc	r16, r16
    17d2:	11 1f       	adc	r17, r17
    17d4:	96 94       	lsr	r9
    17d6:	87 94       	ror	r8
    17d8:	77 94       	ror	r7
    17da:	67 94       	ror	r6
    17dc:	c6 cf       	rjmp	.-116    	; 0x176a <__mulsf3+0xae>
    17de:	6b 89       	ldd	r22, Y+19	; 0x13
    17e0:	7c 89       	ldd	r23, Y+20	; 0x14
    17e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    17e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    17e6:	6e 0f       	add	r22, r30
    17e8:	7f 1f       	adc	r23, r31
    17ea:	6e 5f       	subi	r22, 0xFE	; 254
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	7c 8f       	std	Y+28, r23	; 0x1c
    17f0:	6b 8f       	std	Y+27, r22	; 0x1b
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    17f6:	7a 89       	ldd	r23, Y+18	; 0x12
    17f8:	e7 17       	cp	r30, r23
    17fa:	09 f4       	brne	.+2      	; 0x17fe <__mulsf3+0x142>
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	6a 8f       	std	Y+26, r22	; 0x1a
    1800:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1802:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1804:	10 c0       	rjmp	.+32     	; 0x1826 <__mulsf3+0x16a>
    1806:	fc 01       	movw	r30, r24
    1808:	e1 70       	andi	r30, 0x01	; 1
    180a:	f0 70       	andi	r31, 0x00	; 0
    180c:	30 97       	sbiw	r30, 0x00	; 0
    180e:	29 f0       	breq	.+10     	; 0x181a <__mulsf3+0x15e>
    1810:	56 95       	lsr	r21
    1812:	47 95       	ror	r20
    1814:	37 95       	ror	r19
    1816:	27 95       	ror	r18
    1818:	50 68       	ori	r21, 0x80	; 128
    181a:	b6 95       	lsr	r27
    181c:	a7 95       	ror	r26
    181e:	97 95       	ror	r25
    1820:	87 95       	ror	r24
    1822:	6f 5f       	subi	r22, 0xFF	; 255
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	b7 fd       	sbrc	r27, 7
    1828:	ee cf       	rjmp	.-36     	; 0x1806 <__mulsf3+0x14a>
    182a:	0c c0       	rjmp	.+24     	; 0x1844 <__mulsf3+0x188>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	aa 1f       	adc	r26, r26
    1832:	bb 1f       	adc	r27, r27
    1834:	57 fd       	sbrc	r21, 7
    1836:	81 60       	ori	r24, 0x01	; 1
    1838:	22 0f       	add	r18, r18
    183a:	33 1f       	adc	r19, r19
    183c:	44 1f       	adc	r20, r20
    183e:	55 1f       	adc	r21, r21
    1840:	61 50       	subi	r22, 0x01	; 1
    1842:	70 40       	sbci	r23, 0x00	; 0
    1844:	80 30       	cpi	r24, 0x00	; 0
    1846:	e0 e0       	ldi	r30, 0x00	; 0
    1848:	9e 07       	cpc	r25, r30
    184a:	e0 e0       	ldi	r30, 0x00	; 0
    184c:	ae 07       	cpc	r26, r30
    184e:	e0 e4       	ldi	r30, 0x40	; 64
    1850:	be 07       	cpc	r27, r30
    1852:	60 f3       	brcs	.-40     	; 0x182c <__mulsf3+0x170>
    1854:	6b 8f       	std	Y+27, r22	; 0x1b
    1856:	7c 8f       	std	Y+28, r23	; 0x1c
    1858:	6f e7       	ldi	r22, 0x7F	; 127
    185a:	e6 2e       	mov	r14, r22
    185c:	f1 2c       	mov	r15, r1
    185e:	01 2d       	mov	r16, r1
    1860:	11 2d       	mov	r17, r1
    1862:	e8 22       	and	r14, r24
    1864:	f9 22       	and	r15, r25
    1866:	0a 23       	and	r16, r26
    1868:	1b 23       	and	r17, r27
    186a:	60 e4       	ldi	r22, 0x40	; 64
    186c:	e6 16       	cp	r14, r22
    186e:	f1 04       	cpc	r15, r1
    1870:	01 05       	cpc	r16, r1
    1872:	11 05       	cpc	r17, r1
    1874:	61 f4       	brne	.+24     	; 0x188e <__mulsf3+0x1d2>
    1876:	87 fd       	sbrc	r24, 7
    1878:	0a c0       	rjmp	.+20     	; 0x188e <__mulsf3+0x1d2>
    187a:	21 15       	cp	r18, r1
    187c:	31 05       	cpc	r19, r1
    187e:	41 05       	cpc	r20, r1
    1880:	51 05       	cpc	r21, r1
    1882:	29 f0       	breq	.+10     	; 0x188e <__mulsf3+0x1d2>
    1884:	80 5c       	subi	r24, 0xC0	; 192
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	af 4f       	sbci	r26, 0xFF	; 255
    188a:	bf 4f       	sbci	r27, 0xFF	; 255
    188c:	80 78       	andi	r24, 0x80	; 128
    188e:	8d 8f       	std	Y+29, r24	; 0x1d
    1890:	9e 8f       	std	Y+30, r25	; 0x1e
    1892:	af 8f       	std	Y+31, r26	; 0x1f
    1894:	b8 a3       	std	Y+32, r27	; 0x20
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	89 8f       	std	Y+25, r24	; 0x19
    189a:	ce 01       	movw	r24, r28
    189c:	49 96       	adiw	r24, 0x19	; 25
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <__mulsf3+0x1e8>
    18a0:	86 e2       	ldi	r24, 0x26	; 38
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__pack_f>
    18a8:	a0 96       	adiw	r28, 0x20	; 32
    18aa:	e2 e1       	ldi	r30, 0x12	; 18
    18ac:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__epilogue_restores__>

000018b0 <__divsf3>:
    18b0:	a8 e1       	ldi	r26, 0x18	; 24
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ee e5       	ldi	r30, 0x5E	; 94
    18b6:	fc e0       	ldi	r31, 0x0C	; 12
    18b8:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__prologue_saves__+0x10>
    18bc:	69 83       	std	Y+1, r22	; 0x01
    18be:	7a 83       	std	Y+2, r23	; 0x02
    18c0:	8b 83       	std	Y+3, r24	; 0x03
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	2d 83       	std	Y+5, r18	; 0x05
    18c6:	3e 83       	std	Y+6, r19	; 0x06
    18c8:	4f 83       	std	Y+7, r20	; 0x07
    18ca:	58 87       	std	Y+8, r21	; 0x08
    18cc:	8e 01       	movw	r16, r28
    18ce:	07 5f       	subi	r16, 0xF7	; 247
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	ce 01       	movw	r24, r28
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	b8 01       	movw	r22, r16
    18d8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    18dc:	81 e1       	ldi	r24, 0x11	; 17
    18de:	e8 2e       	mov	r14, r24
    18e0:	f1 2c       	mov	r15, r1
    18e2:	ec 0e       	add	r14, r28
    18e4:	fd 1e       	adc	r15, r29
    18e6:	ce 01       	movw	r24, r28
    18e8:	05 96       	adiw	r24, 0x05	; 5
    18ea:	b7 01       	movw	r22, r14
    18ec:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    18f0:	99 85       	ldd	r25, Y+9	; 0x09
    18f2:	92 30       	cpi	r25, 0x02	; 2
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <__divsf3+0x48>
    18f6:	83 c0       	rjmp	.+262    	; 0x19fe <__divsf3+0x14e>
    18f8:	89 89       	ldd	r24, Y+17	; 0x11
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	08 f4       	brcc	.+2      	; 0x1900 <__divsf3+0x50>
    18fe:	7b c0       	rjmp	.+246    	; 0x19f6 <__divsf3+0x146>
    1900:	2a 85       	ldd	r18, Y+10	; 0x0a
    1902:	3a 89       	ldd	r19, Y+18	; 0x12
    1904:	23 27       	eor	r18, r19
    1906:	2a 87       	std	Y+10, r18	; 0x0a
    1908:	94 30       	cpi	r25, 0x04	; 4
    190a:	11 f0       	breq	.+4      	; 0x1910 <__divsf3+0x60>
    190c:	92 30       	cpi	r25, 0x02	; 2
    190e:	21 f4       	brne	.+8      	; 0x1918 <__divsf3+0x68>
    1910:	98 17       	cp	r25, r24
    1912:	09 f0       	breq	.+2      	; 0x1916 <__divsf3+0x66>
    1914:	6c c0       	rjmp	.+216    	; 0x19ee <__divsf3+0x13e>
    1916:	71 c0       	rjmp	.+226    	; 0x19fa <__divsf3+0x14a>
    1918:	84 30       	cpi	r24, 0x04	; 4
    191a:	39 f4       	brne	.+14     	; 0x192a <__divsf3+0x7a>
    191c:	1d 86       	std	Y+13, r1	; 0x0d
    191e:	1e 86       	std	Y+14, r1	; 0x0e
    1920:	1f 86       	std	Y+15, r1	; 0x0f
    1922:	18 8a       	std	Y+16, r1	; 0x10
    1924:	1c 86       	std	Y+12, r1	; 0x0c
    1926:	1b 86       	std	Y+11, r1	; 0x0b
    1928:	6a c0       	rjmp	.+212    	; 0x19fe <__divsf3+0x14e>
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	19 f4       	brne	.+6      	; 0x1934 <__divsf3+0x84>
    192e:	84 e0       	ldi	r24, 0x04	; 4
    1930:	89 87       	std	Y+9, r24	; 0x09
    1932:	65 c0       	rjmp	.+202    	; 0x19fe <__divsf3+0x14e>
    1934:	8b 85       	ldd	r24, Y+11	; 0x0b
    1936:	9c 85       	ldd	r25, Y+12	; 0x0c
    1938:	2b 89       	ldd	r18, Y+19	; 0x13
    193a:	3c 89       	ldd	r19, Y+20	; 0x14
    193c:	82 1b       	sub	r24, r18
    193e:	93 0b       	sbc	r25, r19
    1940:	9c 87       	std	Y+12, r25	; 0x0c
    1942:	8b 87       	std	Y+11, r24	; 0x0b
    1944:	2d 85       	ldd	r18, Y+13	; 0x0d
    1946:	3e 85       	ldd	r19, Y+14	; 0x0e
    1948:	4f 85       	ldd	r20, Y+15	; 0x0f
    194a:	58 89       	ldd	r21, Y+16	; 0x10
    194c:	ed 88       	ldd	r14, Y+21	; 0x15
    194e:	fe 88       	ldd	r15, Y+22	; 0x16
    1950:	0f 89       	ldd	r16, Y+23	; 0x17
    1952:	18 8d       	ldd	r17, Y+24	; 0x18
    1954:	2e 15       	cp	r18, r14
    1956:	3f 05       	cpc	r19, r15
    1958:	40 07       	cpc	r20, r16
    195a:	51 07       	cpc	r21, r17
    195c:	38 f4       	brcc	.+14     	; 0x196c <__divsf3+0xbc>
    195e:	22 0f       	add	r18, r18
    1960:	33 1f       	adc	r19, r19
    1962:	44 1f       	adc	r20, r20
    1964:	55 1f       	adc	r21, r21
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	9c 87       	std	Y+12, r25	; 0x0c
    196a:	8b 87       	std	Y+11, r24	; 0x0b
    196c:	6f e1       	ldi	r22, 0x1F	; 31
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	a1 2c       	mov	r10, r1
    1972:	b1 2c       	mov	r11, r1
    1974:	c1 2c       	mov	r12, r1
    1976:	a0 e4       	ldi	r26, 0x40	; 64
    1978:	da 2e       	mov	r13, r26
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	dc 01       	movw	r26, r24
    1980:	2e 15       	cp	r18, r14
    1982:	3f 05       	cpc	r19, r15
    1984:	40 07       	cpc	r20, r16
    1986:	51 07       	cpc	r21, r17
    1988:	40 f0       	brcs	.+16     	; 0x199a <__divsf3+0xea>
    198a:	8a 29       	or	r24, r10
    198c:	9b 29       	or	r25, r11
    198e:	ac 29       	or	r26, r12
    1990:	bd 29       	or	r27, r13
    1992:	2e 19       	sub	r18, r14
    1994:	3f 09       	sbc	r19, r15
    1996:	40 0b       	sbc	r20, r16
    1998:	51 0b       	sbc	r21, r17
    199a:	d6 94       	lsr	r13
    199c:	c7 94       	ror	r12
    199e:	b7 94       	ror	r11
    19a0:	a7 94       	ror	r10
    19a2:	22 0f       	add	r18, r18
    19a4:	33 1f       	adc	r19, r19
    19a6:	44 1f       	adc	r20, r20
    19a8:	55 1f       	adc	r21, r21
    19aa:	61 50       	subi	r22, 0x01	; 1
    19ac:	70 40       	sbci	r23, 0x00	; 0
    19ae:	41 f7       	brne	.-48     	; 0x1980 <__divsf3+0xd0>
    19b0:	6f e7       	ldi	r22, 0x7F	; 127
    19b2:	e6 2e       	mov	r14, r22
    19b4:	f1 2c       	mov	r15, r1
    19b6:	01 2d       	mov	r16, r1
    19b8:	11 2d       	mov	r17, r1
    19ba:	e8 22       	and	r14, r24
    19bc:	f9 22       	and	r15, r25
    19be:	0a 23       	and	r16, r26
    19c0:	1b 23       	and	r17, r27
    19c2:	60 e4       	ldi	r22, 0x40	; 64
    19c4:	e6 16       	cp	r14, r22
    19c6:	f1 04       	cpc	r15, r1
    19c8:	01 05       	cpc	r16, r1
    19ca:	11 05       	cpc	r17, r1
    19cc:	61 f4       	brne	.+24     	; 0x19e6 <__divsf3+0x136>
    19ce:	87 fd       	sbrc	r24, 7
    19d0:	0a c0       	rjmp	.+20     	; 0x19e6 <__divsf3+0x136>
    19d2:	21 15       	cp	r18, r1
    19d4:	31 05       	cpc	r19, r1
    19d6:	41 05       	cpc	r20, r1
    19d8:	51 05       	cpc	r21, r1
    19da:	29 f0       	breq	.+10     	; 0x19e6 <__divsf3+0x136>
    19dc:	80 5c       	subi	r24, 0xC0	; 192
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	af 4f       	sbci	r26, 0xFF	; 255
    19e2:	bf 4f       	sbci	r27, 0xFF	; 255
    19e4:	80 78       	andi	r24, 0x80	; 128
    19e6:	8d 87       	std	Y+13, r24	; 0x0d
    19e8:	9e 87       	std	Y+14, r25	; 0x0e
    19ea:	af 87       	std	Y+15, r26	; 0x0f
    19ec:	b8 8b       	std	Y+16, r27	; 0x10
    19ee:	8e 01       	movw	r16, r28
    19f0:	07 5f       	subi	r16, 0xF7	; 247
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <__divsf3+0x14e>
    19f6:	87 01       	movw	r16, r14
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <__divsf3+0x14e>
    19fa:	06 e2       	ldi	r16, 0x26	; 38
    19fc:	11 e0       	ldi	r17, 0x01	; 1
    19fe:	c8 01       	movw	r24, r16
    1a00:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__pack_f>
    1a04:	68 96       	adiw	r28, 0x18	; 24
    1a06:	ea e0       	ldi	r30, 0x0A	; 10
    1a08:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__epilogue_restores__+0x10>

00001a0c <__gtsf2>:
    1a0c:	a8 e1       	ldi	r26, 0x18	; 24
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ec e0       	ldi	r30, 0x0C	; 12
    1a12:	fd e0       	ldi	r31, 0x0D	; 13
    1a14:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__prologue_saves__+0x18>
    1a18:	69 83       	std	Y+1, r22	; 0x01
    1a1a:	7a 83       	std	Y+2, r23	; 0x02
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	2d 83       	std	Y+5, r18	; 0x05
    1a22:	3e 83       	std	Y+6, r19	; 0x06
    1a24:	4f 83       	std	Y+7, r20	; 0x07
    1a26:	58 87       	std	Y+8, r21	; 0x08
    1a28:	8e 01       	movw	r16, r28
    1a2a:	07 5f       	subi	r16, 0xF7	; 247
    1a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	b8 01       	movw	r22, r16
    1a34:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1a38:	81 e1       	ldi	r24, 0x11	; 17
    1a3a:	e8 2e       	mov	r14, r24
    1a3c:	f1 2c       	mov	r15, r1
    1a3e:	ec 0e       	add	r14, r28
    1a40:	fd 1e       	adc	r15, r29
    1a42:	ce 01       	movw	r24, r28
    1a44:	05 96       	adiw	r24, 0x05	; 5
    1a46:	b7 01       	movw	r22, r14
    1a48:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1a4c:	89 85       	ldd	r24, Y+9	; 0x09
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	40 f0       	brcs	.+16     	; 0x1a62 <__gtsf2+0x56>
    1a52:	89 89       	ldd	r24, Y+17	; 0x11
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	28 f0       	brcs	.+10     	; 0x1a62 <__gtsf2+0x56>
    1a58:	c8 01       	movw	r24, r16
    1a5a:	b7 01       	movw	r22, r14
    1a5c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__fpcmp_parts_f>
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <__gtsf2+0x58>
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	68 96       	adiw	r28, 0x18	; 24
    1a66:	e6 e0       	ldi	r30, 0x06	; 6
    1a68:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__epilogue_restores__+0x18>

00001a6c <__gesf2>:
    1a6c:	a8 e1       	ldi	r26, 0x18	; 24
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ec e3       	ldi	r30, 0x3C	; 60
    1a72:	fd e0       	ldi	r31, 0x0D	; 13
    1a74:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__prologue_saves__+0x18>
    1a78:	69 83       	std	Y+1, r22	; 0x01
    1a7a:	7a 83       	std	Y+2, r23	; 0x02
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	2d 83       	std	Y+5, r18	; 0x05
    1a82:	3e 83       	std	Y+6, r19	; 0x06
    1a84:	4f 83       	std	Y+7, r20	; 0x07
    1a86:	58 87       	std	Y+8, r21	; 0x08
    1a88:	8e 01       	movw	r16, r28
    1a8a:	07 5f       	subi	r16, 0xF7	; 247
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	ce 01       	movw	r24, r28
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	b8 01       	movw	r22, r16
    1a94:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1a98:	81 e1       	ldi	r24, 0x11	; 17
    1a9a:	e8 2e       	mov	r14, r24
    1a9c:	f1 2c       	mov	r15, r1
    1a9e:	ec 0e       	add	r14, r28
    1aa0:	fd 1e       	adc	r15, r29
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	05 96       	adiw	r24, 0x05	; 5
    1aa6:	b7 01       	movw	r22, r14
    1aa8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	40 f0       	brcs	.+16     	; 0x1ac2 <__gesf2+0x56>
    1ab2:	89 89       	ldd	r24, Y+17	; 0x11
    1ab4:	82 30       	cpi	r24, 0x02	; 2
    1ab6:	28 f0       	brcs	.+10     	; 0x1ac2 <__gesf2+0x56>
    1ab8:	c8 01       	movw	r24, r16
    1aba:	b7 01       	movw	r22, r14
    1abc:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__fpcmp_parts_f>
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <__gesf2+0x58>
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	68 96       	adiw	r28, 0x18	; 24
    1ac6:	e6 e0       	ldi	r30, 0x06	; 6
    1ac8:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__epilogue_restores__+0x18>

00001acc <__ltsf2>:
    1acc:	a8 e1       	ldi	r26, 0x18	; 24
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ec e6       	ldi	r30, 0x6C	; 108
    1ad2:	fd e0       	ldi	r31, 0x0D	; 13
    1ad4:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__prologue_saves__+0x18>
    1ad8:	69 83       	std	Y+1, r22	; 0x01
    1ada:	7a 83       	std	Y+2, r23	; 0x02
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	2d 83       	std	Y+5, r18	; 0x05
    1ae2:	3e 83       	std	Y+6, r19	; 0x06
    1ae4:	4f 83       	std	Y+7, r20	; 0x07
    1ae6:	58 87       	std	Y+8, r21	; 0x08
    1ae8:	8e 01       	movw	r16, r28
    1aea:	07 5f       	subi	r16, 0xF7	; 247
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	ce 01       	movw	r24, r28
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	b8 01       	movw	r22, r16
    1af4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1af8:	81 e1       	ldi	r24, 0x11	; 17
    1afa:	e8 2e       	mov	r14, r24
    1afc:	f1 2c       	mov	r15, r1
    1afe:	ec 0e       	add	r14, r28
    1b00:	fd 1e       	adc	r15, r29
    1b02:	ce 01       	movw	r24, r28
    1b04:	05 96       	adiw	r24, 0x05	; 5
    1b06:	b7 01       	movw	r22, r14
    1b08:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	40 f0       	brcs	.+16     	; 0x1b22 <__ltsf2+0x56>
    1b12:	89 89       	ldd	r24, Y+17	; 0x11
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	28 f0       	brcs	.+10     	; 0x1b22 <__ltsf2+0x56>
    1b18:	c8 01       	movw	r24, r16
    1b1a:	b7 01       	movw	r22, r14
    1b1c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__fpcmp_parts_f>
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <__ltsf2+0x58>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	68 96       	adiw	r28, 0x18	; 24
    1b26:	e6 e0       	ldi	r30, 0x06	; 6
    1b28:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__epilogue_restores__+0x18>

00001b2c <__fixsfsi>:
    1b2c:	ac e0       	ldi	r26, 0x0C	; 12
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ec e9       	ldi	r30, 0x9C	; 156
    1b32:	fd e0       	ldi	r31, 0x0D	; 13
    1b34:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__prologue_saves__+0x20>
    1b38:	69 83       	std	Y+1, r22	; 0x01
    1b3a:	7a 83       	std	Y+2, r23	; 0x02
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	ce 01       	movw	r24, r28
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	be 01       	movw	r22, r28
    1b46:	6b 5f       	subi	r22, 0xFB	; 251
    1b48:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__unpack_f>
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	81 f1       	breq	.+96     	; 0x1bb4 <__fixsfsi+0x88>
    1b54:	82 30       	cpi	r24, 0x02	; 2
    1b56:	70 f1       	brcs	.+92     	; 0x1bb4 <__fixsfsi+0x88>
    1b58:	84 30       	cpi	r24, 0x04	; 4
    1b5a:	21 f4       	brne	.+8      	; 0x1b64 <__fixsfsi+0x38>
    1b5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5e:	88 23       	and	r24, r24
    1b60:	69 f1       	breq	.+90     	; 0x1bbc <__fixsfsi+0x90>
    1b62:	0a c0       	rjmp	.+20     	; 0x1b78 <__fixsfsi+0x4c>
    1b64:	2f 81       	ldd	r18, Y+7	; 0x07
    1b66:	38 85       	ldd	r19, Y+8	; 0x08
    1b68:	37 fd       	sbrc	r19, 7
    1b6a:	24 c0       	rjmp	.+72     	; 0x1bb4 <__fixsfsi+0x88>
    1b6c:	6e 81       	ldd	r22, Y+6	; 0x06
    1b6e:	2f 31       	cpi	r18, 0x1F	; 31
    1b70:	31 05       	cpc	r19, r1
    1b72:	3c f0       	brlt	.+14     	; 0x1b82 <__fixsfsi+0x56>
    1b74:	66 23       	and	r22, r22
    1b76:	11 f1       	breq	.+68     	; 0x1bbc <__fixsfsi+0x90>
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	50 e8       	ldi	r21, 0x80	; 128
    1b80:	21 c0       	rjmp	.+66     	; 0x1bc4 <__fixsfsi+0x98>
    1b82:	8e e1       	ldi	r24, 0x1E	; 30
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	82 1b       	sub	r24, r18
    1b88:	93 0b       	sbc	r25, r19
    1b8a:	29 85       	ldd	r18, Y+9	; 0x09
    1b8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b8e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b90:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b92:	04 c0       	rjmp	.+8      	; 0x1b9c <__fixsfsi+0x70>
    1b94:	56 95       	lsr	r21
    1b96:	47 95       	ror	r20
    1b98:	37 95       	ror	r19
    1b9a:	27 95       	ror	r18
    1b9c:	8a 95       	dec	r24
    1b9e:	d2 f7       	brpl	.-12     	; 0x1b94 <__fixsfsi+0x68>
    1ba0:	66 23       	and	r22, r22
    1ba2:	81 f0       	breq	.+32     	; 0x1bc4 <__fixsfsi+0x98>
    1ba4:	50 95       	com	r21
    1ba6:	40 95       	com	r20
    1ba8:	30 95       	com	r19
    1baa:	21 95       	neg	r18
    1bac:	3f 4f       	sbci	r19, 0xFF	; 255
    1bae:	4f 4f       	sbci	r20, 0xFF	; 255
    1bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb2:	08 c0       	rjmp	.+16     	; 0x1bc4 <__fixsfsi+0x98>
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	a9 01       	movw	r20, r18
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <__fixsfsi+0x98>
    1bbc:	2f ef       	ldi	r18, 0xFF	; 255
    1bbe:	3f ef       	ldi	r19, 0xFF	; 255
    1bc0:	4f ef       	ldi	r20, 0xFF	; 255
    1bc2:	5f e7       	ldi	r21, 0x7F	; 127
    1bc4:	b9 01       	movw	r22, r18
    1bc6:	ca 01       	movw	r24, r20
    1bc8:	2c 96       	adiw	r28, 0x0c	; 12
    1bca:	e2 e0       	ldi	r30, 0x02	; 2
    1bcc:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__epilogue_restores__+0x20>

00001bd0 <__pack_f>:
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	fc 01       	movw	r30, r24
    1bde:	24 81       	ldd	r18, Z+4	; 0x04
    1be0:	35 81       	ldd	r19, Z+5	; 0x05
    1be2:	46 81       	ldd	r20, Z+6	; 0x06
    1be4:	57 81       	ldd	r21, Z+7	; 0x07
    1be6:	61 81       	ldd	r22, Z+1	; 0x01
    1be8:	80 81       	ld	r24, Z
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	20 f4       	brcc	.+8      	; 0x1bf6 <__pack_f+0x26>
    1bee:	40 61       	ori	r20, 0x10	; 16
    1bf0:	ef ef       	ldi	r30, 0xFF	; 255
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	a3 c0       	rjmp	.+326    	; 0x1d3c <__pack_f+0x16c>
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <__pack_f+0x2c>
    1bfa:	9b c0       	rjmp	.+310    	; 0x1d32 <__pack_f+0x162>
    1bfc:	82 30       	cpi	r24, 0x02	; 2
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <__pack_f+0x32>
    1c00:	92 c0       	rjmp	.+292    	; 0x1d26 <__pack_f+0x156>
    1c02:	21 15       	cp	r18, r1
    1c04:	31 05       	cpc	r19, r1
    1c06:	41 05       	cpc	r20, r1
    1c08:	51 05       	cpc	r21, r1
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <__pack_f+0x3e>
    1c0c:	8f c0       	rjmp	.+286    	; 0x1d2c <__pack_f+0x15c>
    1c0e:	02 80       	ldd	r0, Z+2	; 0x02
    1c10:	f3 81       	ldd	r31, Z+3	; 0x03
    1c12:	e0 2d       	mov	r30, r0
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	e2 38       	cpi	r30, 0x82	; 130
    1c18:	f8 07       	cpc	r31, r24
    1c1a:	0c f0       	brlt	.+2      	; 0x1c1e <__pack_f+0x4e>
    1c1c:	5a c0       	rjmp	.+180    	; 0x1cd2 <__pack_f+0x102>
    1c1e:	c2 e8       	ldi	r28, 0x82	; 130
    1c20:	df ef       	ldi	r29, 0xFF	; 255
    1c22:	ce 1b       	sub	r28, r30
    1c24:	df 0b       	sbc	r29, r31
    1c26:	ca 31       	cpi	r28, 0x1A	; 26
    1c28:	d1 05       	cpc	r29, r1
    1c2a:	6c f5       	brge	.+90     	; 0x1c86 <__pack_f+0xb6>
    1c2c:	79 01       	movw	r14, r18
    1c2e:	8a 01       	movw	r16, r20
    1c30:	0c 2e       	mov	r0, r28
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <__pack_f+0x6c>
    1c34:	16 95       	lsr	r17
    1c36:	07 95       	ror	r16
    1c38:	f7 94       	ror	r15
    1c3a:	e7 94       	ror	r14
    1c3c:	0a 94       	dec	r0
    1c3e:	d2 f7       	brpl	.-12     	; 0x1c34 <__pack_f+0x64>
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e0       	ldi	r26, 0x00	; 0
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	0c 2e       	mov	r0, r28
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <__pack_f+0x84>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	aa 1f       	adc	r26, r26
    1c52:	bb 1f       	adc	r27, r27
    1c54:	0a 94       	dec	r0
    1c56:	d2 f7       	brpl	.-12     	; 0x1c4c <__pack_f+0x7c>
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	a1 09       	sbc	r26, r1
    1c5c:	b1 09       	sbc	r27, r1
    1c5e:	82 23       	and	r24, r18
    1c60:	93 23       	and	r25, r19
    1c62:	a4 23       	and	r26, r20
    1c64:	b5 23       	and	r27, r21
    1c66:	21 e0       	ldi	r18, 0x01	; 1
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	a1 05       	cpc	r26, r1
    1c72:	b1 05       	cpc	r27, r1
    1c74:	19 f4       	brne	.+6      	; 0x1c7c <__pack_f+0xac>
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	a9 01       	movw	r20, r18
    1c7c:	2e 29       	or	r18, r14
    1c7e:	3f 29       	or	r19, r15
    1c80:	40 2b       	or	r20, r16
    1c82:	51 2b       	or	r21, r17
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <__pack_f+0xbc>
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	a9 01       	movw	r20, r18
    1c8c:	da 01       	movw	r26, r20
    1c8e:	c9 01       	movw	r24, r18
    1c90:	8f 77       	andi	r24, 0x7F	; 127
    1c92:	90 70       	andi	r25, 0x00	; 0
    1c94:	a0 70       	andi	r26, 0x00	; 0
    1c96:	b0 70       	andi	r27, 0x00	; 0
    1c98:	80 34       	cpi	r24, 0x40	; 64
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	a1 05       	cpc	r26, r1
    1c9e:	b1 05       	cpc	r27, r1
    1ca0:	39 f4       	brne	.+14     	; 0x1cb0 <__pack_f+0xe0>
    1ca2:	27 ff       	sbrs	r18, 7
    1ca4:	09 c0       	rjmp	.+18     	; 0x1cb8 <__pack_f+0xe8>
    1ca6:	20 5c       	subi	r18, 0xC0	; 192
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	4f 4f       	sbci	r20, 0xFF	; 255
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <__pack_f+0xe8>
    1cb0:	21 5c       	subi	r18, 0xC1	; 193
    1cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb4:	4f 4f       	sbci	r20, 0xFF	; 255
    1cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb8:	e1 e0       	ldi	r30, 0x01	; 1
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	20 30       	cpi	r18, 0x00	; 0
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	38 07       	cpc	r19, r24
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	48 07       	cpc	r20, r24
    1cc6:	80 e4       	ldi	r24, 0x40	; 64
    1cc8:	58 07       	cpc	r21, r24
    1cca:	28 f5       	brcc	.+74     	; 0x1d16 <__pack_f+0x146>
    1ccc:	e0 e0       	ldi	r30, 0x00	; 0
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	22 c0       	rjmp	.+68     	; 0x1d16 <__pack_f+0x146>
    1cd2:	e0 38       	cpi	r30, 0x80	; 128
    1cd4:	f1 05       	cpc	r31, r1
    1cd6:	6c f5       	brge	.+90     	; 0x1d32 <__pack_f+0x162>
    1cd8:	e1 58       	subi	r30, 0x81	; 129
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	da 01       	movw	r26, r20
    1cde:	c9 01       	movw	r24, r18
    1ce0:	8f 77       	andi	r24, 0x7F	; 127
    1ce2:	90 70       	andi	r25, 0x00	; 0
    1ce4:	a0 70       	andi	r26, 0x00	; 0
    1ce6:	b0 70       	andi	r27, 0x00	; 0
    1ce8:	80 34       	cpi	r24, 0x40	; 64
    1cea:	91 05       	cpc	r25, r1
    1cec:	a1 05       	cpc	r26, r1
    1cee:	b1 05       	cpc	r27, r1
    1cf0:	39 f4       	brne	.+14     	; 0x1d00 <__pack_f+0x130>
    1cf2:	27 ff       	sbrs	r18, 7
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <__pack_f+0x138>
    1cf6:	20 5c       	subi	r18, 0xC0	; 192
    1cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfa:	4f 4f       	sbci	r20, 0xFF	; 255
    1cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <__pack_f+0x138>
    1d00:	21 5c       	subi	r18, 0xC1	; 193
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	4f 4f       	sbci	r20, 0xFF	; 255
    1d06:	5f 4f       	sbci	r21, 0xFF	; 255
    1d08:	57 ff       	sbrs	r21, 7
    1d0a:	05 c0       	rjmp	.+10     	; 0x1d16 <__pack_f+0x146>
    1d0c:	56 95       	lsr	r21
    1d0e:	47 95       	ror	r20
    1d10:	37 95       	ror	r19
    1d12:	27 95       	ror	r18
    1d14:	31 96       	adiw	r30, 0x01	; 1
    1d16:	87 e0       	ldi	r24, 0x07	; 7
    1d18:	56 95       	lsr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	37 95       	ror	r19
    1d1e:	27 95       	ror	r18
    1d20:	8a 95       	dec	r24
    1d22:	d1 f7       	brne	.-12     	; 0x1d18 <__pack_f+0x148>
    1d24:	0b c0       	rjmp	.+22     	; 0x1d3c <__pack_f+0x16c>
    1d26:	e0 e0       	ldi	r30, 0x00	; 0
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	05 c0       	rjmp	.+10     	; 0x1d36 <__pack_f+0x166>
    1d2c:	e0 e0       	ldi	r30, 0x00	; 0
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <__pack_f+0x16c>
    1d32:	ef ef       	ldi	r30, 0xFF	; 255
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	a9 01       	movw	r20, r18
    1d3c:	8e 2f       	mov	r24, r30
    1d3e:	87 95       	ror	r24
    1d40:	88 27       	eor	r24, r24
    1d42:	87 95       	ror	r24
    1d44:	94 2f       	mov	r25, r20
    1d46:	9f 77       	andi	r25, 0x7F	; 127
    1d48:	67 95       	ror	r22
    1d4a:	66 27       	eor	r22, r22
    1d4c:	67 95       	ror	r22
    1d4e:	e6 95       	lsr	r30
    1d50:	e2 2e       	mov	r14, r18
    1d52:	a9 2f       	mov	r26, r25
    1d54:	a8 2b       	or	r26, r24
    1d56:	fe 2f       	mov	r31, r30
    1d58:	f6 2b       	or	r31, r22
    1d5a:	62 2f       	mov	r22, r18
    1d5c:	73 2f       	mov	r23, r19
    1d5e:	8a 2f       	mov	r24, r26
    1d60:	9f 2f       	mov	r25, r31
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	e6 e0       	ldi	r30, 0x06	; 6
    1d68:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__epilogue_restores__+0x18>

00001d6c <__unpack_f>:
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	fb 01       	movw	r30, r22
    1d70:	2c 91       	ld	r18, X
    1d72:	11 96       	adiw	r26, 0x01	; 1
    1d74:	3c 91       	ld	r19, X
    1d76:	11 97       	sbiw	r26, 0x01	; 1
    1d78:	12 96       	adiw	r26, 0x02	; 2
    1d7a:	8c 91       	ld	r24, X
    1d7c:	12 97       	sbiw	r26, 0x02	; 2
    1d7e:	48 2f       	mov	r20, r24
    1d80:	4f 77       	andi	r20, 0x7F	; 127
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	98 2f       	mov	r25, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	99 27       	eor	r25, r25
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	13 96       	adiw	r26, 0x03	; 3
    1d8e:	6c 91       	ld	r22, X
    1d90:	13 97       	sbiw	r26, 0x03	; 3
    1d92:	86 2f       	mov	r24, r22
    1d94:	88 0f       	add	r24, r24
    1d96:	89 2b       	or	r24, r25
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	66 1f       	adc	r22, r22
    1d9c:	66 27       	eor	r22, r22
    1d9e:	66 1f       	adc	r22, r22
    1da0:	61 83       	std	Z+1, r22	; 0x01
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	39 f5       	brne	.+78     	; 0x1df4 <__unpack_f+0x88>
    1da6:	21 15       	cp	r18, r1
    1da8:	31 05       	cpc	r19, r1
    1daa:	41 05       	cpc	r20, r1
    1dac:	51 05       	cpc	r21, r1
    1dae:	11 f4       	brne	.+4      	; 0x1db4 <__unpack_f+0x48>
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	29 c0       	rjmp	.+82     	; 0x1e06 <__unpack_f+0x9a>
    1db4:	82 e8       	ldi	r24, 0x82	; 130
    1db6:	9f ef       	ldi	r25, 0xFF	; 255
    1db8:	93 83       	std	Z+3, r25	; 0x03
    1dba:	82 83       	std	Z+2, r24	; 0x02
    1dbc:	67 e0       	ldi	r22, 0x07	; 7
    1dbe:	22 0f       	add	r18, r18
    1dc0:	33 1f       	adc	r19, r19
    1dc2:	44 1f       	adc	r20, r20
    1dc4:	55 1f       	adc	r21, r21
    1dc6:	6a 95       	dec	r22
    1dc8:	d1 f7       	brne	.-12     	; 0x1dbe <__unpack_f+0x52>
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	80 83       	st	Z, r24
    1dce:	09 c0       	rjmp	.+18     	; 0x1de2 <__unpack_f+0x76>
    1dd0:	22 0f       	add	r18, r18
    1dd2:	33 1f       	adc	r19, r19
    1dd4:	44 1f       	adc	r20, r20
    1dd6:	55 1f       	adc	r21, r21
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	93 83       	std	Z+3, r25	; 0x03
    1de0:	82 83       	std	Z+2, r24	; 0x02
    1de2:	20 30       	cpi	r18, 0x00	; 0
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	38 07       	cpc	r19, r24
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	48 07       	cpc	r20, r24
    1dec:	80 e4       	ldi	r24, 0x40	; 64
    1dee:	58 07       	cpc	r21, r24
    1df0:	78 f3       	brcs	.-34     	; 0x1dd0 <__unpack_f+0x64>
    1df2:	20 c0       	rjmp	.+64     	; 0x1e34 <__unpack_f+0xc8>
    1df4:	8f 3f       	cpi	r24, 0xFF	; 255
    1df6:	91 05       	cpc	r25, r1
    1df8:	79 f4       	brne	.+30     	; 0x1e18 <__unpack_f+0xac>
    1dfa:	21 15       	cp	r18, r1
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	41 05       	cpc	r20, r1
    1e00:	51 05       	cpc	r21, r1
    1e02:	19 f4       	brne	.+6      	; 0x1e0a <__unpack_f+0x9e>
    1e04:	84 e0       	ldi	r24, 0x04	; 4
    1e06:	80 83       	st	Z, r24
    1e08:	08 95       	ret
    1e0a:	44 ff       	sbrs	r20, 4
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <__unpack_f+0xa8>
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	80 83       	st	Z, r24
    1e12:	10 c0       	rjmp	.+32     	; 0x1e34 <__unpack_f+0xc8>
    1e14:	10 82       	st	Z, r1
    1e16:	0e c0       	rjmp	.+28     	; 0x1e34 <__unpack_f+0xc8>
    1e18:	8f 57       	subi	r24, 0x7F	; 127
    1e1a:	90 40       	sbci	r25, 0x00	; 0
    1e1c:	93 83       	std	Z+3, r25	; 0x03
    1e1e:	82 83       	std	Z+2, r24	; 0x02
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	80 83       	st	Z, r24
    1e24:	87 e0       	ldi	r24, 0x07	; 7
    1e26:	22 0f       	add	r18, r18
    1e28:	33 1f       	adc	r19, r19
    1e2a:	44 1f       	adc	r20, r20
    1e2c:	55 1f       	adc	r21, r21
    1e2e:	8a 95       	dec	r24
    1e30:	d1 f7       	brne	.-12     	; 0x1e26 <__unpack_f+0xba>
    1e32:	50 64       	ori	r21, 0x40	; 64
    1e34:	24 83       	std	Z+4, r18	; 0x04
    1e36:	35 83       	std	Z+5, r19	; 0x05
    1e38:	46 83       	std	Z+6, r20	; 0x06
    1e3a:	57 83       	std	Z+7, r21	; 0x07
    1e3c:	08 95       	ret

00001e3e <__fpcmp_parts_f>:
    1e3e:	fc 01       	movw	r30, r24
    1e40:	db 01       	movw	r26, r22
    1e42:	90 81       	ld	r25, Z
    1e44:	92 30       	cpi	r25, 0x02	; 2
    1e46:	08 f4       	brcc	.+2      	; 0x1e4a <__fpcmp_parts_f+0xc>
    1e48:	49 c0       	rjmp	.+146    	; 0x1edc <__fpcmp_parts_f+0x9e>
    1e4a:	8c 91       	ld	r24, X
    1e4c:	82 30       	cpi	r24, 0x02	; 2
    1e4e:	08 f4       	brcc	.+2      	; 0x1e52 <__fpcmp_parts_f+0x14>
    1e50:	45 c0       	rjmp	.+138    	; 0x1edc <__fpcmp_parts_f+0x9e>
    1e52:	94 30       	cpi	r25, 0x04	; 4
    1e54:	51 f4       	brne	.+20     	; 0x1e6a <__fpcmp_parts_f+0x2c>
    1e56:	61 81       	ldd	r22, Z+1	; 0x01
    1e58:	84 30       	cpi	r24, 0x04	; 4
    1e5a:	b1 f5       	brne	.+108    	; 0x1ec8 <__fpcmp_parts_f+0x8a>
    1e5c:	11 96       	adiw	r26, 0x01	; 1
    1e5e:	2c 91       	ld	r18, X
    1e60:	11 97       	sbiw	r26, 0x01	; 1
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	26 1b       	sub	r18, r22
    1e66:	31 09       	sbc	r19, r1
    1e68:	41 c0       	rjmp	.+130    	; 0x1eec <__fpcmp_parts_f+0xae>
    1e6a:	84 30       	cpi	r24, 0x04	; 4
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <__fpcmp_parts_f+0x38>
    1e6e:	92 30       	cpi	r25, 0x02	; 2
    1e70:	41 f4       	brne	.+16     	; 0x1e82 <__fpcmp_parts_f+0x44>
    1e72:	82 30       	cpi	r24, 0x02	; 2
    1e74:	b1 f1       	breq	.+108    	; 0x1ee2 <__fpcmp_parts_f+0xa4>
    1e76:	11 96       	adiw	r26, 0x01	; 1
    1e78:	8c 91       	ld	r24, X
    1e7a:	11 97       	sbiw	r26, 0x01	; 1
    1e7c:	88 23       	and	r24, r24
    1e7e:	a1 f1       	breq	.+104    	; 0x1ee8 <__fpcmp_parts_f+0xaa>
    1e80:	2d c0       	rjmp	.+90     	; 0x1edc <__fpcmp_parts_f+0x9e>
    1e82:	61 81       	ldd	r22, Z+1	; 0x01
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	01 f1       	breq	.+64     	; 0x1ec8 <__fpcmp_parts_f+0x8a>
    1e88:	11 96       	adiw	r26, 0x01	; 1
    1e8a:	8c 91       	ld	r24, X
    1e8c:	11 97       	sbiw	r26, 0x01	; 1
    1e8e:	68 17       	cp	r22, r24
    1e90:	d9 f4       	brne	.+54     	; 0x1ec8 <__fpcmp_parts_f+0x8a>
    1e92:	22 81       	ldd	r18, Z+2	; 0x02
    1e94:	33 81       	ldd	r19, Z+3	; 0x03
    1e96:	12 96       	adiw	r26, 0x02	; 2
    1e98:	8d 91       	ld	r24, X+
    1e9a:	9c 91       	ld	r25, X
    1e9c:	13 97       	sbiw	r26, 0x03	; 3
    1e9e:	82 17       	cp	r24, r18
    1ea0:	93 07       	cpc	r25, r19
    1ea2:	94 f0       	brlt	.+36     	; 0x1ec8 <__fpcmp_parts_f+0x8a>
    1ea4:	28 17       	cp	r18, r24
    1ea6:	39 07       	cpc	r19, r25
    1ea8:	bc f0       	brlt	.+46     	; 0x1ed8 <__fpcmp_parts_f+0x9a>
    1eaa:	24 81       	ldd	r18, Z+4	; 0x04
    1eac:	35 81       	ldd	r19, Z+5	; 0x05
    1eae:	46 81       	ldd	r20, Z+6	; 0x06
    1eb0:	57 81       	ldd	r21, Z+7	; 0x07
    1eb2:	14 96       	adiw	r26, 0x04	; 4
    1eb4:	8d 91       	ld	r24, X+
    1eb6:	9d 91       	ld	r25, X+
    1eb8:	0d 90       	ld	r0, X+
    1eba:	bc 91       	ld	r27, X
    1ebc:	a0 2d       	mov	r26, r0
    1ebe:	82 17       	cp	r24, r18
    1ec0:	93 07       	cpc	r25, r19
    1ec2:	a4 07       	cpc	r26, r20
    1ec4:	b5 07       	cpc	r27, r21
    1ec6:	18 f4       	brcc	.+6      	; 0x1ece <__fpcmp_parts_f+0x90>
    1ec8:	66 23       	and	r22, r22
    1eca:	41 f0       	breq	.+16     	; 0x1edc <__fpcmp_parts_f+0x9e>
    1ecc:	0d c0       	rjmp	.+26     	; 0x1ee8 <__fpcmp_parts_f+0xaa>
    1ece:	28 17       	cp	r18, r24
    1ed0:	39 07       	cpc	r19, r25
    1ed2:	4a 07       	cpc	r20, r26
    1ed4:	5b 07       	cpc	r21, r27
    1ed6:	28 f4       	brcc	.+10     	; 0x1ee2 <__fpcmp_parts_f+0xa4>
    1ed8:	66 23       	and	r22, r22
    1eda:	31 f0       	breq	.+12     	; 0x1ee8 <__fpcmp_parts_f+0xaa>
    1edc:	21 e0       	ldi	r18, 0x01	; 1
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <__fpcmp_parts_f+0xae>
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <__fpcmp_parts_f+0xae>
    1ee8:	2f ef       	ldi	r18, 0xFF	; 255
    1eea:	3f ef       	ldi	r19, 0xFF	; 255
    1eec:	c9 01       	movw	r24, r18
    1eee:	08 95       	ret

00001ef0 <__prologue_saves__>:
    1ef0:	2f 92       	push	r2
    1ef2:	3f 92       	push	r3
    1ef4:	4f 92       	push	r4
    1ef6:	5f 92       	push	r5
    1ef8:	6f 92       	push	r6
    1efa:	7f 92       	push	r7
    1efc:	8f 92       	push	r8
    1efe:	9f 92       	push	r9
    1f00:	af 92       	push	r10
    1f02:	bf 92       	push	r11
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	ca 1b       	sub	r28, r26
    1f1a:	db 0b       	sbc	r29, r27
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	09 94       	ijmp

00001f28 <__epilogue_restores__>:
    1f28:	2a 88       	ldd	r2, Y+18	; 0x12
    1f2a:	39 88       	ldd	r3, Y+17	; 0x11
    1f2c:	48 88       	ldd	r4, Y+16	; 0x10
    1f2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f30:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f32:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f34:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f36:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f38:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f3a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f3c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f3e:	df 80       	ldd	r13, Y+7	; 0x07
    1f40:	ee 80       	ldd	r14, Y+6	; 0x06
    1f42:	fd 80       	ldd	r15, Y+5	; 0x05
    1f44:	0c 81       	ldd	r16, Y+4	; 0x04
    1f46:	1b 81       	ldd	r17, Y+3	; 0x03
    1f48:	aa 81       	ldd	r26, Y+2	; 0x02
    1f4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f4c:	ce 0f       	add	r28, r30
    1f4e:	d1 1d       	adc	r29, r1
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	ed 01       	movw	r28, r26
    1f5c:	08 95       	ret

00001f5e <_exit>:
    1f5e:	f8 94       	cli

00001f60 <__stop_program>:
    1f60:	ff cf       	rjmp	.-2      	; 0x1f60 <__stop_program>
