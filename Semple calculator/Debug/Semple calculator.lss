
Semple calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001de6  00001e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001de6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800128  00800128  00001ea2  2**0
                  ALLOC
  3 .stab         00000bac  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000026e  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00002cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002b0  00000000  00000000  00002e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002857  00000000  00000000  000030ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001155  00000000  00000000  00005945  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b94  00000000  00000000  00006a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  00008630  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000050c  00000000  00000000  00008880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c25  00000000  00000000  00008d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000060e  00000000  00000000  000099b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  00009fbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ee       	ldi	r30, 0xE6	; 230
      7c:	fd e1       	ldi	r31, 0x1D	; 29
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 34       	cpi	r26, 0x46	; 70
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3c 07 	call	0xe78	; 0xe78 <main>
      9e:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <write_to_calc>:
char MyKeypad[4][4]={{'7','4','1','N'},
					{'8','5','2','0'},
					{'9','6','3','='},
					{'/','x','-','+'}};

void write_to_calc(uint8_t addr, uint8_t source){	
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	6a 97       	sbiw	r28, 0x1a	; 26
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
      be:	89 8f       	std	Y+25, r24	; 0x19
      c0:	6a 8f       	std	Y+26, r22	; 0x1a
	calc_data_mode = OUTPUT; 
      c2:	8a e2       	ldi	r24, 0x2A	; 42
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	2f ef       	ldi	r18, 0xFF	; 255
      c8:	fc 01       	movw	r30, r24
      ca:	20 83       	st	Z, r18
	calc_addr_port = addr ; 
      cc:	85 e2       	ldi	r24, 0x25	; 37
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	29 8d       	ldd	r18, Y+25	; 0x19
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
	calc_data_out_port = source ; 
      d6:	8b e2       	ldi	r24, 0x2B	; 43
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	2a 8d       	ldd	r18, Y+26	; 0x1a
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
	calc_ctrl_port = IDLE; 
      e0:	88 e2       	ldi	r24, 0x28	; 40
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	2f ef       	ldi	r18, 0xFF	; 255
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18
	calc_ctrl_port = WRITE ; 
      ea:	88 e2       	ldi	r24, 0x28	; 40
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	2d ef       	ldi	r18, 0xFD	; 253
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	a0 e8       	ldi	r26, 0x80	; 128
      fa:	bf e3       	ldi	r27, 0x3F	; 63
      fc:	89 83       	std	Y+1, r24	; 0x01
      fe:	9a 83       	std	Y+2, r25	; 0x02
     100:	ab 83       	std	Y+3, r26	; 0x03
     102:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     104:	69 81       	ldd	r22, Y+1	; 0x01
     106:	7a 81       	ldd	r23, Y+2	; 0x02
     108:	8b 81       	ldd	r24, Y+3	; 0x03
     10a:	9c 81       	ldd	r25, Y+4	; 0x04
     10c:	2b ea       	ldi	r18, 0xAB	; 171
     10e:	3a ea       	ldi	r19, 0xAA	; 170
     110:	4a ea       	ldi	r20, 0xAA	; 170
     112:	50 e4       	ldi	r21, 0x40	; 64
     114:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     118:	dc 01       	movw	r26, r24
     11a:	cb 01       	movw	r24, r22
     11c:	8d 83       	std	Y+5, r24	; 0x05
     11e:	9e 83       	std	Y+6, r25	; 0x06
     120:	af 83       	std	Y+7, r26	; 0x07
     122:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	6d 81       	ldd	r22, Y+5	; 0x05
     128:	7e 81       	ldd	r23, Y+6	; 0x06
     12a:	8f 81       	ldd	r24, Y+7	; 0x07
     12c:	98 85       	ldd	r25, Y+8	; 0x08
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e8       	ldi	r20, 0x80	; 128
     134:	5f e3       	ldi	r21, 0x3F	; 63
     136:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     13a:	88 23       	and	r24, r24
     13c:	0c f0       	brlt	.+2      	; 0x140 <write_to_calc+0x9a>
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	11 23       	and	r17, r17
     142:	19 f0       	breq	.+6      	; 0x14a <write_to_calc+0xa4>
		__ticks = 1;
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	89 87       	std	Y+9, r24	; 0x09
     148:	a3 c0       	rjmp	.+326    	; 0x290 <write_to_calc+0x1ea>
	else if (__tmp > 255)
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	6d 81       	ldd	r22, Y+5	; 0x05
     14e:	7e 81       	ldd	r23, Y+6	; 0x06
     150:	8f 81       	ldd	r24, Y+7	; 0x07
     152:	98 85       	ldd	r25, Y+8	; 0x08
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	4f e7       	ldi	r20, 0x7F	; 127
     15a:	53 e4       	ldi	r21, 0x43	; 67
     15c:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     160:	18 16       	cp	r1, r24
     162:	0c f0       	brlt	.+2      	; 0x166 <write_to_calc+0xc0>
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	11 23       	and	r17, r17
     168:	09 f4       	brne	.+2      	; 0x16c <write_to_calc+0xc6>
     16a:	89 c0       	rjmp	.+274    	; 0x27e <write_to_calc+0x1d8>
	{
		_delay_ms(__us / 1000.0);
     16c:	69 81       	ldd	r22, Y+1	; 0x01
     16e:	7a 81       	ldd	r23, Y+2	; 0x02
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	4a e7       	ldi	r20, 0x7A	; 122
     17a:	54 e4       	ldi	r21, 0x44	; 68
     17c:	0e 94 15 0b 	call	0x162a	; 0x162a <__divsf3>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	8a 87       	std	Y+10, r24	; 0x0a
     186:	9b 87       	std	Y+11, r25	; 0x0b
     188:	ac 87       	std	Y+12, r26	; 0x0c
     18a:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     18c:	6a 85       	ldd	r22, Y+10	; 0x0a
     18e:	7b 85       	ldd	r23, Y+11	; 0x0b
     190:	8c 85       	ldd	r24, Y+12	; 0x0c
     192:	9d 85       	ldd	r25, Y+13	; 0x0d
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	4a e7       	ldi	r20, 0x7A	; 122
     19a:	55 e4       	ldi	r21, 0x45	; 69
     19c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     1a0:	dc 01       	movw	r26, r24
     1a2:	cb 01       	movw	r24, r22
     1a4:	8e 87       	std	Y+14, r24	; 0x0e
     1a6:	9f 87       	std	Y+15, r25	; 0x0f
     1a8:	a8 8b       	std	Y+16, r26	; 0x10
     1aa:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     1ac:	11 e0       	ldi	r17, 0x01	; 1
     1ae:	6e 85       	ldd	r22, Y+14	; 0x0e
     1b0:	7f 85       	ldd	r23, Y+15	; 0x0f
     1b2:	88 89       	ldd	r24, Y+16	; 0x10
     1b4:	99 89       	ldd	r25, Y+17	; 0x11
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	40 e8       	ldi	r20, 0x80	; 128
     1bc:	5f e3       	ldi	r21, 0x3F	; 63
     1be:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     1c2:	88 23       	and	r24, r24
     1c4:	0c f0       	brlt	.+2      	; 0x1c8 <write_to_calc+0x122>
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	11 23       	and	r17, r17
     1ca:	29 f0       	breq	.+10     	; 0x1d6 <write_to_calc+0x130>
		__ticks = 1;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	9b 8b       	std	Y+19, r25	; 0x13
     1d2:	8a 8b       	std	Y+18, r24	; 0x12
     1d4:	46 c0       	rjmp	.+140    	; 0x262 <write_to_calc+0x1bc>
	else if (__tmp > 65535)
     1d6:	11 e0       	ldi	r17, 0x01	; 1
     1d8:	6e 85       	ldd	r22, Y+14	; 0x0e
     1da:	7f 85       	ldd	r23, Y+15	; 0x0f
     1dc:	88 89       	ldd	r24, Y+16	; 0x10
     1de:	99 89       	ldd	r25, Y+17	; 0x11
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	3f ef       	ldi	r19, 0xFF	; 255
     1e4:	4f e7       	ldi	r20, 0x7F	; 127
     1e6:	57 e4       	ldi	r21, 0x47	; 71
     1e8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     1ec:	18 16       	cp	r1, r24
     1ee:	0c f0       	brlt	.+2      	; 0x1f2 <write_to_calc+0x14c>
     1f0:	10 e0       	ldi	r17, 0x00	; 0
     1f2:	11 23       	and	r17, r17
     1f4:	61 f1       	breq	.+88     	; 0x24e <write_to_calc+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1f6:	6a 85       	ldd	r22, Y+10	; 0x0a
     1f8:	7b 85       	ldd	r23, Y+11	; 0x0b
     1fa:	8c 85       	ldd	r24, Y+12	; 0x0c
     1fc:	9d 85       	ldd	r25, Y+13	; 0x0d
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e2       	ldi	r20, 0x20	; 32
     204:	51 e4       	ldi	r21, 0x41	; 65
     206:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     20a:	dc 01       	movw	r26, r24
     20c:	cb 01       	movw	r24, r22
     20e:	bc 01       	movw	r22, r24
     210:	cd 01       	movw	r24, r26
     212:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	9b 8b       	std	Y+19, r25	; 0x13
     21c:	8a 8b       	std	Y+18, r24	; 0x12
     21e:	12 c0       	rjmp	.+36     	; 0x244 <write_to_calc+0x19e>
     220:	80 e9       	ldi	r24, 0x90	; 144
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	9d 8b       	std	Y+21, r25	; 0x15
     226:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     228:	8c 89       	ldd	r24, Y+20	; 0x14
     22a:	9d 89       	ldd	r25, Y+21	; 0x15
     22c:	8c 01       	movw	r16, r24
     22e:	c8 01       	movw	r24, r16
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <write_to_calc+0x18a>
     234:	8c 01       	movw	r16, r24
     236:	1d 8b       	std	Y+21, r17	; 0x15
     238:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     23a:	8a 89       	ldd	r24, Y+18	; 0x12
     23c:	9b 89       	ldd	r25, Y+19	; 0x13
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	9b 8b       	std	Y+19, r25	; 0x13
     242:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     244:	8a 89       	ldd	r24, Y+18	; 0x12
     246:	9b 89       	ldd	r25, Y+19	; 0x13
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	51 f7       	brne	.-44     	; 0x220 <write_to_calc+0x17a>
     24c:	28 c0       	rjmp	.+80     	; 0x29e <write_to_calc+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     24e:	6e 85       	ldd	r22, Y+14	; 0x0e
     250:	7f 85       	ldd	r23, Y+15	; 0x0f
     252:	88 89       	ldd	r24, Y+16	; 0x10
     254:	99 89       	ldd	r25, Y+17	; 0x11
     256:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     25a:	dc 01       	movw	r26, r24
     25c:	cb 01       	movw	r24, r22
     25e:	9b 8b       	std	Y+19, r25	; 0x13
     260:	8a 8b       	std	Y+18, r24	; 0x12
     262:	8a 89       	ldd	r24, Y+18	; 0x12
     264:	9b 89       	ldd	r25, Y+19	; 0x13
     266:	9f 8b       	std	Y+23, r25	; 0x17
     268:	8e 8b       	std	Y+22, r24	; 0x16
     26a:	8e 89       	ldd	r24, Y+22	; 0x16
     26c:	9f 89       	ldd	r25, Y+23	; 0x17
     26e:	8c 01       	movw	r16, r24
     270:	f8 01       	movw	r30, r16
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <write_to_calc+0x1cc>
     276:	8f 01       	movw	r16, r30
     278:	1f 8b       	std	Y+23, r17	; 0x17
     27a:	0e 8b       	std	Y+22, r16	; 0x16
     27c:	10 c0       	rjmp	.+32     	; 0x29e <write_to_calc+0x1f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     27e:	6d 81       	ldd	r22, Y+5	; 0x05
     280:	7e 81       	ldd	r23, Y+6	; 0x06
     282:	8f 81       	ldd	r24, Y+7	; 0x07
     284:	98 85       	ldd	r25, Y+8	; 0x08
     286:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	89 87       	std	Y+9, r24	; 0x09
     290:	89 85       	ldd	r24, Y+9	; 0x09
     292:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     294:	88 8d       	ldd	r24, Y+24	; 0x18
     296:	18 2f       	mov	r17, r24
     298:	1a 95       	dec	r17
     29a:	f1 f7       	brne	.-4      	; 0x298 <write_to_calc+0x1f2>
     29c:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1); 
	calc_ctrl_port = IDLE;	
     29e:	88 e2       	ldi	r24, 0x28	; 40
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	2f ef       	ldi	r18, 0xFF	; 255
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
}			
     2a8:	6a 96       	adiw	r28, 0x1a	; 26
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	cf 91       	pop	r28
     2b6:	df 91       	pop	r29
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <init_calc>:
			
void init_calc(){ 
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	calc_addr_mode = OUTPUT;
     2c6:	84 e2       	ldi	r24, 0x24	; 36
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	2f ef       	ldi	r18, 0xFF	; 255
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
	calc_ctrl_mode = OUTPUT;
     2d0:	87 e2       	ldi	r24, 0x27	; 39
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
	write_to_calc( calc_ctrl_reg , control_word );
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	61 e8       	ldi	r22, 0x81	; 129
     2de:	0e 94 53 00 	call	0xa6	; 0xa6 <write_to_calc>
}
     2e2:	cf 91       	pop	r28
     2e4:	df 91       	pop	r29
     2e6:	08 95       	ret

000002e8 <SEND_TO_LCD>:

void SEND_TO_LCD(char data , uint8_t mode )
{
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	61 97       	sbiw	r28, 0x11	; 17
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	88 8b       	std	Y+16, r24	; 0x10
     302:	69 8b       	std	Y+17, r22	; 0x11
	uint8_t control_lcd = 0 ;
     304:	19 82       	std	Y+1, r1	; 0x01
	write_to_calc(lcd_data_port,data);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	68 89       	ldd	r22, Y+16	; 0x10
     30a:	0e 94 53 00 	call	0xa6	; 0xa6 <write_to_calc>
	control_lcd = mode ;			//CMD => RS=0 ,DATA =>RS =1 
     30e:	89 89       	ldd	r24, Y+17	; 0x11
     310:	89 83       	std	Y+1, r24	; 0x01
	control_lcd |= 2;				// EN = 1
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	82 60       	ori	r24, 0x02	; 2
     316:	89 83       	std	Y+1, r24	; 0x01
	write_to_calc(lcd_ctrl_port,control_lcd);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	69 81       	ldd	r22, Y+1	; 0x01
     31c:	0e 94 53 00 	call	0xa6	; 0xa6 <write_to_calc>
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	a0 e8       	ldi	r26, 0x80	; 128
     326:	bf e3       	ldi	r27, 0x3F	; 63
     328:	8a 83       	std	Y+2, r24	; 0x02
     32a:	9b 83       	std	Y+3, r25	; 0x03
     32c:	ac 83       	std	Y+4, r26	; 0x04
     32e:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     330:	6a 81       	ldd	r22, Y+2	; 0x02
     332:	7b 81       	ldd	r23, Y+3	; 0x03
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	9d 81       	ldd	r25, Y+5	; 0x05
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	4a e7       	ldi	r20, 0x7A	; 122
     33e:	55 e4       	ldi	r21, 0x45	; 69
     340:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     344:	dc 01       	movw	r26, r24
     346:	cb 01       	movw	r24, r22
     348:	8e 83       	std	Y+6, r24	; 0x06
     34a:	9f 83       	std	Y+7, r25	; 0x07
     34c:	a8 87       	std	Y+8, r26	; 0x08
     34e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     350:	11 e0       	ldi	r17, 0x01	; 1
     352:	6e 81       	ldd	r22, Y+6	; 0x06
     354:	7f 81       	ldd	r23, Y+7	; 0x07
     356:	88 85       	ldd	r24, Y+8	; 0x08
     358:	99 85       	ldd	r25, Y+9	; 0x09
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e8       	ldi	r20, 0x80	; 128
     360:	5f e3       	ldi	r21, 0x3F	; 63
     362:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     366:	88 23       	and	r24, r24
     368:	0c f0       	brlt	.+2      	; 0x36c <SEND_TO_LCD+0x84>
     36a:	10 e0       	ldi	r17, 0x00	; 0
     36c:	11 23       	and	r17, r17
     36e:	29 f0       	breq	.+10     	; 0x37a <SEND_TO_LCD+0x92>
		__ticks = 1;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	9b 87       	std	Y+11, r25	; 0x0b
     376:	8a 87       	std	Y+10, r24	; 0x0a
     378:	46 c0       	rjmp	.+140    	; 0x406 <SEND_TO_LCD+0x11e>
	else if (__tmp > 65535)
     37a:	11 e0       	ldi	r17, 0x01	; 1
     37c:	6e 81       	ldd	r22, Y+6	; 0x06
     37e:	7f 81       	ldd	r23, Y+7	; 0x07
     380:	88 85       	ldd	r24, Y+8	; 0x08
     382:	99 85       	ldd	r25, Y+9	; 0x09
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	3f ef       	ldi	r19, 0xFF	; 255
     388:	4f e7       	ldi	r20, 0x7F	; 127
     38a:	57 e4       	ldi	r21, 0x47	; 71
     38c:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     390:	18 16       	cp	r1, r24
     392:	0c f0       	brlt	.+2      	; 0x396 <SEND_TO_LCD+0xae>
     394:	10 e0       	ldi	r17, 0x00	; 0
     396:	11 23       	and	r17, r17
     398:	61 f1       	breq	.+88     	; 0x3f2 <SEND_TO_LCD+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     39a:	6a 81       	ldd	r22, Y+2	; 0x02
     39c:	7b 81       	ldd	r23, Y+3	; 0x03
     39e:	8c 81       	ldd	r24, Y+4	; 0x04
     3a0:	9d 81       	ldd	r25, Y+5	; 0x05
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	40 e2       	ldi	r20, 0x20	; 32
     3a8:	51 e4       	ldi	r21, 0x41	; 65
     3aa:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     3ae:	dc 01       	movw	r26, r24
     3b0:	cb 01       	movw	r24, r22
     3b2:	bc 01       	movw	r22, r24
     3b4:	cd 01       	movw	r24, r26
     3b6:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	9b 87       	std	Y+11, r25	; 0x0b
     3c0:	8a 87       	std	Y+10, r24	; 0x0a
     3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <SEND_TO_LCD+0x100>
     3c4:	80 e9       	ldi	r24, 0x90	; 144
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	9d 87       	std	Y+13, r25	; 0x0d
     3ca:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3cc:	8c 85       	ldd	r24, Y+12	; 0x0c
     3ce:	9d 85       	ldd	r25, Y+13	; 0x0d
     3d0:	8c 01       	movw	r16, r24
     3d2:	c8 01       	movw	r24, r16
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <SEND_TO_LCD+0xec>
     3d8:	8c 01       	movw	r16, r24
     3da:	1d 87       	std	Y+13, r17	; 0x0d
     3dc:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3de:	8a 85       	ldd	r24, Y+10	; 0x0a
     3e0:	9b 85       	ldd	r25, Y+11	; 0x0b
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	9b 87       	std	Y+11, r25	; 0x0b
     3e6:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e8:	8a 85       	ldd	r24, Y+10	; 0x0a
     3ea:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	51 f7       	brne	.-44     	; 0x3c4 <SEND_TO_LCD+0xdc>
     3f0:	17 c0       	rjmp	.+46     	; 0x420 <SEND_TO_LCD+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f2:	6e 81       	ldd	r22, Y+6	; 0x06
     3f4:	7f 81       	ldd	r23, Y+7	; 0x07
     3f6:	88 85       	ldd	r24, Y+8	; 0x08
     3f8:	99 85       	ldd	r25, Y+9	; 0x09
     3fa:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	9b 87       	std	Y+11, r25	; 0x0b
     404:	8a 87       	std	Y+10, r24	; 0x0a
     406:	8a 85       	ldd	r24, Y+10	; 0x0a
     408:	9b 85       	ldd	r25, Y+11	; 0x0b
     40a:	9f 87       	std	Y+15, r25	; 0x0f
     40c:	8e 87       	std	Y+14, r24	; 0x0e
     40e:	8e 85       	ldd	r24, Y+14	; 0x0e
     410:	9f 85       	ldd	r25, Y+15	; 0x0f
     412:	8c 01       	movw	r16, r24
     414:	c8 01       	movw	r24, r16
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <SEND_TO_LCD+0x12e>
     41a:	8c 01       	movw	r16, r24
     41c:	1f 87       	std	Y+15, r17	; 0x0f
     41e:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(1);
	control_lcd &= ~2 ;				// EN =0
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	8d 7f       	andi	r24, 0xFD	; 253
     424:	89 83       	std	Y+1, r24	; 0x01
	write_to_calc(lcd_ctrl_port,control_lcd);
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	69 81       	ldd	r22, Y+1	; 0x01
     42a:	0e 94 53 00 	call	0xa6	; 0xa6 <write_to_calc>
}
     42e:	61 96       	adiw	r28, 0x11	; 17
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	cf 91       	pop	r28
     43c:	df 91       	pop	r29
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	08 95       	ret

00000444 <INIT_LCD>:

void INIT_LCD()
{
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
	SEND_TO_LCD(set_size,CMD);
     44c:	88 e3       	ldi	r24, 0x38	; 56
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
	SEND_TO_LCD(clr,CMD);
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
	SEND_TO_LCD(display_on,CMD)	;
     45c:	8e e0       	ldi	r24, 0x0E	; 14
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
}
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	08 95       	ret

0000046a <write_to_LCD>:

void write_to_LCD(char ch){
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	0f 92       	push	r0
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	89 83       	std	Y+1, r24	; 0x01
	SEND_TO_LCD(ch,DATA);
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
}
     47e:	0f 90       	pop	r0
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <print_to_LCD>:

void print_to_LCD(char *str){
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <print_to_LCD+0x6>
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	9a 83       	std	Y+2, r25	; 0x02
     492:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
     494:	0b c0       	rjmp	.+22     	; 0x4ac <print_to_LCD+0x26>
	{
		write_to_LCD(*str);
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	0e 94 35 02 	call	0x46a	; 0x46a <write_to_LCD>
		str++;
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	9a 83       	std	Y+2, r25	; 0x02
     4aa:	89 83       	std	Y+1, r24	; 0x01
void write_to_LCD(char ch){
	SEND_TO_LCD(ch,DATA);
}

void print_to_LCD(char *str){
	while(*str != '\0')
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	fc 01       	movw	r30, r24
     4b2:	80 81       	ld	r24, Z
     4b4:	88 23       	and	r24, r24
     4b6:	79 f7       	brne	.-34     	; 0x496 <print_to_LCD+0x10>
	{
		write_to_LCD(*str);
		str++;
	}
}
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	08 95       	ret

000004c2 <write_to_keypad>:

void write_to_keypad(uint8_t source){
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	df 93       	push	r29
     4c8:	cf 93       	push	r28
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	2f 97       	sbiw	r28, 0x0f	; 15
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	8f 87       	std	Y+15, r24	; 0x0f
	calc_data_mode = 0XF0; 
     4dc:	8a e2       	ldi	r24, 0x2A	; 42
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	20 ef       	ldi	r18, 0xF0	; 240
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
	calc_addr_port = keypad_port ; 
     4e6:	85 e2       	ldi	r24, 0x25	; 37
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	22 e0       	ldi	r18, 0x02	; 2
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
	calc_data_out_port = source ; 
     4f0:	8b e2       	ldi	r24, 0x2B	; 43
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	2f 85       	ldd	r18, Y+15	; 0x0f
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 83       	st	Z, r18
	calc_ctrl_port = IDLE; 
     4fa:	88 e2       	ldi	r24, 0x28	; 40
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
	calc_ctrl_port = WRITE ; 
     504:	88 e2       	ldi	r24, 0x28	; 40
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	2d ef       	ldi	r18, 0xFD	; 253
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e2       	ldi	r26, 0x20	; 32
     514:	b1 e4       	ldi	r27, 0x41	; 65
     516:	89 83       	std	Y+1, r24	; 0x01
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	ab 83       	std	Y+3, r26	; 0x03
     51c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     51e:	69 81       	ldd	r22, Y+1	; 0x01
     520:	7a 81       	ldd	r23, Y+2	; 0x02
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	4a e7       	ldi	r20, 0x7A	; 122
     52c:	55 e4       	ldi	r21, 0x45	; 69
     52e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	8d 83       	std	Y+5, r24	; 0x05
     538:	9e 83       	std	Y+6, r25	; 0x06
     53a:	af 83       	std	Y+7, r26	; 0x07
     53c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     53e:	11 e0       	ldi	r17, 0x01	; 1
     540:	6d 81       	ldd	r22, Y+5	; 0x05
     542:	7e 81       	ldd	r23, Y+6	; 0x06
     544:	8f 81       	ldd	r24, Y+7	; 0x07
     546:	98 85       	ldd	r25, Y+8	; 0x08
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e8       	ldi	r20, 0x80	; 128
     54e:	5f e3       	ldi	r21, 0x3F	; 63
     550:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     554:	88 23       	and	r24, r24
     556:	0c f0       	brlt	.+2      	; 0x55a <write_to_keypad+0x98>
     558:	10 e0       	ldi	r17, 0x00	; 0
     55a:	11 23       	and	r17, r17
     55c:	29 f0       	breq	.+10     	; 0x568 <write_to_keypad+0xa6>
		__ticks = 1;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9a 87       	std	Y+10, r25	; 0x0a
     564:	89 87       	std	Y+9, r24	; 0x09
     566:	46 c0       	rjmp	.+140    	; 0x5f4 <write_to_keypad+0x132>
	else if (__tmp > 65535)
     568:	11 e0       	ldi	r17, 0x01	; 1
     56a:	6d 81       	ldd	r22, Y+5	; 0x05
     56c:	7e 81       	ldd	r23, Y+6	; 0x06
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	98 85       	ldd	r25, Y+8	; 0x08
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	3f ef       	ldi	r19, 0xFF	; 255
     576:	4f e7       	ldi	r20, 0x7F	; 127
     578:	57 e4       	ldi	r21, 0x47	; 71
     57a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     57e:	18 16       	cp	r1, r24
     580:	0c f0       	brlt	.+2      	; 0x584 <write_to_keypad+0xc2>
     582:	10 e0       	ldi	r17, 0x00	; 0
     584:	11 23       	and	r17, r17
     586:	61 f1       	breq	.+88     	; 0x5e0 <write_to_keypad+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     588:	69 81       	ldd	r22, Y+1	; 0x01
     58a:	7a 81       	ldd	r23, Y+2	; 0x02
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	9c 81       	ldd	r25, Y+4	; 0x04
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e2       	ldi	r20, 0x20	; 32
     596:	51 e4       	ldi	r21, 0x41	; 65
     598:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     59c:	dc 01       	movw	r26, r24
     59e:	cb 01       	movw	r24, r22
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	9a 87       	std	Y+10, r25	; 0x0a
     5ae:	89 87       	std	Y+9, r24	; 0x09
     5b0:	12 c0       	rjmp	.+36     	; 0x5d6 <write_to_keypad+0x114>
     5b2:	80 e9       	ldi	r24, 0x90	; 144
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	9c 87       	std	Y+12, r25	; 0x0c
     5b8:	8b 87       	std	Y+11, r24	; 0x0b
     5ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     5bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     5be:	8c 01       	movw	r16, r24
     5c0:	c8 01       	movw	r24, r16
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <write_to_keypad+0x100>
     5c6:	8c 01       	movw	r16, r24
     5c8:	1c 87       	std	Y+12, r17	; 0x0c
     5ca:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5cc:	89 85       	ldd	r24, Y+9	; 0x09
     5ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	9a 87       	std	Y+10, r25	; 0x0a
     5d4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5da:	00 97       	sbiw	r24, 0x00	; 0
     5dc:	51 f7       	brne	.-44     	; 0x5b2 <write_to_keypad+0xf0>
     5de:	17 c0       	rjmp	.+46     	; 0x60e <write_to_keypad+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e0:	6d 81       	ldd	r22, Y+5	; 0x05
     5e2:	7e 81       	ldd	r23, Y+6	; 0x06
     5e4:	8f 81       	ldd	r24, Y+7	; 0x07
     5e6:	98 85       	ldd	r25, Y+8	; 0x08
     5e8:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	9a 87       	std	Y+10, r25	; 0x0a
     5f2:	89 87       	std	Y+9, r24	; 0x09
     5f4:	89 85       	ldd	r24, Y+9	; 0x09
     5f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f8:	9e 87       	std	Y+14, r25	; 0x0e
     5fa:	8d 87       	std	Y+13, r24	; 0x0d
     5fc:	8d 85       	ldd	r24, Y+13	; 0x0d
     5fe:	9e 85       	ldd	r25, Y+14	; 0x0e
     600:	8c 01       	movw	r16, r24
     602:	f8 01       	movw	r30, r16
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <write_to_keypad+0x142>
     608:	8f 01       	movw	r16, r30
     60a:	1e 87       	std	Y+14, r17	; 0x0e
     60c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10); 
	calc_ctrl_port = IDLE;
     60e:	88 e2       	ldi	r24, 0x28	; 40
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	2f ef       	ldi	r18, 0xFF	; 255
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
}
     618:	2f 96       	adiw	r28, 0x0f	; 15
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	08 95       	ret

0000062e <read_from_keypad>:

uint8_t read_from_keypad()
{
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	df 93       	push	r29
     634:	cf 93       	push	r28
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	2f 97       	sbiw	r28, 0x0f	; 15
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
	uint8_t temp;
	calc_data_mode = 0X00; 
     646:	8a e2       	ldi	r24, 0x2A	; 42
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	fc 01       	movw	r30, r24
     64c:	10 82       	st	Z, r1
	calc_addr_port = keypad_port ; 
     64e:	85 e2       	ldi	r24, 0x25	; 37
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	22 e0       	ldi	r18, 0x02	; 2
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
	calc_ctrl_port = IDLE; 
     658:	88 e2       	ldi	r24, 0x28	; 40
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	2f ef       	ldi	r18, 0xFF	; 255
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
	calc_ctrl_port = READ ;
     662:	88 e2       	ldi	r24, 0x28	; 40
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	2e ef       	ldi	r18, 0xFE	; 254
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
	temp = calc_data_in_port ;
     66c:	89 e2       	ldi	r24, 0x29	; 41
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	fc 01       	movw	r30, r24
     672:	80 81       	ld	r24, Z
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	a0 e2       	ldi	r26, 0x20	; 32
     67c:	b1 e4       	ldi	r27, 0x41	; 65
     67e:	8a 83       	std	Y+2, r24	; 0x02
     680:	9b 83       	std	Y+3, r25	; 0x03
     682:	ac 83       	std	Y+4, r26	; 0x04
     684:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     686:	6a 81       	ldd	r22, Y+2	; 0x02
     688:	7b 81       	ldd	r23, Y+3	; 0x03
     68a:	8c 81       	ldd	r24, Y+4	; 0x04
     68c:	9d 81       	ldd	r25, Y+5	; 0x05
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	4a e7       	ldi	r20, 0x7A	; 122
     694:	55 e4       	ldi	r21, 0x45	; 69
     696:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	8e 83       	std	Y+6, r24	; 0x06
     6a0:	9f 83       	std	Y+7, r25	; 0x07
     6a2:	a8 87       	std	Y+8, r26	; 0x08
     6a4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     6a6:	11 e0       	ldi	r17, 0x01	; 1
     6a8:	6e 81       	ldd	r22, Y+6	; 0x06
     6aa:	7f 81       	ldd	r23, Y+7	; 0x07
     6ac:	88 85       	ldd	r24, Y+8	; 0x08
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e8       	ldi	r20, 0x80	; 128
     6b6:	5f e3       	ldi	r21, 0x3F	; 63
     6b8:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     6bc:	88 23       	and	r24, r24
     6be:	0c f0       	brlt	.+2      	; 0x6c2 <read_from_keypad+0x94>
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	11 23       	and	r17, r17
     6c4:	29 f0       	breq	.+10     	; 0x6d0 <read_from_keypad+0xa2>
		__ticks = 1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	9b 87       	std	Y+11, r25	; 0x0b
     6cc:	8a 87       	std	Y+10, r24	; 0x0a
     6ce:	46 c0       	rjmp	.+140    	; 0x75c <read_from_keypad+0x12e>
	else if (__tmp > 65535)
     6d0:	11 e0       	ldi	r17, 0x01	; 1
     6d2:	6e 81       	ldd	r22, Y+6	; 0x06
     6d4:	7f 81       	ldd	r23, Y+7	; 0x07
     6d6:	88 85       	ldd	r24, Y+8	; 0x08
     6d8:	99 85       	ldd	r25, Y+9	; 0x09
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	3f ef       	ldi	r19, 0xFF	; 255
     6de:	4f e7       	ldi	r20, 0x7F	; 127
     6e0:	57 e4       	ldi	r21, 0x47	; 71
     6e2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     6e6:	18 16       	cp	r1, r24
     6e8:	0c f0       	brlt	.+2      	; 0x6ec <read_from_keypad+0xbe>
     6ea:	10 e0       	ldi	r17, 0x00	; 0
     6ec:	11 23       	and	r17, r17
     6ee:	61 f1       	breq	.+88     	; 0x748 <read_from_keypad+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f0:	6a 81       	ldd	r22, Y+2	; 0x02
     6f2:	7b 81       	ldd	r23, Y+3	; 0x03
     6f4:	8c 81       	ldd	r24, Y+4	; 0x04
     6f6:	9d 81       	ldd	r25, Y+5	; 0x05
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e2       	ldi	r20, 0x20	; 32
     6fe:	51 e4       	ldi	r21, 0x41	; 65
     700:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     704:	dc 01       	movw	r26, r24
     706:	cb 01       	movw	r24, r22
     708:	bc 01       	movw	r22, r24
     70a:	cd 01       	movw	r24, r26
     70c:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	9b 87       	std	Y+11, r25	; 0x0b
     716:	8a 87       	std	Y+10, r24	; 0x0a
     718:	12 c0       	rjmp	.+36     	; 0x73e <read_from_keypad+0x110>
     71a:	80 e9       	ldi	r24, 0x90	; 144
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	9d 87       	std	Y+13, r25	; 0x0d
     720:	8c 87       	std	Y+12, r24	; 0x0c
     722:	8c 85       	ldd	r24, Y+12	; 0x0c
     724:	9d 85       	ldd	r25, Y+13	; 0x0d
     726:	8c 01       	movw	r16, r24
     728:	c8 01       	movw	r24, r16
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <read_from_keypad+0xfc>
     72e:	8c 01       	movw	r16, r24
     730:	1d 87       	std	Y+13, r17	; 0x0d
     732:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	8a 85       	ldd	r24, Y+10	; 0x0a
     736:	9b 85       	ldd	r25, Y+11	; 0x0b
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9b 87       	std	Y+11, r25	; 0x0b
     73c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73e:	8a 85       	ldd	r24, Y+10	; 0x0a
     740:	9b 85       	ldd	r25, Y+11	; 0x0b
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	51 f7       	brne	.-44     	; 0x71a <read_from_keypad+0xec>
     746:	17 c0       	rjmp	.+46     	; 0x776 <read_from_keypad+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     748:	6e 81       	ldd	r22, Y+6	; 0x06
     74a:	7f 81       	ldd	r23, Y+7	; 0x07
     74c:	88 85       	ldd	r24, Y+8	; 0x08
     74e:	99 85       	ldd	r25, Y+9	; 0x09
     750:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	9b 87       	std	Y+11, r25	; 0x0b
     75a:	8a 87       	std	Y+10, r24	; 0x0a
     75c:	8a 85       	ldd	r24, Y+10	; 0x0a
     75e:	9b 85       	ldd	r25, Y+11	; 0x0b
     760:	9f 87       	std	Y+15, r25	; 0x0f
     762:	8e 87       	std	Y+14, r24	; 0x0e
     764:	8e 85       	ldd	r24, Y+14	; 0x0e
     766:	9f 85       	ldd	r25, Y+15	; 0x0f
     768:	8c 01       	movw	r16, r24
     76a:	f8 01       	movw	r30, r16
     76c:	31 97       	sbiw	r30, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <read_from_keypad+0x13e>
     770:	8f 01       	movw	r16, r30
     772:	1f 87       	std	Y+15, r17	; 0x0f
     774:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(10);
	calc_ctrl_port = IDLE; 
     776:	88 e2       	ldi	r24, 0x28	; 40
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	2f ef       	ldi	r18, 0xFF	; 255
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
	return temp ;
     780:	89 81       	ldd	r24, Y+1	; 0x01
}
     782:	2f 96       	adiw	r28, 0x0f	; 15
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <get_key_presed>:

char get_key_presed(){
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	ee 97       	sbiw	r28, 0x3e	; 62
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t OUT_VAL[4] ={0XEF,0XDF,0XBF,0X7F};
     7b0:	8f ee       	ldi	r24, 0xEF	; 239
     7b2:	8b af       	std	Y+59, r24	; 0x3b
     7b4:	8f ed       	ldi	r24, 0xDF	; 223
     7b6:	8c af       	std	Y+60, r24	; 0x3c
     7b8:	8f eb       	ldi	r24, 0xBF	; 191
     7ba:	8d af       	std	Y+61, r24	; 0x3d
     7bc:	8f e7       	ldi	r24, 0x7F	; 127
     7be:	8e af       	std	Y+62, r24	; 0x3e
	while (1)
	{
		for (uint8_t i=0;i<4;i++)
     7c0:	19 82       	std	Y+1, r1	; 0x01
     7c2:	5c c2       	rjmp	.+1208   	; 0xc7c <__stack+0x37d>
		{
			uint8_t tmp;
			write_to_keypad(OUT_VAL[i]);
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	88 2f       	mov	r24, r24
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	9e 01       	movw	r18, r28
     7cc:	25 5c       	subi	r18, 0xC5	; 197
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	82 0f       	add	r24, r18
     7d2:	93 1f       	adc	r25, r19
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <write_to_keypad>
			tmp = read_from_keypad();
     7dc:	0e 94 17 03 	call	0x62e	; 0x62e <read_from_keypad>
     7e0:	8a 83       	std	Y+2, r24	; 0x02
			tmp &= 0X0F;
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	8f 70       	andi	r24, 0x0F	; 15
     7e6:	8a 83       	std	Y+2, r24	; 0x02
			switch (tmp) {
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	88 2f       	mov	r24, r24
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	8b 30       	cpi	r24, 0x0B	; 11
     7f0:	91 05       	cpc	r25, r1
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <get_key_presed+0x5e>
     7f4:	28 c1       	rjmp	.+592    	; 0xa46 <__stack+0x147>
     7f6:	8c 30       	cpi	r24, 0x0C	; 12
     7f8:	91 05       	cpc	r25, r1
     7fa:	2c f4       	brge	.+10     	; 0x806 <get_key_presed+0x6e>
     7fc:	87 30       	cpi	r24, 0x07	; 7
     7fe:	91 05       	cpc	r25, r1
     800:	09 f4       	brne	.+2      	; 0x804 <get_key_presed+0x6c>
     802:	ad c1       	rjmp	.+858    	; 0xb5e <__stack+0x25f>
     804:	38 c2       	rjmp	.+1136   	; 0xc76 <__stack+0x377>
     806:	8d 30       	cpi	r24, 0x0D	; 13
     808:	91 05       	cpc	r25, r1
     80a:	09 f4       	brne	.+2      	; 0x80e <get_key_presed+0x76>
     80c:	90 c0       	rjmp	.+288    	; 0x92e <__stack+0x2f>
     80e:	8e 30       	cpi	r24, 0x0E	; 14
     810:	91 05       	cpc	r25, r1
     812:	09 f0       	breq	.+2      	; 0x816 <get_key_presed+0x7e>
     814:	30 c2       	rjmp	.+1120   	; 0xc76 <__stack+0x377>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a6 e9       	ldi	r26, 0x96	; 150
     81c:	b3 e4       	ldi	r27, 0x43	; 67
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ad 83       	std	Y+5, r26	; 0x05
     824:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     826:	6b 81       	ldd	r22, Y+3	; 0x03
     828:	7c 81       	ldd	r23, Y+4	; 0x04
     82a:	8d 81       	ldd	r24, Y+5	; 0x05
     82c:	9e 81       	ldd	r25, Y+6	; 0x06
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	4a e7       	ldi	r20, 0x7A	; 122
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8f 83       	std	Y+7, r24	; 0x07
     840:	98 87       	std	Y+8, r25	; 0x08
     842:	a9 87       	std	Y+9, r26	; 0x09
     844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     846:	11 e0       	ldi	r17, 0x01	; 1
     848:	6f 81       	ldd	r22, Y+7	; 0x07
     84a:	78 85       	ldd	r23, Y+8	; 0x08
     84c:	89 85       	ldd	r24, Y+9	; 0x09
     84e:	9a 85       	ldd	r25, Y+10	; 0x0a
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e8       	ldi	r20, 0x80	; 128
     856:	5f e3       	ldi	r21, 0x3F	; 63
     858:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     85c:	88 23       	and	r24, r24
     85e:	0c f0       	brlt	.+2      	; 0x862 <get_key_presed+0xca>
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	11 23       	and	r17, r17
     864:	29 f0       	breq	.+10     	; 0x870 <get_key_presed+0xd8>
		__ticks = 1;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9c 87       	std	Y+12, r25	; 0x0c
     86c:	8b 87       	std	Y+11, r24	; 0x0b
     86e:	46 c0       	rjmp	.+140    	; 0x8fc <get_key_presed+0x164>
	else if (__tmp > 65535)
     870:	11 e0       	ldi	r17, 0x01	; 1
     872:	6f 81       	ldd	r22, Y+7	; 0x07
     874:	78 85       	ldd	r23, Y+8	; 0x08
     876:	89 85       	ldd	r24, Y+9	; 0x09
     878:	9a 85       	ldd	r25, Y+10	; 0x0a
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	3f ef       	ldi	r19, 0xFF	; 255
     87e:	4f e7       	ldi	r20, 0x7F	; 127
     880:	57 e4       	ldi	r21, 0x47	; 71
     882:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     886:	18 16       	cp	r1, r24
     888:	0c f0       	brlt	.+2      	; 0x88c <get_key_presed+0xf4>
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	11 23       	and	r17, r17
     88e:	61 f1       	breq	.+88     	; 0x8e8 <get_key_presed+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     890:	6b 81       	ldd	r22, Y+3	; 0x03
     892:	7c 81       	ldd	r23, Y+4	; 0x04
     894:	8d 81       	ldd	r24, Y+5	; 0x05
     896:	9e 81       	ldd	r25, Y+6	; 0x06
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e2       	ldi	r20, 0x20	; 32
     89e:	51 e4       	ldi	r21, 0x41	; 65
     8a0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	bc 01       	movw	r22, r24
     8aa:	cd 01       	movw	r24, r26
     8ac:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     8b0:	dc 01       	movw	r26, r24
     8b2:	cb 01       	movw	r24, r22
     8b4:	9c 87       	std	Y+12, r25	; 0x0c
     8b6:	8b 87       	std	Y+11, r24	; 0x0b
     8b8:	12 c0       	rjmp	.+36     	; 0x8de <get_key_presed+0x146>
     8ba:	80 e9       	ldi	r24, 0x90	; 144
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	9e 87       	std	Y+14, r25	; 0x0e
     8c0:	8d 87       	std	Y+13, r24	; 0x0d
     8c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     8c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     8c6:	8c 01       	movw	r16, r24
     8c8:	c8 01       	movw	r24, r16
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <get_key_presed+0x132>
     8ce:	8c 01       	movw	r16, r24
     8d0:	1e 87       	std	Y+14, r17	; 0x0e
     8d2:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	9c 87       	std	Y+12, r25	; 0x0c
     8dc:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8de:	8b 85       	ldd	r24, Y+11	; 0x0b
     8e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	51 f7       	brne	.-44     	; 0x8ba <get_key_presed+0x122>
     8e6:	17 c0       	rjmp	.+46     	; 0x916 <__stack+0x17>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e8:	6f 81       	ldd	r22, Y+7	; 0x07
     8ea:	78 85       	ldd	r23, Y+8	; 0x08
     8ec:	89 85       	ldd	r24, Y+9	; 0x09
     8ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f0:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	9c 87       	std	Y+12, r25	; 0x0c
     8fa:	8b 87       	std	Y+11, r24	; 0x0b
     8fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     8fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     900:	98 8b       	std	Y+16, r25	; 0x10
     902:	8f 87       	std	Y+15, r24	; 0x0f
     904:	8f 85       	ldd	r24, Y+15	; 0x0f
     906:	98 89       	ldd	r25, Y+16	; 0x10
     908:	8c 01       	movw	r16, r24
     90a:	f8 01       	movw	r30, r16
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xd>
     910:	8f 01       	movw	r16, r30
     912:	18 8b       	std	Y+16, r17	; 0x10
     914:	0f 87       	std	Y+15, r16	; 0x0f
				case 0X0E :	_delay_ms(300) ; return MyKeypad[i][0]; break;
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	88 2f       	mov	r24, r24
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	9e 4f       	sbci	r25, 0xFE	; 254
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	ac c1       	rjmp	.+856    	; 0xc86 <__stack+0x387>
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a6 e9       	ldi	r26, 0x96	; 150
     934:	b3 e4       	ldi	r27, 0x43	; 67
     936:	89 8b       	std	Y+17, r24	; 0x11
     938:	9a 8b       	std	Y+18, r25	; 0x12
     93a:	ab 8b       	std	Y+19, r26	; 0x13
     93c:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     93e:	69 89       	ldd	r22, Y+17	; 0x11
     940:	7a 89       	ldd	r23, Y+18	; 0x12
     942:	8b 89       	ldd	r24, Y+19	; 0x13
     944:	9c 89       	ldd	r25, Y+20	; 0x14
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	4a e7       	ldi	r20, 0x7A	; 122
     94c:	55 e4       	ldi	r21, 0x45	; 69
     94e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
     956:	8d 8b       	std	Y+21, r24	; 0x15
     958:	9e 8b       	std	Y+22, r25	; 0x16
     95a:	af 8b       	std	Y+23, r26	; 0x17
     95c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     95e:	11 e0       	ldi	r17, 0x01	; 1
     960:	6d 89       	ldd	r22, Y+21	; 0x15
     962:	7e 89       	ldd	r23, Y+22	; 0x16
     964:	8f 89       	ldd	r24, Y+23	; 0x17
     966:	98 8d       	ldd	r25, Y+24	; 0x18
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e8       	ldi	r20, 0x80	; 128
     96e:	5f e3       	ldi	r21, 0x3F	; 63
     970:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     974:	88 23       	and	r24, r24
     976:	0c f0       	brlt	.+2      	; 0x97a <__stack+0x7b>
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	11 23       	and	r17, r17
     97c:	29 f0       	breq	.+10     	; 0x988 <__stack+0x89>
		__ticks = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	9a 8f       	std	Y+26, r25	; 0x1a
     984:	89 8f       	std	Y+25, r24	; 0x19
     986:	46 c0       	rjmp	.+140    	; 0xa14 <__stack+0x115>
	else if (__tmp > 65535)
     988:	11 e0       	ldi	r17, 0x01	; 1
     98a:	6d 89       	ldd	r22, Y+21	; 0x15
     98c:	7e 89       	ldd	r23, Y+22	; 0x16
     98e:	8f 89       	ldd	r24, Y+23	; 0x17
     990:	98 8d       	ldd	r25, Y+24	; 0x18
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	3f ef       	ldi	r19, 0xFF	; 255
     996:	4f e7       	ldi	r20, 0x7F	; 127
     998:	57 e4       	ldi	r21, 0x47	; 71
     99a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     99e:	18 16       	cp	r1, r24
     9a0:	0c f0       	brlt	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	10 e0       	ldi	r17, 0x00	; 0
     9a4:	11 23       	and	r17, r17
     9a6:	61 f1       	breq	.+88     	; 0xa00 <__stack+0x101>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a8:	69 89       	ldd	r22, Y+17	; 0x11
     9aa:	7a 89       	ldd	r23, Y+18	; 0x12
     9ac:	8b 89       	ldd	r24, Y+19	; 0x13
     9ae:	9c 89       	ldd	r25, Y+20	; 0x14
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e2       	ldi	r20, 0x20	; 32
     9b6:	51 e4       	ldi	r21, 0x41	; 65
     9b8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	bc 01       	movw	r22, r24
     9c2:	cd 01       	movw	r24, r26
     9c4:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	9a 8f       	std	Y+26, r25	; 0x1a
     9ce:	89 8f       	std	Y+25, r24	; 0x19
     9d0:	12 c0       	rjmp	.+36     	; 0x9f6 <__stack+0xf7>
     9d2:	80 e9       	ldi	r24, 0x90	; 144
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	9c 8f       	std	Y+28, r25	; 0x1c
     9d8:	8b 8f       	std	Y+27, r24	; 0x1b
     9da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9de:	8c 01       	movw	r16, r24
     9e0:	c8 01       	movw	r24, r16
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <__stack+0xe3>
     9e6:	8c 01       	movw	r16, r24
     9e8:	1c 8f       	std	Y+28, r17	; 0x1c
     9ea:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ec:	89 8d       	ldd	r24, Y+25	; 0x19
     9ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	9a 8f       	std	Y+26, r25	; 0x1a
     9f4:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f6:	89 8d       	ldd	r24, Y+25	; 0x19
     9f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	51 f7       	brne	.-44     	; 0x9d2 <__stack+0xd3>
     9fe:	17 c0       	rjmp	.+46     	; 0xa2e <__stack+0x12f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a00:	6d 89       	ldd	r22, Y+21	; 0x15
     a02:	7e 89       	ldd	r23, Y+22	; 0x16
     a04:	8f 89       	ldd	r24, Y+23	; 0x17
     a06:	98 8d       	ldd	r25, Y+24	; 0x18
     a08:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     a0c:	dc 01       	movw	r26, r24
     a0e:	cb 01       	movw	r24, r22
     a10:	9a 8f       	std	Y+26, r25	; 0x1a
     a12:	89 8f       	std	Y+25, r24	; 0x19
     a14:	89 8d       	ldd	r24, Y+25	; 0x19
     a16:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a18:	9e 8f       	std	Y+30, r25	; 0x1e
     a1a:	8d 8f       	std	Y+29, r24	; 0x1d
     a1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a20:	8c 01       	movw	r16, r24
     a22:	f8 01       	movw	r30, r16
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <__stack+0x125>
     a28:	8f 01       	movw	r16, r30
     a2a:	1e 8f       	std	Y+30, r17	; 0x1e
     a2c:	0d 8f       	std	Y+29, r16	; 0x1d
				case 0X0D : _delay_ms(300) ; return MyKeypad[i][1]; break;
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	8e 5f       	subi	r24, 0xFE	; 254
     a3e:	9e 4f       	sbci	r25, 0xFE	; 254
     a40:	fc 01       	movw	r30, r24
     a42:	80 81       	ld	r24, Z
     a44:	20 c1       	rjmp	.+576    	; 0xc86 <__stack+0x387>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	a6 e9       	ldi	r26, 0x96	; 150
     a4c:	b3 e4       	ldi	r27, 0x43	; 67
     a4e:	8f 8f       	std	Y+31, r24	; 0x1f
     a50:	98 a3       	std	Y+32, r25	; 0x20
     a52:	a9 a3       	std	Y+33, r26	; 0x21
     a54:	ba a3       	std	Y+34, r27	; 0x22
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     a56:	6f 8d       	ldd	r22, Y+31	; 0x1f
     a58:	78 a1       	ldd	r23, Y+32	; 0x20
     a5a:	89 a1       	ldd	r24, Y+33	; 0x21
     a5c:	9a a1       	ldd	r25, Y+34	; 0x22
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	4a e7       	ldi	r20, 0x7A	; 122
     a64:	55 e4       	ldi	r21, 0x45	; 69
     a66:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	8b a3       	std	Y+35, r24	; 0x23
     a70:	9c a3       	std	Y+36, r25	; 0x24
     a72:	ad a3       	std	Y+37, r26	; 0x25
     a74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     a76:	11 e0       	ldi	r17, 0x01	; 1
     a78:	6b a1       	ldd	r22, Y+35	; 0x23
     a7a:	7c a1       	ldd	r23, Y+36	; 0x24
     a7c:	8d a1       	ldd	r24, Y+37	; 0x25
     a7e:	9e a1       	ldd	r25, Y+38	; 0x26
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	5f e3       	ldi	r21, 0x3F	; 63
     a88:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	0c f0       	brlt	.+2      	; 0xa92 <__stack+0x193>
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	11 23       	and	r17, r17
     a94:	29 f0       	breq	.+10     	; 0xaa0 <__stack+0x1a1>
		__ticks = 1;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	98 a7       	std	Y+40, r25	; 0x28
     a9c:	8f a3       	std	Y+39, r24	; 0x27
     a9e:	46 c0       	rjmp	.+140    	; 0xb2c <__stack+0x22d>
	else if (__tmp > 65535)
     aa0:	11 e0       	ldi	r17, 0x01	; 1
     aa2:	6b a1       	ldd	r22, Y+35	; 0x23
     aa4:	7c a1       	ldd	r23, Y+36	; 0x24
     aa6:	8d a1       	ldd	r24, Y+37	; 0x25
     aa8:	9e a1       	ldd	r25, Y+38	; 0x26
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	4f e7       	ldi	r20, 0x7F	; 127
     ab0:	57 e4       	ldi	r21, 0x47	; 71
     ab2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     ab6:	18 16       	cp	r1, r24
     ab8:	0c f0       	brlt	.+2      	; 0xabc <__stack+0x1bd>
     aba:	10 e0       	ldi	r17, 0x00	; 0
     abc:	11 23       	and	r17, r17
     abe:	61 f1       	breq	.+88     	; 0xb18 <__stack+0x219>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac0:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ac2:	78 a1       	ldd	r23, Y+32	; 0x20
     ac4:	89 a1       	ldd	r24, Y+33	; 0x21
     ac6:	9a a1       	ldd	r25, Y+34	; 0x22
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e2       	ldi	r20, 0x20	; 32
     ace:	51 e4       	ldi	r21, 0x41	; 65
     ad0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     ad4:	dc 01       	movw	r26, r24
     ad6:	cb 01       	movw	r24, r22
     ad8:	bc 01       	movw	r22, r24
     ada:	cd 01       	movw	r24, r26
     adc:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     ae0:	dc 01       	movw	r26, r24
     ae2:	cb 01       	movw	r24, r22
     ae4:	98 a7       	std	Y+40, r25	; 0x28
     ae6:	8f a3       	std	Y+39, r24	; 0x27
     ae8:	12 c0       	rjmp	.+36     	; 0xb0e <__stack+0x20f>
     aea:	80 e9       	ldi	r24, 0x90	; 144
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	9a a7       	std	Y+42, r25	; 0x2a
     af0:	89 a7       	std	Y+41, r24	; 0x29
     af2:	89 a5       	ldd	r24, Y+41	; 0x29
     af4:	9a a5       	ldd	r25, Y+42	; 0x2a
     af6:	8c 01       	movw	r16, r24
     af8:	c8 01       	movw	r24, r16
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <__stack+0x1fb>
     afe:	8c 01       	movw	r16, r24
     b00:	1a a7       	std	Y+42, r17	; 0x2a
     b02:	09 a7       	std	Y+41, r16	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b04:	8f a1       	ldd	r24, Y+39	; 0x27
     b06:	98 a5       	ldd	r25, Y+40	; 0x28
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	98 a7       	std	Y+40, r25	; 0x28
     b0c:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b0e:	8f a1       	ldd	r24, Y+39	; 0x27
     b10:	98 a5       	ldd	r25, Y+40	; 0x28
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	51 f7       	brne	.-44     	; 0xaea <__stack+0x1eb>
     b16:	17 c0       	rjmp	.+46     	; 0xb46 <__stack+0x247>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b18:	6b a1       	ldd	r22, Y+35	; 0x23
     b1a:	7c a1       	ldd	r23, Y+36	; 0x24
     b1c:	8d a1       	ldd	r24, Y+37	; 0x25
     b1e:	9e a1       	ldd	r25, Y+38	; 0x26
     b20:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	98 a7       	std	Y+40, r25	; 0x28
     b2a:	8f a3       	std	Y+39, r24	; 0x27
     b2c:	8f a1       	ldd	r24, Y+39	; 0x27
     b2e:	98 a5       	ldd	r25, Y+40	; 0x28
     b30:	9c a7       	std	Y+44, r25	; 0x2c
     b32:	8b a7       	std	Y+43, r24	; 0x2b
     b34:	8b a5       	ldd	r24, Y+43	; 0x2b
     b36:	9c a5       	ldd	r25, Y+44	; 0x2c
     b38:	8c 01       	movw	r16, r24
     b3a:	f8 01       	movw	r30, r16
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <__stack+0x23d>
     b40:	8f 01       	movw	r16, r30
     b42:	1c a7       	std	Y+44, r17	; 0x2c
     b44:	0b a7       	std	Y+43, r16	; 0x2b
				case 0X0B : _delay_ms(300) ; return MyKeypad[i][2]; break;
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	8d 5f       	subi	r24, 0xFD	; 253
     b56:	9e 4f       	sbci	r25, 0xFE	; 254
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	94 c0       	rjmp	.+296    	; 0xc86 <__stack+0x387>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a6 e9       	ldi	r26, 0x96	; 150
     b64:	b3 e4       	ldi	r27, 0x43	; 67
     b66:	8d a7       	std	Y+45, r24	; 0x2d
     b68:	9e a7       	std	Y+46, r25	; 0x2e
     b6a:	af a7       	std	Y+47, r26	; 0x2f
     b6c:	b8 ab       	std	Y+48, r27	; 0x30
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6e:	6d a5       	ldd	r22, Y+45	; 0x2d
     b70:	7e a5       	ldd	r23, Y+46	; 0x2e
     b72:	8f a5       	ldd	r24, Y+47	; 0x2f
     b74:	98 a9       	ldd	r25, Y+48	; 0x30
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4a e7       	ldi	r20, 0x7A	; 122
     b7c:	55 e4       	ldi	r21, 0x45	; 69
     b7e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	89 ab       	std	Y+49, r24	; 0x31
     b88:	9a ab       	std	Y+50, r25	; 0x32
     b8a:	ab ab       	std	Y+51, r26	; 0x33
     b8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     b8e:	11 e0       	ldi	r17, 0x01	; 1
     b90:	69 a9       	ldd	r22, Y+49	; 0x31
     b92:	7a a9       	ldd	r23, Y+50	; 0x32
     b94:	8b a9       	ldd	r24, Y+51	; 0x33
     b96:	9c a9       	ldd	r25, Y+52	; 0x34
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	40 e8       	ldi	r20, 0x80	; 128
     b9e:	5f e3       	ldi	r21, 0x3F	; 63
     ba0:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     ba4:	88 23       	and	r24, r24
     ba6:	0c f0       	brlt	.+2      	; 0xbaa <__stack+0x2ab>
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	11 23       	and	r17, r17
     bac:	29 f0       	breq	.+10     	; 0xbb8 <__stack+0x2b9>
		__ticks = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9e ab       	std	Y+54, r25	; 0x36
     bb4:	8d ab       	std	Y+53, r24	; 0x35
     bb6:	46 c0       	rjmp	.+140    	; 0xc44 <__stack+0x345>
	else if (__tmp > 65535)
     bb8:	11 e0       	ldi	r17, 0x01	; 1
     bba:	69 a9       	ldd	r22, Y+49	; 0x31
     bbc:	7a a9       	ldd	r23, Y+50	; 0x32
     bbe:	8b a9       	ldd	r24, Y+51	; 0x33
     bc0:	9c a9       	ldd	r25, Y+52	; 0x34
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	3f ef       	ldi	r19, 0xFF	; 255
     bc6:	4f e7       	ldi	r20, 0x7F	; 127
     bc8:	57 e4       	ldi	r21, 0x47	; 71
     bca:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     bce:	18 16       	cp	r1, r24
     bd0:	0c f0       	brlt	.+2      	; 0xbd4 <__stack+0x2d5>
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	11 23       	and	r17, r17
     bd6:	61 f1       	breq	.+88     	; 0xc30 <__stack+0x331>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd8:	6d a5       	ldd	r22, Y+45	; 0x2d
     bda:	7e a5       	ldd	r23, Y+46	; 0x2e
     bdc:	8f a5       	ldd	r24, Y+47	; 0x2f
     bde:	98 a9       	ldd	r25, Y+48	; 0x30
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e2       	ldi	r20, 0x20	; 32
     be6:	51 e4       	ldi	r21, 0x41	; 65
     be8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	9e ab       	std	Y+54, r25	; 0x36
     bfe:	8d ab       	std	Y+53, r24	; 0x35
     c00:	12 c0       	rjmp	.+36     	; 0xc26 <__stack+0x327>
     c02:	80 e9       	ldi	r24, 0x90	; 144
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	98 af       	std	Y+56, r25	; 0x38
     c08:	8f ab       	std	Y+55, r24	; 0x37
     c0a:	8f a9       	ldd	r24, Y+55	; 0x37
     c0c:	98 ad       	ldd	r25, Y+56	; 0x38
     c0e:	8c 01       	movw	r16, r24
     c10:	c8 01       	movw	r24, r16
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <__stack+0x313>
     c16:	8c 01       	movw	r16, r24
     c18:	18 af       	std	Y+56, r17	; 0x38
     c1a:	0f ab       	std	Y+55, r16	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1c:	8d a9       	ldd	r24, Y+53	; 0x35
     c1e:	9e a9       	ldd	r25, Y+54	; 0x36
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	9e ab       	std	Y+54, r25	; 0x36
     c24:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c26:	8d a9       	ldd	r24, Y+53	; 0x35
     c28:	9e a9       	ldd	r25, Y+54	; 0x36
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	51 f7       	brne	.-44     	; 0xc02 <__stack+0x303>
     c2e:	17 c0       	rjmp	.+46     	; 0xc5e <__stack+0x35f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c30:	69 a9       	ldd	r22, Y+49	; 0x31
     c32:	7a a9       	ldd	r23, Y+50	; 0x32
     c34:	8b a9       	ldd	r24, Y+51	; 0x33
     c36:	9c a9       	ldd	r25, Y+52	; 0x34
     c38:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	9e ab       	std	Y+54, r25	; 0x36
     c42:	8d ab       	std	Y+53, r24	; 0x35
     c44:	8d a9       	ldd	r24, Y+53	; 0x35
     c46:	9e a9       	ldd	r25, Y+54	; 0x36
     c48:	9a af       	std	Y+58, r25	; 0x3a
     c4a:	89 af       	std	Y+57, r24	; 0x39
     c4c:	89 ad       	ldd	r24, Y+57	; 0x39
     c4e:	9a ad       	ldd	r25, Y+58	; 0x3a
     c50:	8c 01       	movw	r16, r24
     c52:	f8 01       	movw	r30, r16
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <__stack+0x355>
     c58:	8f 01       	movw	r16, r30
     c5a:	1a af       	std	Y+58, r17	; 0x3a
     c5c:	09 af       	std	Y+57, r16	; 0x39
				case 0X07 :	_delay_ms(300) ; return MyKeypad[i][3]; break;
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	88 2f       	mov	r24, r24
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	8c 5f       	subi	r24, 0xFC	; 252
     c6e:	9e 4f       	sbci	r25, 0xFE	; 254
     c70:	fc 01       	movw	r30, r24
     c72:	80 81       	ld	r24, Z
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <__stack+0x387>

char get_key_presed(){
	uint8_t OUT_VAL[4] ={0XEF,0XDF,0XBF,0X7F};
	while (1)
	{
		for (uint8_t i=0;i<4;i++)
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	08 f4       	brcc	.+2      	; 0xc84 <__stack+0x385>
     c82:	a0 cd       	rjmp	.-1216   	; 0x7c4 <get_key_presed+0x2c>
				case 0X0D : _delay_ms(300) ; return MyKeypad[i][1]; break;
				case 0X0B : _delay_ms(300) ; return MyKeypad[i][2]; break;
				case 0X07 :	_delay_ms(300) ; return MyKeypad[i][3]; break;
			}					
		}		
	}
     c84:	9d cd       	rjmp	.-1222   	; 0x7c0 <get_key_presed+0x28>
}
     c86:	ee 96       	adiw	r28, 0x3e	; 62
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	08 95       	ret

00000c9c <operat>:
 
int operat(int firNum ,int SecNum,char op){
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <operat+0x6>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <operat+0x8>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	7c 83       	std	Y+4, r23	; 0x04
     cb0:	6b 83       	std	Y+3, r22	; 0x03
     cb2:	4d 83       	std	Y+5, r20	; 0x05
		if (op=='+') return firNum + SecNum;
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
     cb6:	8b 32       	cpi	r24, 0x2B	; 43
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <operat+0x2c>
     cba:	29 81       	ldd	r18, Y+1	; 0x01
     cbc:	3a 81       	ldd	r19, Y+2	; 0x02
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	38 c0       	rjmp	.+112    	; 0xd38 <operat+0x9c>
		if (op=='-') return firNum - SecNum; 
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	8d 32       	cpi	r24, 0x2D	; 45
     ccc:	49 f4       	brne	.+18     	; 0xce0 <operat+0x44>
     cce:	29 81       	ldd	r18, Y+1	; 0x01
     cd0:	3a 81       	ldd	r19, Y+2	; 0x02
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	a9 01       	movw	r20, r18
     cd8:	48 1b       	sub	r20, r24
     cda:	59 0b       	sbc	r21, r25
     cdc:	ca 01       	movw	r24, r20
     cde:	2c c0       	rjmp	.+88     	; 0xd38 <operat+0x9c>
		if (op=='x') return firNum * SecNum;
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
     ce2:	88 37       	cpi	r24, 0x78	; 120
     ce4:	61 f4       	brne	.+24     	; 0xcfe <operat+0x62>
     ce6:	49 81       	ldd	r20, Y+1	; 0x01
     ce8:	5a 81       	ldd	r21, Y+2	; 0x02
     cea:	2b 81       	ldd	r18, Y+3	; 0x03
     cec:	3c 81       	ldd	r19, Y+4	; 0x04
     cee:	42 9f       	mul	r20, r18
     cf0:	c0 01       	movw	r24, r0
     cf2:	43 9f       	mul	r20, r19
     cf4:	90 0d       	add	r25, r0
     cf6:	52 9f       	mul	r21, r18
     cf8:	90 0d       	add	r25, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	1d c0       	rjmp	.+58     	; 0xd38 <operat+0x9c>
		if (op=='/'){
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	8f 32       	cpi	r24, 0x2F	; 47
     d02:	c9 f4       	brne	.+50     	; 0xd36 <operat+0x9a>
			if(SecNum == 0)
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	59 f4       	brne	.+22     	; 0xd22 <operat+0x86>
			{
				SEND_TO_LCD(start_2nd_line,CMD);
     d0c:	80 ec       	ldi	r24, 0xC0	; 192
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
				print_to_LCD("Error");
     d14:	81 e1       	ldi	r24, 0x11	; 17
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 43 02 	call	0x486	; 0x486 <print_to_LCD>
				return -100 ;
     d1c:	8c e9       	ldi	r24, 0x9C	; 156
     d1e:	9f ef       	ldi	r25, 0xFF	; 255
     d20:	0b c0       	rjmp	.+22     	; 0xd38 <operat+0x9c>
			}			  
			else
			  return firNum / SecNum;  
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	2b 81       	ldd	r18, Y+3	; 0x03
     d28:	3c 81       	ldd	r19, Y+4	; 0x04
     d2a:	b9 01       	movw	r22, r18
     d2c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__divmodhi4>
     d30:	9b 01       	movw	r18, r22
     d32:	c9 01       	movw	r24, r18
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <operat+0x9c>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <operat+0x9c>
		} 			
}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <calculate>:


int calculate(){
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	69 97       	sbiw	r28, 0x19	; 25
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
	char firist[8],second[8] ,op;
	int index=0;
     d5c:	1a 82       	std	Y+2, r1	; 0x02
     d5e:	19 82       	std	Y+1, r1	; 0x01
	while(Expression[index] <='9'&& Expression[index]>='0' || Expression[index] =='-')
     d60:	14 c0       	rjmp	.+40     	; 0xd8a <calculate+0x42>
	{
		firist[index]=Expression[index];
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	8a 5c       	subi	r24, 0xCA	; 202
     d68:	9e 4f       	sbci	r25, 0xFE	; 254
     d6a:	fc 01       	movw	r30, r24
     d6c:	40 81       	ld	r20, Z
     d6e:	9e 01       	movw	r18, r28
     d70:	26 5f       	subi	r18, 0xF6	; 246
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	82 0f       	add	r24, r18
     d7a:	93 1f       	adc	r25, r19
     d7c:	fc 01       	movw	r30, r24
     d7e:	40 83       	st	Z, r20
		index++;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01


int calculate(){
	char firist[8],second[8] ,op;
	int index=0;
	while(Expression[index] <='9'&& Expression[index]>='0' || Expression[index] =='-')
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	8a 5c       	subi	r24, 0xCA	; 202
     d90:	9e 4f       	sbci	r25, 0xFE	; 254
     d92:	fc 01       	movw	r30, r24
     d94:	80 81       	ld	r24, Z
     d96:	8a 33       	cpi	r24, 0x3A	; 58
     d98:	40 f4       	brcc	.+16     	; 0xdaa <calculate+0x62>
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	8a 5c       	subi	r24, 0xCA	; 202
     da0:	9e 4f       	sbci	r25, 0xFE	; 254
     da2:	fc 01       	movw	r30, r24
     da4:	80 81       	ld	r24, Z
     da6:	80 33       	cpi	r24, 0x30	; 48
     da8:	e0 f6       	brcc	.-72     	; 0xd62 <calculate+0x1a>
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	8a 5c       	subi	r24, 0xCA	; 202
     db0:	9e 4f       	sbci	r25, 0xFE	; 254
     db2:	fc 01       	movw	r30, r24
     db4:	80 81       	ld	r24, Z
     db6:	8d 32       	cpi	r24, 0x2D	; 45
     db8:	a1 f2       	breq	.-88     	; 0xd62 <calculate+0x1a>
	{
		firist[index]=Expression[index];
		index++;
	}
	firist[index]='\0';
     dba:	9e 01       	movw	r18, r28
     dbc:	26 5f       	subi	r18, 0xF6	; 246
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	fc 01       	movw	r30, r24
     dca:	10 82       	st	Z, r1
	op=Expression[index++];
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	8a 5c       	subi	r24, 0xCA	; 202
     dd2:	9e 4f       	sbci	r25, 0xFE	; 254
     dd4:	fc 01       	movw	r30, r24
     dd6:	80 81       	ld	r24, Z
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
	int start =0;
     de4:	1c 82       	std	Y+4, r1	; 0x04
     de6:	1b 82       	std	Y+3, r1	; 0x03
	while(Expression[index] != '=')
     de8:	19 c0       	rjmp	.+50     	; 0xe1c <calculate+0xd4>
	{
		second[start]=Expression[index];
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	8a 5c       	subi	r24, 0xCA	; 202
     df0:	9e 4f       	sbci	r25, 0xFE	; 254
     df2:	fc 01       	movw	r30, r24
     df4:	40 81       	ld	r20, Z
     df6:	9e 01       	movw	r18, r28
     df8:	2e 5e       	subi	r18, 0xEE	; 238
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	82 0f       	add	r24, r18
     e02:	93 1f       	adc	r25, r19
     e04:	fc 01       	movw	r30, r24
     e06:	40 83       	st	Z, r20
		start++;
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	9c 83       	std	Y+4, r25	; 0x04
     e10:	8b 83       	std	Y+3, r24	; 0x03
		index++;
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
		index++;
	}
	firist[index]='\0';
	op=Expression[index++];
	int start =0;
	while(Expression[index] != '=')
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	8a 5c       	subi	r24, 0xCA	; 202
     e22:	9e 4f       	sbci	r25, 0xFE	; 254
     e24:	fc 01       	movw	r30, r24
     e26:	80 81       	ld	r24, Z
     e28:	8d 33       	cpi	r24, 0x3D	; 61
     e2a:	f9 f6       	brne	.-66     	; 0xdea <calculate+0xa2>
	{
		second[start]=Expression[index];
		start++;
		index++;
	}
	second[index]='\0';
     e2c:	9e 01       	movw	r18, r28
     e2e:	2e 5e       	subi	r18, 0xEE	; 238
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	82 0f       	add	r24, r18
     e38:	93 1f       	adc	r25, r19
     e3a:	fc 01       	movw	r30, r24
     e3c:	10 82       	st	Z, r1
	int fst = atoi(firist);
     e3e:	ce 01       	movw	r24, r28
     e40:	0a 96       	adiw	r24, 0x0a	; 10
     e42:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <atoi>
     e46:	9f 83       	std	Y+7, r25	; 0x07
     e48:	8e 83       	std	Y+6, r24	; 0x06
	int sec = atoi(second);
     e4a:	ce 01       	movw	r24, r28
     e4c:	42 96       	adiw	r24, 0x12	; 18
     e4e:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <atoi>
     e52:	99 87       	std	Y+9, r25	; 0x09
     e54:	88 87       	std	Y+8, r24	; 0x08
	/*char f[8],s[8];
	itoa(fst,f,10);
	itoa(sec,s,10);
	print_to_LCD(f);
	print_to_LCD(s);*/
	return operat(fst,sec,op);
     e56:	8e 81       	ldd	r24, Y+6	; 0x06
     e58:	9f 81       	ldd	r25, Y+7	; 0x07
     e5a:	28 85       	ldd	r18, Y+8	; 0x08
     e5c:	39 85       	ldd	r19, Y+9	; 0x09
     e5e:	b9 01       	movw	r22, r18
     e60:	4d 81       	ldd	r20, Y+5	; 0x05
     e62:	0e 94 4e 06 	call	0xc9c	; 0xc9c <operat>
}	
     e66:	69 96       	adiw	r28, 0x19	; 25
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <main>:

int main(void)
{
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	61 97       	sbiw	r28, 0x11	; 17
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
	init_calc();
     e90:	0e 94 5f 01 	call	0x2be	; 0x2be <init_calc>
	INIT_LCD();
     e94:	0e 94 22 02 	call	0x444	; 0x444 <INIT_LCD>
	SEND_TO_LCD(start_1st_line+4,CMD);
     e98:	84 e8       	ldi	r24, 0x84	; 132
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
	print_to_LCD("Wellcom");
     ea0:	87 e1       	ldi	r24, 0x17	; 23
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 43 02 	call	0x486	; 0x486 <print_to_LCD>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	aa e7       	ldi	r26, 0x7A	; 122
     eae:	b4 e4       	ldi	r27, 0x44	; 68
     eb0:	8c 83       	std	Y+4, r24	; 0x04
     eb2:	9d 83       	std	Y+5, r25	; 0x05
     eb4:	ae 83       	std	Y+6, r26	; 0x06
     eb6:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     eb8:	6c 81       	ldd	r22, Y+4	; 0x04
     eba:	7d 81       	ldd	r23, Y+5	; 0x05
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a e7       	ldi	r20, 0x7A	; 122
     ec6:	55 e4       	ldi	r21, 0x45	; 69
     ec8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	88 87       	std	Y+8, r24	; 0x08
     ed2:	99 87       	std	Y+9, r25	; 0x09
     ed4:	aa 87       	std	Y+10, r26	; 0x0a
     ed6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     ed8:	11 e0       	ldi	r17, 0x01	; 1
     eda:	68 85       	ldd	r22, Y+8	; 0x08
     edc:	79 85       	ldd	r23, Y+9	; 0x09
     ede:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e8       	ldi	r20, 0x80	; 128
     ee8:	5f e3       	ldi	r21, 0x3F	; 63
     eea:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ltsf2>
     eee:	88 23       	and	r24, r24
     ef0:	0c f0       	brlt	.+2      	; 0xef4 <main+0x7c>
     ef2:	10 e0       	ldi	r17, 0x00	; 0
     ef4:	11 23       	and	r17, r17
     ef6:	29 f0       	breq	.+10     	; 0xf02 <main+0x8a>
		__ticks = 1;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	9d 87       	std	Y+13, r25	; 0x0d
     efe:	8c 87       	std	Y+12, r24	; 0x0c
     f00:	46 c0       	rjmp	.+140    	; 0xf8e <main+0x116>
	else if (__tmp > 65535)
     f02:	11 e0       	ldi	r17, 0x01	; 1
     f04:	68 85       	ldd	r22, Y+8	; 0x08
     f06:	79 85       	ldd	r23, Y+9	; 0x09
     f08:	8a 85       	ldd	r24, Y+10	; 0x0a
     f0a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	57 e4       	ldi	r21, 0x47	; 71
     f14:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__gtsf2>
     f18:	18 16       	cp	r1, r24
     f1a:	0c f0       	brlt	.+2      	; 0xf1e <main+0xa6>
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	11 23       	and	r17, r17
     f20:	61 f1       	breq	.+88     	; 0xf7a <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f22:	6c 81       	ldd	r22, Y+4	; 0x04
     f24:	7d 81       	ldd	r23, Y+5	; 0x05
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	9f 81       	ldd	r25, Y+7	; 0x07
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9d 87       	std	Y+13, r25	; 0x0d
     f48:	8c 87       	std	Y+12, r24	; 0x0c
     f4a:	12 c0       	rjmp	.+36     	; 0xf70 <main+0xf8>
     f4c:	80 e9       	ldi	r24, 0x90	; 144
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	9f 87       	std	Y+15, r25	; 0x0f
     f52:	8e 87       	std	Y+14, r24	; 0x0e
     f54:	8e 85       	ldd	r24, Y+14	; 0x0e
     f56:	9f 85       	ldd	r25, Y+15	; 0x0f
     f58:	8c 01       	movw	r16, r24
     f5a:	c8 01       	movw	r24, r16
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <main+0xe4>
     f60:	8c 01       	movw	r16, r24
     f62:	1f 87       	std	Y+15, r17	; 0x0f
     f64:	0e 87       	std	Y+14, r16	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f66:	8c 85       	ldd	r24, Y+12	; 0x0c
     f68:	9d 85       	ldd	r25, Y+13	; 0x0d
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	9d 87       	std	Y+13, r25	; 0x0d
     f6e:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f70:	8c 85       	ldd	r24, Y+12	; 0x0c
     f72:	9d 85       	ldd	r25, Y+13	; 0x0d
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	51 f7       	brne	.-44     	; 0xf4c <main+0xd4>
     f78:	17 c0       	rjmp	.+46     	; 0xfa8 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7a:	68 85       	ldd	r22, Y+8	; 0x08
     f7c:	79 85       	ldd	r23, Y+9	; 0x09
     f7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f80:	9b 85       	ldd	r25, Y+11	; 0x0b
     f82:	0e 94 47 08 	call	0x108e	; 0x108e <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	9d 87       	std	Y+13, r25	; 0x0d
     f8c:	8c 87       	std	Y+12, r24	; 0x0c
     f8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f90:	9d 85       	ldd	r25, Y+13	; 0x0d
     f92:	99 8b       	std	Y+17, r25	; 0x11
     f94:	88 8b       	std	Y+16, r24	; 0x10
     f96:	88 89       	ldd	r24, Y+16	; 0x10
     f98:	99 89       	ldd	r25, Y+17	; 0x11
     f9a:	8c 01       	movw	r16, r24
     f9c:	f8 01       	movw	r30, r16
     f9e:	31 97       	sbiw	r30, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <main+0x126>
     fa2:	8f 01       	movw	r16, r30
     fa4:	19 8b       	std	Y+17, r17	; 0x11
     fa6:	08 8b       	std	Y+16, r16	; 0x10
	_delay_ms(1000);
	SEND_TO_LCD(clr,CMD);
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
	SEND_TO_LCD(start_1st_line,CMD);
     fb0:	80 e8       	ldi	r24, 0x80	; 128
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <main+0x144>
			SEND_TO_LCD(start_2nd_line,CMD);
			itoa(res,str_res,10);
			print_to_LCD(str_res);
			done=0;
		}	
	}			
     fba:	00 00       	nop
	_delay_ms(1000);
	SEND_TO_LCD(clr,CMD);
	SEND_TO_LCD(start_1st_line,CMD);
	while(1)
	{
		for (int i=0;i<pixels;i++)
     fbc:	1a 82       	std	Y+2, r1	; 0x02
     fbe:	19 82       	std	Y+1, r1	; 0x01
     fc0:	41 c0       	rjmp	.+130    	; 0x1044 <main+0x1cc>
		{
			char KEY = get_key_presed(); 
     fc2:	0e 94 cc 03 	call	0x798	; 0x798 <get_key_presed>
     fc6:	8b 83       	std	Y+3, r24	; 0x03
			if (KEY=='N')
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	8e 34       	cpi	r24, 0x4E	; 78
     fcc:	89 f4       	brne	.+34     	; 0xff0 <main+0x178>
			{
				INIT_LCD();
     fce:	0e 94 22 02 	call	0x444	; 0x444 <INIT_LCD>
				memset(Expression,0,sizeof(Expression));
     fd2:	86 e3       	ldi	r24, 0x36	; 54
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	40 e1       	ldi	r20, 0x10	; 16
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <memset>
				res=0;
     fe2:	10 92 2a 01 	sts	0x012A, r1
     fe6:	10 92 29 01 	sts	0x0129, r1
				end_of_ex=0;
     fea:	10 92 2b 01 	sts	0x012B, r1
				break;
     fee:	34 c0       	rjmp	.+104    	; 0x1058 <main+0x1e0>
			}
			write_to_LCD(KEY);
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	0e 94 35 02 	call	0x46a	; 0x46a <write_to_LCD>
			Expression[i]=KEY;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	8a 5c       	subi	r24, 0xCA	; 202
     ffc:	9e 4f       	sbci	r25, 0xFE	; 254
     ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
			if(KEY =='=') 
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	8d 33       	cpi	r24, 0x3D	; 61
    1008:	c1 f4       	brne	.+48     	; 0x103a <main+0x1c2>
			{
				res = calculate() ;
    100a:	0e 94 a4 06 	call	0xd48	; 0xd48 <calculate>
    100e:	90 93 2a 01 	sts	0x012A, r25
    1012:	80 93 29 01 	sts	0x0129, r24
				end_of_ex=i;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 93 2b 01 	sts	0x012B, r24
				if(res== -100) done=0;
    101c:	80 91 29 01 	lds	r24, 0x0129
    1020:	90 91 2a 01 	lds	r25, 0x012A
    1024:	ff ef       	ldi	r31, 0xFF	; 255
    1026:	8c 39       	cpi	r24, 0x9C	; 156
    1028:	9f 07       	cpc	r25, r31
    102a:	19 f4       	brne	.+6      	; 0x1032 <main+0x1ba>
    102c:	10 92 28 01 	sts	0x0128, r1
				else done = 1;
				break;
    1030:	13 c0       	rjmp	.+38     	; 0x1058 <main+0x1e0>
			if(KEY =='=') 
			{
				res = calculate() ;
				end_of_ex=i;
				if(res== -100) done=0;
				else done = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 28 01 	sts	0x0128, r24
				break;
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <main+0x1e0>
	_delay_ms(1000);
	SEND_TO_LCD(clr,CMD);
	SEND_TO_LCD(start_1st_line,CMD);
	while(1)
	{
		for (int i=0;i<pixels;i++)
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	80 91 00 01 	lds	r24, 0x0100
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	82 17       	cp	r24, r18
    1052:	93 07       	cpc	r25, r19
    1054:	0c f4       	brge	.+2      	; 0x1058 <main+0x1e0>
    1056:	b5 cf       	rjmp	.-150    	; 0xfc2 <main+0x14a>
				else done = 1;
				break;
			}			
				
		}
		if(done){
    1058:	80 91 28 01 	lds	r24, 0x0128
    105c:	88 23       	and	r24, r24
    105e:	09 f4       	brne	.+2      	; 0x1062 <main+0x1ea>
    1060:	ac cf       	rjmp	.-168    	; 0xfba <main+0x142>
			SEND_TO_LCD(start_2nd_line,CMD);
    1062:	80 ec       	ldi	r24, 0xC0	; 192
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SEND_TO_LCD>
			itoa(res,str_res,10);
    106a:	80 91 29 01 	lds	r24, 0x0129
    106e:	90 91 2a 01 	lds	r25, 0x012A
    1072:	2c e2       	ldi	r18, 0x2C	; 44
    1074:	31 e0       	ldi	r19, 0x01	; 1
    1076:	b9 01       	movw	r22, r18
    1078:	4a e0       	ldi	r20, 0x0A	; 10
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <itoa>
			print_to_LCD(str_res);
    1080:	8c e2       	ldi	r24, 0x2C	; 44
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0e 94 43 02 	call	0x486	; 0x486 <print_to_LCD>
			done=0;
    1088:	10 92 28 01 	sts	0x0128, r1
		}	
	}			
    108c:	97 cf       	rjmp	.-210    	; 0xfbc <main+0x144>

0000108e <__fixunssfsi>:
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	7b 01       	movw	r14, r22
    1098:	8c 01       	movw	r16, r24
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	5f e4       	ldi	r21, 0x4F	; 79
    10a2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__gesf2>
    10a6:	87 fd       	sbrc	r24, 7
    10a8:	11 c0       	rjmp	.+34     	; 0x10cc <__fixunssfsi+0x3e>
    10aa:	c8 01       	movw	r24, r16
    10ac:	b7 01       	movw	r22, r14
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	5f e4       	ldi	r21, 0x4F	; 79
    10b6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__subsf3>
    10ba:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fixsfsi>
    10be:	9b 01       	movw	r18, r22
    10c0:	ac 01       	movw	r20, r24
    10c2:	20 50       	subi	r18, 0x00	; 0
    10c4:	30 40       	sbci	r19, 0x00	; 0
    10c6:	40 40       	sbci	r20, 0x00	; 0
    10c8:	50 48       	sbci	r21, 0x80	; 128
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <__fixunssfsi+0x4a>
    10cc:	c8 01       	movw	r24, r16
    10ce:	b7 01       	movw	r22, r14
    10d0:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fixsfsi>
    10d4:	9b 01       	movw	r18, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	b9 01       	movw	r22, r18
    10da:	ca 01       	movw	r24, r20
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	08 95       	ret

000010e6 <_fpadd_parts>:
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e9 e7       	ldi	r30, 0x79	; 121
    10ec:	f8 e0       	ldi	r31, 0x08	; 8
    10ee:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__prologue_saves__+0x8>
    10f2:	fc 01       	movw	r30, r24
    10f4:	ea 01       	movw	r28, r20
    10f6:	80 81       	ld	r24, Z
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	08 f4       	brcc	.+2      	; 0x10fe <_fpadd_parts+0x18>
    10fc:	38 c1       	rjmp	.+624    	; 0x136e <_fpadd_parts+0x288>
    10fe:	db 01       	movw	r26, r22
    1100:	9c 91       	ld	r25, X
    1102:	92 30       	cpi	r25, 0x02	; 2
    1104:	08 f4       	brcc	.+2      	; 0x1108 <_fpadd_parts+0x22>
    1106:	30 c1       	rjmp	.+608    	; 0x1368 <_fpadd_parts+0x282>
    1108:	84 30       	cpi	r24, 0x04	; 4
    110a:	59 f4       	brne	.+22     	; 0x1122 <_fpadd_parts+0x3c>
    110c:	94 30       	cpi	r25, 0x04	; 4
    110e:	09 f0       	breq	.+2      	; 0x1112 <_fpadd_parts+0x2c>
    1110:	2e c1       	rjmp	.+604    	; 0x136e <_fpadd_parts+0x288>
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	11 96       	adiw	r26, 0x01	; 1
    1116:	8c 91       	ld	r24, X
    1118:	11 97       	sbiw	r26, 0x01	; 1
    111a:	98 17       	cp	r25, r24
    111c:	09 f0       	breq	.+2      	; 0x1120 <_fpadd_parts+0x3a>
    111e:	21 c1       	rjmp	.+578    	; 0x1362 <_fpadd_parts+0x27c>
    1120:	26 c1       	rjmp	.+588    	; 0x136e <_fpadd_parts+0x288>
    1122:	94 30       	cpi	r25, 0x04	; 4
    1124:	09 f4       	brne	.+2      	; 0x1128 <_fpadd_parts+0x42>
    1126:	20 c1       	rjmp	.+576    	; 0x1368 <_fpadd_parts+0x282>
    1128:	92 30       	cpi	r25, 0x02	; 2
    112a:	b1 f4       	brne	.+44     	; 0x1158 <_fpadd_parts+0x72>
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	09 f0       	breq	.+2      	; 0x1132 <_fpadd_parts+0x4c>
    1130:	1e c1       	rjmp	.+572    	; 0x136e <_fpadd_parts+0x288>
    1132:	ca 01       	movw	r24, r20
    1134:	af 01       	movw	r20, r30
    1136:	28 e0       	ldi	r18, 0x08	; 8
    1138:	da 01       	movw	r26, r20
    113a:	0d 90       	ld	r0, X+
    113c:	ad 01       	movw	r20, r26
    113e:	dc 01       	movw	r26, r24
    1140:	0d 92       	st	X+, r0
    1142:	cd 01       	movw	r24, r26
    1144:	21 50       	subi	r18, 0x01	; 1
    1146:	c1 f7       	brne	.-16     	; 0x1138 <_fpadd_parts+0x52>
    1148:	db 01       	movw	r26, r22
    114a:	11 96       	adiw	r26, 0x01	; 1
    114c:	8c 91       	ld	r24, X
    114e:	11 97       	sbiw	r26, 0x01	; 1
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	89 23       	and	r24, r25
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	0a c1       	rjmp	.+532    	; 0x136c <_fpadd_parts+0x286>
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	09 f4       	brne	.+2      	; 0x115e <_fpadd_parts+0x78>
    115c:	05 c1       	rjmp	.+522    	; 0x1368 <_fpadd_parts+0x282>
    115e:	c2 80       	ldd	r12, Z+2	; 0x02
    1160:	d3 80       	ldd	r13, Z+3	; 0x03
    1162:	db 01       	movw	r26, r22
    1164:	12 96       	adiw	r26, 0x02	; 2
    1166:	6d 90       	ld	r6, X+
    1168:	7c 90       	ld	r7, X
    116a:	13 97       	sbiw	r26, 0x03	; 3
    116c:	24 81       	ldd	r18, Z+4	; 0x04
    116e:	35 81       	ldd	r19, Z+5	; 0x05
    1170:	46 81       	ldd	r20, Z+6	; 0x06
    1172:	57 81       	ldd	r21, Z+7	; 0x07
    1174:	14 96       	adiw	r26, 0x04	; 4
    1176:	ed 90       	ld	r14, X+
    1178:	fd 90       	ld	r15, X+
    117a:	0d 91       	ld	r16, X+
    117c:	1c 91       	ld	r17, X
    117e:	17 97       	sbiw	r26, 0x07	; 7
    1180:	c6 01       	movw	r24, r12
    1182:	86 19       	sub	r24, r6
    1184:	97 09       	sbc	r25, r7
    1186:	5c 01       	movw	r10, r24
    1188:	97 ff       	sbrs	r25, 7
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <_fpadd_parts+0xae>
    118c:	aa 24       	eor	r10, r10
    118e:	bb 24       	eor	r11, r11
    1190:	a8 1a       	sub	r10, r24
    1192:	b9 0a       	sbc	r11, r25
    1194:	b0 e2       	ldi	r27, 0x20	; 32
    1196:	ab 16       	cp	r10, r27
    1198:	b1 04       	cpc	r11, r1
    119a:	0c f0       	brlt	.+2      	; 0x119e <_fpadd_parts+0xb8>
    119c:	61 c0       	rjmp	.+194    	; 0x1260 <_fpadd_parts+0x17a>
    119e:	18 16       	cp	r1, r24
    11a0:	19 06       	cpc	r1, r25
    11a2:	6c f5       	brge	.+90     	; 0x11fe <_fpadd_parts+0x118>
    11a4:	37 01       	movw	r6, r14
    11a6:	48 01       	movw	r8, r16
    11a8:	0a 2c       	mov	r0, r10
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <_fpadd_parts+0xce>
    11ac:	96 94       	lsr	r9
    11ae:	87 94       	ror	r8
    11b0:	77 94       	ror	r7
    11b2:	67 94       	ror	r6
    11b4:	0a 94       	dec	r0
    11b6:	d2 f7       	brpl	.-12     	; 0x11ac <_fpadd_parts+0xc6>
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a0 e0       	ldi	r26, 0x00	; 0
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	0a 2c       	mov	r0, r10
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <_fpadd_parts+0xe6>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	aa 1f       	adc	r26, r26
    11ca:	bb 1f       	adc	r27, r27
    11cc:	0a 94       	dec	r0
    11ce:	d2 f7       	brpl	.-12     	; 0x11c4 <_fpadd_parts+0xde>
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	a1 09       	sbc	r26, r1
    11d4:	b1 09       	sbc	r27, r1
    11d6:	8e 21       	and	r24, r14
    11d8:	9f 21       	and	r25, r15
    11da:	a0 23       	and	r26, r16
    11dc:	b1 23       	and	r27, r17
    11de:	ee 24       	eor	r14, r14
    11e0:	ff 24       	eor	r15, r15
    11e2:	87 01       	movw	r16, r14
    11e4:	e3 94       	inc	r14
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	a1 05       	cpc	r26, r1
    11ea:	b1 05       	cpc	r27, r1
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <_fpadd_parts+0x10e>
    11ee:	ee 24       	eor	r14, r14
    11f0:	ff 24       	eor	r15, r15
    11f2:	87 01       	movw	r16, r14
    11f4:	e6 28       	or	r14, r6
    11f6:	f7 28       	or	r15, r7
    11f8:	08 29       	or	r16, r8
    11fa:	19 29       	or	r17, r9
    11fc:	3c c0       	rjmp	.+120    	; 0x1276 <_fpadd_parts+0x190>
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	d1 f1       	breq	.+116    	; 0x1276 <_fpadd_parts+0x190>
    1202:	ca 0c       	add	r12, r10
    1204:	db 1c       	adc	r13, r11
    1206:	39 01       	movw	r6, r18
    1208:	4a 01       	movw	r8, r20
    120a:	0a 2c       	mov	r0, r10
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <_fpadd_parts+0x130>
    120e:	96 94       	lsr	r9
    1210:	87 94       	ror	r8
    1212:	77 94       	ror	r7
    1214:	67 94       	ror	r6
    1216:	0a 94       	dec	r0
    1218:	d2 f7       	brpl	.-12     	; 0x120e <_fpadd_parts+0x128>
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 e0       	ldi	r26, 0x00	; 0
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	0a 2c       	mov	r0, r10
    1224:	04 c0       	rjmp	.+8      	; 0x122e <_fpadd_parts+0x148>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	aa 1f       	adc	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	0a 94       	dec	r0
    1230:	d2 f7       	brpl	.-12     	; 0x1226 <_fpadd_parts+0x140>
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	a1 09       	sbc	r26, r1
    1236:	b1 09       	sbc	r27, r1
    1238:	82 23       	and	r24, r18
    123a:	93 23       	and	r25, r19
    123c:	a4 23       	and	r26, r20
    123e:	b5 23       	and	r27, r21
    1240:	21 e0       	ldi	r18, 0x01	; 1
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	a1 05       	cpc	r26, r1
    124c:	b1 05       	cpc	r27, r1
    124e:	19 f4       	brne	.+6      	; 0x1256 <_fpadd_parts+0x170>
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	a9 01       	movw	r20, r18
    1256:	26 29       	or	r18, r6
    1258:	37 29       	or	r19, r7
    125a:	48 29       	or	r20, r8
    125c:	59 29       	or	r21, r9
    125e:	0b c0       	rjmp	.+22     	; 0x1276 <_fpadd_parts+0x190>
    1260:	6c 14       	cp	r6, r12
    1262:	7d 04       	cpc	r7, r13
    1264:	24 f4       	brge	.+8      	; 0x126e <_fpadd_parts+0x188>
    1266:	ee 24       	eor	r14, r14
    1268:	ff 24       	eor	r15, r15
    126a:	87 01       	movw	r16, r14
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <_fpadd_parts+0x190>
    126e:	63 01       	movw	r12, r6
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	81 81       	ldd	r24, Z+1	; 0x01
    1278:	fb 01       	movw	r30, r22
    127a:	91 81       	ldd	r25, Z+1	; 0x01
    127c:	89 17       	cp	r24, r25
    127e:	09 f4       	brne	.+2      	; 0x1282 <_fpadd_parts+0x19c>
    1280:	45 c0       	rjmp	.+138    	; 0x130c <_fpadd_parts+0x226>
    1282:	88 23       	and	r24, r24
    1284:	49 f0       	breq	.+18     	; 0x1298 <_fpadd_parts+0x1b2>
    1286:	d8 01       	movw	r26, r16
    1288:	c7 01       	movw	r24, r14
    128a:	82 1b       	sub	r24, r18
    128c:	93 0b       	sbc	r25, r19
    128e:	a4 0b       	sbc	r26, r20
    1290:	b5 0b       	sbc	r27, r21
    1292:	9c 01       	movw	r18, r24
    1294:	ad 01       	movw	r20, r26
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <_fpadd_parts+0x1ba>
    1298:	2e 19       	sub	r18, r14
    129a:	3f 09       	sbc	r19, r15
    129c:	40 0b       	sbc	r20, r16
    129e:	51 0b       	sbc	r21, r17
    12a0:	57 fd       	sbrc	r21, 7
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <_fpadd_parts+0x1c6>
    12a4:	19 82       	std	Y+1, r1	; 0x01
    12a6:	db 82       	std	Y+3, r13	; 0x03
    12a8:	ca 82       	std	Y+2, r12	; 0x02
    12aa:	0b c0       	rjmp	.+22     	; 0x12c2 <_fpadd_parts+0x1dc>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	db 82       	std	Y+3, r13	; 0x03
    12b2:	ca 82       	std	Y+2, r12	; 0x02
    12b4:	50 95       	com	r21
    12b6:	40 95       	com	r20
    12b8:	30 95       	com	r19
    12ba:	21 95       	neg	r18
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
    12be:	4f 4f       	sbci	r20, 0xFF	; 255
    12c0:	5f 4f       	sbci	r21, 0xFF	; 255
    12c2:	2c 83       	std	Y+4, r18	; 0x04
    12c4:	3d 83       	std	Y+5, r19	; 0x05
    12c6:	4e 83       	std	Y+6, r20	; 0x06
    12c8:	5f 83       	std	Y+7, r21	; 0x07
    12ca:	0d c0       	rjmp	.+26     	; 0x12e6 <_fpadd_parts+0x200>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	aa 1f       	adc	r26, r26
    12d2:	bb 1f       	adc	r27, r27
    12d4:	8c 83       	std	Y+4, r24	; 0x04
    12d6:	9d 83       	std	Y+5, r25	; 0x05
    12d8:	ae 83       	std	Y+6, r26	; 0x06
    12da:	bf 83       	std	Y+7, r27	; 0x07
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	9b 81       	ldd	r25, Y+3	; 0x03
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9b 83       	std	Y+3, r25	; 0x03
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	ae 81       	ldd	r26, Y+6	; 0x06
    12ec:	bf 81       	ldd	r27, Y+7	; 0x07
    12ee:	9c 01       	movw	r18, r24
    12f0:	ad 01       	movw	r20, r26
    12f2:	21 50       	subi	r18, 0x01	; 1
    12f4:	30 40       	sbci	r19, 0x00	; 0
    12f6:	40 40       	sbci	r20, 0x00	; 0
    12f8:	50 40       	sbci	r21, 0x00	; 0
    12fa:	2f 3f       	cpi	r18, 0xFF	; 255
    12fc:	ef ef       	ldi	r30, 0xFF	; 255
    12fe:	3e 07       	cpc	r19, r30
    1300:	ef ef       	ldi	r30, 0xFF	; 255
    1302:	4e 07       	cpc	r20, r30
    1304:	ef e3       	ldi	r30, 0x3F	; 63
    1306:	5e 07       	cpc	r21, r30
    1308:	08 f3       	brcs	.-62     	; 0x12cc <_fpadd_parts+0x1e6>
    130a:	0b c0       	rjmp	.+22     	; 0x1322 <_fpadd_parts+0x23c>
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	db 82       	std	Y+3, r13	; 0x03
    1310:	ca 82       	std	Y+2, r12	; 0x02
    1312:	2e 0d       	add	r18, r14
    1314:	3f 1d       	adc	r19, r15
    1316:	40 1f       	adc	r20, r16
    1318:	51 1f       	adc	r21, r17
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	3d 83       	std	Y+5, r19	; 0x05
    131e:	4e 83       	std	Y+6, r20	; 0x06
    1320:	5f 83       	std	Y+7, r21	; 0x07
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	88 83       	st	Y, r24
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	3d 81       	ldd	r19, Y+5	; 0x05
    132a:	4e 81       	ldd	r20, Y+6	; 0x06
    132c:	5f 81       	ldd	r21, Y+7	; 0x07
    132e:	57 ff       	sbrs	r21, 7
    1330:	1d c0       	rjmp	.+58     	; 0x136c <_fpadd_parts+0x286>
    1332:	da 01       	movw	r26, r20
    1334:	c9 01       	movw	r24, r18
    1336:	81 70       	andi	r24, 0x01	; 1
    1338:	90 70       	andi	r25, 0x00	; 0
    133a:	a0 70       	andi	r26, 0x00	; 0
    133c:	b0 70       	andi	r27, 0x00	; 0
    133e:	56 95       	lsr	r21
    1340:	47 95       	ror	r20
    1342:	37 95       	ror	r19
    1344:	27 95       	ror	r18
    1346:	82 2b       	or	r24, r18
    1348:	93 2b       	or	r25, r19
    134a:	a4 2b       	or	r26, r20
    134c:	b5 2b       	or	r27, r21
    134e:	8c 83       	std	Y+4, r24	; 0x04
    1350:	9d 83       	std	Y+5, r25	; 0x05
    1352:	ae 83       	std	Y+6, r26	; 0x06
    1354:	bf 83       	std	Y+7, r27	; 0x07
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	9b 81       	ldd	r25, Y+3	; 0x03
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	9b 83       	std	Y+3, r25	; 0x03
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	05 c0       	rjmp	.+10     	; 0x136c <_fpadd_parts+0x286>
    1362:	ef e1       	ldi	r30, 0x1F	; 31
    1364:	f1 e0       	ldi	r31, 0x01	; 1
    1366:	03 c0       	rjmp	.+6      	; 0x136e <_fpadd_parts+0x288>
    1368:	fb 01       	movw	r30, r22
    136a:	01 c0       	rjmp	.+2      	; 0x136e <_fpadd_parts+0x288>
    136c:	fe 01       	movw	r30, r28
    136e:	cf 01       	movw	r24, r30
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	ee e0       	ldi	r30, 0x0E	; 14
    1376:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__epilogue_restores__+0x8>

0000137a <__addsf3>:
    137a:	a0 e2       	ldi	r26, 0x20	; 32
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e3 ec       	ldi	r30, 0xC3	; 195
    1380:	f9 e0       	ldi	r31, 0x09	; 9
    1382:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
    1386:	69 83       	std	Y+1, r22	; 0x01
    1388:	7a 83       	std	Y+2, r23	; 0x02
    138a:	8b 83       	std	Y+3, r24	; 0x03
    138c:	9c 83       	std	Y+4, r25	; 0x04
    138e:	2d 83       	std	Y+5, r18	; 0x05
    1390:	3e 83       	std	Y+6, r19	; 0x06
    1392:	4f 83       	std	Y+7, r20	; 0x07
    1394:	58 87       	std	Y+8, r21	; 0x08
    1396:	89 e0       	ldi	r24, 0x09	; 9
    1398:	e8 2e       	mov	r14, r24
    139a:	f1 2c       	mov	r15, r1
    139c:	ec 0e       	add	r14, r28
    139e:	fd 1e       	adc	r15, r29
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	b7 01       	movw	r22, r14
    13a6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    13aa:	8e 01       	movw	r16, r28
    13ac:	0f 5e       	subi	r16, 0xEF	; 239
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	ce 01       	movw	r24, r28
    13b2:	05 96       	adiw	r24, 0x05	; 5
    13b4:	b8 01       	movw	r22, r16
    13b6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    13ba:	c7 01       	movw	r24, r14
    13bc:	b8 01       	movw	r22, r16
    13be:	ae 01       	movw	r20, r28
    13c0:	47 5e       	subi	r20, 0xE7	; 231
    13c2:	5f 4f       	sbci	r21, 0xFF	; 255
    13c4:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_fpadd_parts>
    13c8:	0e 94 a5 0c 	call	0x194a	; 0x194a <__pack_f>
    13cc:	a0 96       	adiw	r28, 0x20	; 32
    13ce:	e6 e0       	ldi	r30, 0x06	; 6
    13d0:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

000013d4 <__subsf3>:
    13d4:	a0 e2       	ldi	r26, 0x20	; 32
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e0 ef       	ldi	r30, 0xF0	; 240
    13da:	f9 e0       	ldi	r31, 0x09	; 9
    13dc:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
    13e0:	69 83       	std	Y+1, r22	; 0x01
    13e2:	7a 83       	std	Y+2, r23	; 0x02
    13e4:	8b 83       	std	Y+3, r24	; 0x03
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	2d 83       	std	Y+5, r18	; 0x05
    13ea:	3e 83       	std	Y+6, r19	; 0x06
    13ec:	4f 83       	std	Y+7, r20	; 0x07
    13ee:	58 87       	std	Y+8, r21	; 0x08
    13f0:	8e 01       	movw	r16, r28
    13f2:	07 5f       	subi	r16, 0xF7	; 247
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	ce 01       	movw	r24, r28
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	b8 01       	movw	r22, r16
    13fc:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1400:	91 e1       	ldi	r25, 0x11	; 17
    1402:	e9 2e       	mov	r14, r25
    1404:	f1 2c       	mov	r15, r1
    1406:	ec 0e       	add	r14, r28
    1408:	fd 1e       	adc	r15, r29
    140a:	ce 01       	movw	r24, r28
    140c:	05 96       	adiw	r24, 0x05	; 5
    140e:	b7 01       	movw	r22, r14
    1410:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1414:	8a 89       	ldd	r24, Y+18	; 0x12
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	89 27       	eor	r24, r25
    141a:	8a 8b       	std	Y+18, r24	; 0x12
    141c:	c8 01       	movw	r24, r16
    141e:	b7 01       	movw	r22, r14
    1420:	ae 01       	movw	r20, r28
    1422:	47 5e       	subi	r20, 0xE7	; 231
    1424:	5f 4f       	sbci	r21, 0xFF	; 255
    1426:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_fpadd_parts>
    142a:	0e 94 a5 0c 	call	0x194a	; 0x194a <__pack_f>
    142e:	a0 96       	adiw	r28, 0x20	; 32
    1430:	e6 e0       	ldi	r30, 0x06	; 6
    1432:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

00001436 <__mulsf3>:
    1436:	a0 e2       	ldi	r26, 0x20	; 32
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e1 e2       	ldi	r30, 0x21	; 33
    143c:	fa e0       	ldi	r31, 0x0A	; 10
    143e:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__prologue_saves__>
    1442:	69 83       	std	Y+1, r22	; 0x01
    1444:	7a 83       	std	Y+2, r23	; 0x02
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	2d 83       	std	Y+5, r18	; 0x05
    144c:	3e 83       	std	Y+6, r19	; 0x06
    144e:	4f 83       	std	Y+7, r20	; 0x07
    1450:	58 87       	std	Y+8, r21	; 0x08
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	be 01       	movw	r22, r28
    1458:	67 5f       	subi	r22, 0xF7	; 247
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1460:	ce 01       	movw	r24, r28
    1462:	05 96       	adiw	r24, 0x05	; 5
    1464:	be 01       	movw	r22, r28
    1466:	6f 5e       	subi	r22, 0xEF	; 239
    1468:	7f 4f       	sbci	r23, 0xFF	; 255
    146a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    146e:	99 85       	ldd	r25, Y+9	; 0x09
    1470:	92 30       	cpi	r25, 0x02	; 2
    1472:	78 f0       	brcs	.+30     	; 0x1492 <__mulsf3+0x5c>
    1474:	89 89       	ldd	r24, Y+17	; 0x11
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	c0 f0       	brcs	.+48     	; 0x14aa <__mulsf3+0x74>
    147a:	94 30       	cpi	r25, 0x04	; 4
    147c:	19 f4       	brne	.+6      	; 0x1484 <__mulsf3+0x4e>
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	41 f4       	brne	.+16     	; 0x1492 <__mulsf3+0x5c>
    1482:	cb c0       	rjmp	.+406    	; 0x161a <__mulsf3+0x1e4>
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	19 f4       	brne	.+6      	; 0x148e <__mulsf3+0x58>
    1488:	92 30       	cpi	r25, 0x02	; 2
    148a:	79 f4       	brne	.+30     	; 0x14aa <__mulsf3+0x74>
    148c:	c6 c0       	rjmp	.+396    	; 0x161a <__mulsf3+0x1e4>
    148e:	92 30       	cpi	r25, 0x02	; 2
    1490:	51 f4       	brne	.+20     	; 0x14a6 <__mulsf3+0x70>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	2a 85       	ldd	r18, Y+10	; 0x0a
    1496:	9a 89       	ldd	r25, Y+18	; 0x12
    1498:	29 17       	cp	r18, r25
    149a:	09 f4       	brne	.+2      	; 0x149e <__mulsf3+0x68>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	8a 87       	std	Y+10, r24	; 0x0a
    14a0:	ce 01       	movw	r24, r28
    14a2:	09 96       	adiw	r24, 0x09	; 9
    14a4:	bc c0       	rjmp	.+376    	; 0x161e <__mulsf3+0x1e8>
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	51 f4       	brne	.+20     	; 0x14be <__mulsf3+0x88>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    14ae:	9a 89       	ldd	r25, Y+18	; 0x12
    14b0:	29 17       	cp	r18, r25
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <__mulsf3+0x80>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	8a 8b       	std	Y+18, r24	; 0x12
    14b8:	ce 01       	movw	r24, r28
    14ba:	41 96       	adiw	r24, 0x11	; 17
    14bc:	b0 c0       	rjmp	.+352    	; 0x161e <__mulsf3+0x1e8>
    14be:	6d 84       	ldd	r6, Y+13	; 0x0d
    14c0:	7e 84       	ldd	r7, Y+14	; 0x0e
    14c2:	8f 84       	ldd	r8, Y+15	; 0x0f
    14c4:	98 88       	ldd	r9, Y+16	; 0x10
    14c6:	ed 88       	ldd	r14, Y+21	; 0x15
    14c8:	fe 88       	ldd	r15, Y+22	; 0x16
    14ca:	0f 89       	ldd	r16, Y+23	; 0x17
    14cc:	18 8d       	ldd	r17, Y+24	; 0x18
    14ce:	e0 e2       	ldi	r30, 0x20	; 32
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	dc 01       	movw	r26, r24
    14d8:	aa 24       	eor	r10, r10
    14da:	bb 24       	eor	r11, r11
    14dc:	65 01       	movw	r12, r10
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	a9 01       	movw	r20, r18
    14e4:	b3 01       	movw	r22, r6
    14e6:	61 70       	andi	r22, 0x01	; 1
    14e8:	70 70       	andi	r23, 0x00	; 0
    14ea:	61 15       	cp	r22, r1
    14ec:	71 05       	cpc	r23, r1
    14ee:	d1 f0       	breq	.+52     	; 0x1524 <__mulsf3+0xee>
    14f0:	2e 0d       	add	r18, r14
    14f2:	3f 1d       	adc	r19, r15
    14f4:	40 1f       	adc	r20, r16
    14f6:	51 1f       	adc	r21, r17
    14f8:	15 01       	movw	r2, r10
    14fa:	26 01       	movw	r4, r12
    14fc:	28 0e       	add	r2, r24
    14fe:	39 1e       	adc	r3, r25
    1500:	4a 1e       	adc	r4, r26
    1502:	5b 1e       	adc	r5, r27
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a0 e0       	ldi	r26, 0x00	; 0
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	2e 15       	cp	r18, r14
    150e:	3f 05       	cpc	r19, r15
    1510:	40 07       	cpc	r20, r16
    1512:	51 07       	cpc	r21, r17
    1514:	18 f0       	brcs	.+6      	; 0x151c <__mulsf3+0xe6>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	dc 01       	movw	r26, r24
    151c:	82 0d       	add	r24, r2
    151e:	93 1d       	adc	r25, r3
    1520:	a4 1d       	adc	r26, r4
    1522:	b5 1d       	adc	r27, r5
    1524:	aa 0c       	add	r10, r10
    1526:	bb 1c       	adc	r11, r11
    1528:	cc 1c       	adc	r12, r12
    152a:	dd 1c       	adc	r13, r13
    152c:	17 ff       	sbrs	r17, 7
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <__mulsf3+0x10c>
    1530:	61 e0       	ldi	r22, 0x01	; 1
    1532:	26 2e       	mov	r2, r22
    1534:	31 2c       	mov	r3, r1
    1536:	41 2c       	mov	r4, r1
    1538:	51 2c       	mov	r5, r1
    153a:	a2 28       	or	r10, r2
    153c:	b3 28       	or	r11, r3
    153e:	c4 28       	or	r12, r4
    1540:	d5 28       	or	r13, r5
    1542:	31 97       	sbiw	r30, 0x01	; 1
    1544:	49 f0       	breq	.+18     	; 0x1558 <__mulsf3+0x122>
    1546:	ee 0c       	add	r14, r14
    1548:	ff 1c       	adc	r15, r15
    154a:	00 1f       	adc	r16, r16
    154c:	11 1f       	adc	r17, r17
    154e:	96 94       	lsr	r9
    1550:	87 94       	ror	r8
    1552:	77 94       	ror	r7
    1554:	67 94       	ror	r6
    1556:	c6 cf       	rjmp	.-116    	; 0x14e4 <__mulsf3+0xae>
    1558:	6b 89       	ldd	r22, Y+19	; 0x13
    155a:	7c 89       	ldd	r23, Y+20	; 0x14
    155c:	eb 85       	ldd	r30, Y+11	; 0x0b
    155e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1560:	6e 0f       	add	r22, r30
    1562:	7f 1f       	adc	r23, r31
    1564:	6e 5f       	subi	r22, 0xFE	; 254
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	7c 8f       	std	Y+28, r23	; 0x1c
    156a:	6b 8f       	std	Y+27, r22	; 0x1b
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1570:	7a 89       	ldd	r23, Y+18	; 0x12
    1572:	e7 17       	cp	r30, r23
    1574:	09 f4       	brne	.+2      	; 0x1578 <__mulsf3+0x142>
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	6a 8f       	std	Y+26, r22	; 0x1a
    157a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    157c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    157e:	10 c0       	rjmp	.+32     	; 0x15a0 <__mulsf3+0x16a>
    1580:	fc 01       	movw	r30, r24
    1582:	e1 70       	andi	r30, 0x01	; 1
    1584:	f0 70       	andi	r31, 0x00	; 0
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	29 f0       	breq	.+10     	; 0x1594 <__mulsf3+0x15e>
    158a:	56 95       	lsr	r21
    158c:	47 95       	ror	r20
    158e:	37 95       	ror	r19
    1590:	27 95       	ror	r18
    1592:	50 68       	ori	r21, 0x80	; 128
    1594:	b6 95       	lsr	r27
    1596:	a7 95       	ror	r26
    1598:	97 95       	ror	r25
    159a:	87 95       	ror	r24
    159c:	6f 5f       	subi	r22, 0xFF	; 255
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	b7 fd       	sbrc	r27, 7
    15a2:	ee cf       	rjmp	.-36     	; 0x1580 <__mulsf3+0x14a>
    15a4:	0c c0       	rjmp	.+24     	; 0x15be <__mulsf3+0x188>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	aa 1f       	adc	r26, r26
    15ac:	bb 1f       	adc	r27, r27
    15ae:	57 fd       	sbrc	r21, 7
    15b0:	81 60       	ori	r24, 0x01	; 1
    15b2:	22 0f       	add	r18, r18
    15b4:	33 1f       	adc	r19, r19
    15b6:	44 1f       	adc	r20, r20
    15b8:	55 1f       	adc	r21, r21
    15ba:	61 50       	subi	r22, 0x01	; 1
    15bc:	70 40       	sbci	r23, 0x00	; 0
    15be:	80 30       	cpi	r24, 0x00	; 0
    15c0:	e0 e0       	ldi	r30, 0x00	; 0
    15c2:	9e 07       	cpc	r25, r30
    15c4:	e0 e0       	ldi	r30, 0x00	; 0
    15c6:	ae 07       	cpc	r26, r30
    15c8:	e0 e4       	ldi	r30, 0x40	; 64
    15ca:	be 07       	cpc	r27, r30
    15cc:	60 f3       	brcs	.-40     	; 0x15a6 <__mulsf3+0x170>
    15ce:	6b 8f       	std	Y+27, r22	; 0x1b
    15d0:	7c 8f       	std	Y+28, r23	; 0x1c
    15d2:	6f e7       	ldi	r22, 0x7F	; 127
    15d4:	e6 2e       	mov	r14, r22
    15d6:	f1 2c       	mov	r15, r1
    15d8:	01 2d       	mov	r16, r1
    15da:	11 2d       	mov	r17, r1
    15dc:	e8 22       	and	r14, r24
    15de:	f9 22       	and	r15, r25
    15e0:	0a 23       	and	r16, r26
    15e2:	1b 23       	and	r17, r27
    15e4:	60 e4       	ldi	r22, 0x40	; 64
    15e6:	e6 16       	cp	r14, r22
    15e8:	f1 04       	cpc	r15, r1
    15ea:	01 05       	cpc	r16, r1
    15ec:	11 05       	cpc	r17, r1
    15ee:	61 f4       	brne	.+24     	; 0x1608 <__mulsf3+0x1d2>
    15f0:	87 fd       	sbrc	r24, 7
    15f2:	0a c0       	rjmp	.+20     	; 0x1608 <__mulsf3+0x1d2>
    15f4:	21 15       	cp	r18, r1
    15f6:	31 05       	cpc	r19, r1
    15f8:	41 05       	cpc	r20, r1
    15fa:	51 05       	cpc	r21, r1
    15fc:	29 f0       	breq	.+10     	; 0x1608 <__mulsf3+0x1d2>
    15fe:	80 5c       	subi	r24, 0xC0	; 192
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	af 4f       	sbci	r26, 0xFF	; 255
    1604:	bf 4f       	sbci	r27, 0xFF	; 255
    1606:	80 78       	andi	r24, 0x80	; 128
    1608:	8d 8f       	std	Y+29, r24	; 0x1d
    160a:	9e 8f       	std	Y+30, r25	; 0x1e
    160c:	af 8f       	std	Y+31, r26	; 0x1f
    160e:	b8 a3       	std	Y+32, r27	; 0x20
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	89 8f       	std	Y+25, r24	; 0x19
    1614:	ce 01       	movw	r24, r28
    1616:	49 96       	adiw	r24, 0x19	; 25
    1618:	02 c0       	rjmp	.+4      	; 0x161e <__mulsf3+0x1e8>
    161a:	8f e1       	ldi	r24, 0x1F	; 31
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	0e 94 a5 0c 	call	0x194a	; 0x194a <__pack_f>
    1622:	a0 96       	adiw	r28, 0x20	; 32
    1624:	e2 e1       	ldi	r30, 0x12	; 18
    1626:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__epilogue_restores__>

0000162a <__divsf3>:
    162a:	a8 e1       	ldi	r26, 0x18	; 24
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e1       	ldi	r30, 0x1B	; 27
    1630:	fb e0       	ldi	r31, 0x0B	; 11
    1632:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__prologue_saves__+0x10>
    1636:	69 83       	std	Y+1, r22	; 0x01
    1638:	7a 83       	std	Y+2, r23	; 0x02
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	2d 83       	std	Y+5, r18	; 0x05
    1640:	3e 83       	std	Y+6, r19	; 0x06
    1642:	4f 83       	std	Y+7, r20	; 0x07
    1644:	58 87       	std	Y+8, r21	; 0x08
    1646:	8e 01       	movw	r16, r28
    1648:	07 5f       	subi	r16, 0xF7	; 247
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	ce 01       	movw	r24, r28
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	b8 01       	movw	r22, r16
    1652:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1656:	81 e1       	ldi	r24, 0x11	; 17
    1658:	e8 2e       	mov	r14, r24
    165a:	f1 2c       	mov	r15, r1
    165c:	ec 0e       	add	r14, r28
    165e:	fd 1e       	adc	r15, r29
    1660:	ce 01       	movw	r24, r28
    1662:	05 96       	adiw	r24, 0x05	; 5
    1664:	b7 01       	movw	r22, r14
    1666:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    166a:	99 85       	ldd	r25, Y+9	; 0x09
    166c:	92 30       	cpi	r25, 0x02	; 2
    166e:	08 f4       	brcc	.+2      	; 0x1672 <__divsf3+0x48>
    1670:	83 c0       	rjmp	.+262    	; 0x1778 <__divsf3+0x14e>
    1672:	89 89       	ldd	r24, Y+17	; 0x11
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	08 f4       	brcc	.+2      	; 0x167a <__divsf3+0x50>
    1678:	7b c0       	rjmp	.+246    	; 0x1770 <__divsf3+0x146>
    167a:	2a 85       	ldd	r18, Y+10	; 0x0a
    167c:	3a 89       	ldd	r19, Y+18	; 0x12
    167e:	23 27       	eor	r18, r19
    1680:	2a 87       	std	Y+10, r18	; 0x0a
    1682:	94 30       	cpi	r25, 0x04	; 4
    1684:	11 f0       	breq	.+4      	; 0x168a <__divsf3+0x60>
    1686:	92 30       	cpi	r25, 0x02	; 2
    1688:	21 f4       	brne	.+8      	; 0x1692 <__divsf3+0x68>
    168a:	98 17       	cp	r25, r24
    168c:	09 f0       	breq	.+2      	; 0x1690 <__divsf3+0x66>
    168e:	6c c0       	rjmp	.+216    	; 0x1768 <__divsf3+0x13e>
    1690:	71 c0       	rjmp	.+226    	; 0x1774 <__divsf3+0x14a>
    1692:	84 30       	cpi	r24, 0x04	; 4
    1694:	39 f4       	brne	.+14     	; 0x16a4 <__divsf3+0x7a>
    1696:	1d 86       	std	Y+13, r1	; 0x0d
    1698:	1e 86       	std	Y+14, r1	; 0x0e
    169a:	1f 86       	std	Y+15, r1	; 0x0f
    169c:	18 8a       	std	Y+16, r1	; 0x10
    169e:	1c 86       	std	Y+12, r1	; 0x0c
    16a0:	1b 86       	std	Y+11, r1	; 0x0b
    16a2:	6a c0       	rjmp	.+212    	; 0x1778 <__divsf3+0x14e>
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	19 f4       	brne	.+6      	; 0x16ae <__divsf3+0x84>
    16a8:	84 e0       	ldi	r24, 0x04	; 4
    16aa:	89 87       	std	Y+9, r24	; 0x09
    16ac:	65 c0       	rjmp	.+202    	; 0x1778 <__divsf3+0x14e>
    16ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    16b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    16b2:	2b 89       	ldd	r18, Y+19	; 0x13
    16b4:	3c 89       	ldd	r19, Y+20	; 0x14
    16b6:	82 1b       	sub	r24, r18
    16b8:	93 0b       	sbc	r25, r19
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
    16bc:	8b 87       	std	Y+11, r24	; 0x0b
    16be:	2d 85       	ldd	r18, Y+13	; 0x0d
    16c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    16c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    16c4:	58 89       	ldd	r21, Y+16	; 0x10
    16c6:	ed 88       	ldd	r14, Y+21	; 0x15
    16c8:	fe 88       	ldd	r15, Y+22	; 0x16
    16ca:	0f 89       	ldd	r16, Y+23	; 0x17
    16cc:	18 8d       	ldd	r17, Y+24	; 0x18
    16ce:	2e 15       	cp	r18, r14
    16d0:	3f 05       	cpc	r19, r15
    16d2:	40 07       	cpc	r20, r16
    16d4:	51 07       	cpc	r21, r17
    16d6:	38 f4       	brcc	.+14     	; 0x16e6 <__divsf3+0xbc>
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	44 1f       	adc	r20, r20
    16de:	55 1f       	adc	r21, r21
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	9c 87       	std	Y+12, r25	; 0x0c
    16e4:	8b 87       	std	Y+11, r24	; 0x0b
    16e6:	6f e1       	ldi	r22, 0x1F	; 31
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	a1 2c       	mov	r10, r1
    16ec:	b1 2c       	mov	r11, r1
    16ee:	c1 2c       	mov	r12, r1
    16f0:	a0 e4       	ldi	r26, 0x40	; 64
    16f2:	da 2e       	mov	r13, r26
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	dc 01       	movw	r26, r24
    16fa:	2e 15       	cp	r18, r14
    16fc:	3f 05       	cpc	r19, r15
    16fe:	40 07       	cpc	r20, r16
    1700:	51 07       	cpc	r21, r17
    1702:	40 f0       	brcs	.+16     	; 0x1714 <__divsf3+0xea>
    1704:	8a 29       	or	r24, r10
    1706:	9b 29       	or	r25, r11
    1708:	ac 29       	or	r26, r12
    170a:	bd 29       	or	r27, r13
    170c:	2e 19       	sub	r18, r14
    170e:	3f 09       	sbc	r19, r15
    1710:	40 0b       	sbc	r20, r16
    1712:	51 0b       	sbc	r21, r17
    1714:	d6 94       	lsr	r13
    1716:	c7 94       	ror	r12
    1718:	b7 94       	ror	r11
    171a:	a7 94       	ror	r10
    171c:	22 0f       	add	r18, r18
    171e:	33 1f       	adc	r19, r19
    1720:	44 1f       	adc	r20, r20
    1722:	55 1f       	adc	r21, r21
    1724:	61 50       	subi	r22, 0x01	; 1
    1726:	70 40       	sbci	r23, 0x00	; 0
    1728:	41 f7       	brne	.-48     	; 0x16fa <__divsf3+0xd0>
    172a:	6f e7       	ldi	r22, 0x7F	; 127
    172c:	e6 2e       	mov	r14, r22
    172e:	f1 2c       	mov	r15, r1
    1730:	01 2d       	mov	r16, r1
    1732:	11 2d       	mov	r17, r1
    1734:	e8 22       	and	r14, r24
    1736:	f9 22       	and	r15, r25
    1738:	0a 23       	and	r16, r26
    173a:	1b 23       	and	r17, r27
    173c:	60 e4       	ldi	r22, 0x40	; 64
    173e:	e6 16       	cp	r14, r22
    1740:	f1 04       	cpc	r15, r1
    1742:	01 05       	cpc	r16, r1
    1744:	11 05       	cpc	r17, r1
    1746:	61 f4       	brne	.+24     	; 0x1760 <__divsf3+0x136>
    1748:	87 fd       	sbrc	r24, 7
    174a:	0a c0       	rjmp	.+20     	; 0x1760 <__divsf3+0x136>
    174c:	21 15       	cp	r18, r1
    174e:	31 05       	cpc	r19, r1
    1750:	41 05       	cpc	r20, r1
    1752:	51 05       	cpc	r21, r1
    1754:	29 f0       	breq	.+10     	; 0x1760 <__divsf3+0x136>
    1756:	80 5c       	subi	r24, 0xC0	; 192
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	af 4f       	sbci	r26, 0xFF	; 255
    175c:	bf 4f       	sbci	r27, 0xFF	; 255
    175e:	80 78       	andi	r24, 0x80	; 128
    1760:	8d 87       	std	Y+13, r24	; 0x0d
    1762:	9e 87       	std	Y+14, r25	; 0x0e
    1764:	af 87       	std	Y+15, r26	; 0x0f
    1766:	b8 8b       	std	Y+16, r27	; 0x10
    1768:	8e 01       	movw	r16, r28
    176a:	07 5f       	subi	r16, 0xF7	; 247
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <__divsf3+0x14e>
    1770:	87 01       	movw	r16, r14
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <__divsf3+0x14e>
    1774:	0f e1       	ldi	r16, 0x1F	; 31
    1776:	11 e0       	ldi	r17, 0x01	; 1
    1778:	c8 01       	movw	r24, r16
    177a:	0e 94 a5 0c 	call	0x194a	; 0x194a <__pack_f>
    177e:	68 96       	adiw	r28, 0x18	; 24
    1780:	ea e0       	ldi	r30, 0x0A	; 10
    1782:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__epilogue_restores__+0x10>

00001786 <__gtsf2>:
    1786:	a8 e1       	ldi	r26, 0x18	; 24
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e9 ec       	ldi	r30, 0xC9	; 201
    178c:	fb e0       	ldi	r31, 0x0B	; 11
    178e:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
    1792:	69 83       	std	Y+1, r22	; 0x01
    1794:	7a 83       	std	Y+2, r23	; 0x02
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	2d 83       	std	Y+5, r18	; 0x05
    179c:	3e 83       	std	Y+6, r19	; 0x06
    179e:	4f 83       	std	Y+7, r20	; 0x07
    17a0:	58 87       	std	Y+8, r21	; 0x08
    17a2:	8e 01       	movw	r16, r28
    17a4:	07 5f       	subi	r16, 0xF7	; 247
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	ce 01       	movw	r24, r28
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	b8 01       	movw	r22, r16
    17ae:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    17b2:	81 e1       	ldi	r24, 0x11	; 17
    17b4:	e8 2e       	mov	r14, r24
    17b6:	f1 2c       	mov	r15, r1
    17b8:	ec 0e       	add	r14, r28
    17ba:	fd 1e       	adc	r15, r29
    17bc:	ce 01       	movw	r24, r28
    17be:	05 96       	adiw	r24, 0x05	; 5
    17c0:	b7 01       	movw	r22, r14
    17c2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	40 f0       	brcs	.+16     	; 0x17dc <__gtsf2+0x56>
    17cc:	89 89       	ldd	r24, Y+17	; 0x11
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	28 f0       	brcs	.+10     	; 0x17dc <__gtsf2+0x56>
    17d2:	c8 01       	movw	r24, r16
    17d4:	b7 01       	movw	r22, r14
    17d6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fpcmp_parts_f>
    17da:	01 c0       	rjmp	.+2      	; 0x17de <__gtsf2+0x58>
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	68 96       	adiw	r28, 0x18	; 24
    17e0:	e6 e0       	ldi	r30, 0x06	; 6
    17e2:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

000017e6 <__gesf2>:
    17e6:	a8 e1       	ldi	r26, 0x18	; 24
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e9 ef       	ldi	r30, 0xF9	; 249
    17ec:	fb e0       	ldi	r31, 0x0B	; 11
    17ee:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
    17f2:	69 83       	std	Y+1, r22	; 0x01
    17f4:	7a 83       	std	Y+2, r23	; 0x02
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	2d 83       	std	Y+5, r18	; 0x05
    17fc:	3e 83       	std	Y+6, r19	; 0x06
    17fe:	4f 83       	std	Y+7, r20	; 0x07
    1800:	58 87       	std	Y+8, r21	; 0x08
    1802:	8e 01       	movw	r16, r28
    1804:	07 5f       	subi	r16, 0xF7	; 247
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	ce 01       	movw	r24, r28
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	b8 01       	movw	r22, r16
    180e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1812:	81 e1       	ldi	r24, 0x11	; 17
    1814:	e8 2e       	mov	r14, r24
    1816:	f1 2c       	mov	r15, r1
    1818:	ec 0e       	add	r14, r28
    181a:	fd 1e       	adc	r15, r29
    181c:	ce 01       	movw	r24, r28
    181e:	05 96       	adiw	r24, 0x05	; 5
    1820:	b7 01       	movw	r22, r14
    1822:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	40 f0       	brcs	.+16     	; 0x183c <__gesf2+0x56>
    182c:	89 89       	ldd	r24, Y+17	; 0x11
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	28 f0       	brcs	.+10     	; 0x183c <__gesf2+0x56>
    1832:	c8 01       	movw	r24, r16
    1834:	b7 01       	movw	r22, r14
    1836:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fpcmp_parts_f>
    183a:	01 c0       	rjmp	.+2      	; 0x183e <__gesf2+0x58>
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	68 96       	adiw	r28, 0x18	; 24
    1840:	e6 e0       	ldi	r30, 0x06	; 6
    1842:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

00001846 <__ltsf2>:
    1846:	a8 e1       	ldi	r26, 0x18	; 24
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e9 e2       	ldi	r30, 0x29	; 41
    184c:	fc e0       	ldi	r31, 0x0C	; 12
    184e:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x18>
    1852:	69 83       	std	Y+1, r22	; 0x01
    1854:	7a 83       	std	Y+2, r23	; 0x02
    1856:	8b 83       	std	Y+3, r24	; 0x03
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	2d 83       	std	Y+5, r18	; 0x05
    185c:	3e 83       	std	Y+6, r19	; 0x06
    185e:	4f 83       	std	Y+7, r20	; 0x07
    1860:	58 87       	std	Y+8, r21	; 0x08
    1862:	8e 01       	movw	r16, r28
    1864:	07 5f       	subi	r16, 0xF7	; 247
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	ce 01       	movw	r24, r28
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	b8 01       	movw	r22, r16
    186e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1872:	81 e1       	ldi	r24, 0x11	; 17
    1874:	e8 2e       	mov	r14, r24
    1876:	f1 2c       	mov	r15, r1
    1878:	ec 0e       	add	r14, r28
    187a:	fd 1e       	adc	r15, r29
    187c:	ce 01       	movw	r24, r28
    187e:	05 96       	adiw	r24, 0x05	; 5
    1880:	b7 01       	movw	r22, r14
    1882:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1886:	89 85       	ldd	r24, Y+9	; 0x09
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	40 f0       	brcs	.+16     	; 0x189c <__ltsf2+0x56>
    188c:	89 89       	ldd	r24, Y+17	; 0x11
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	28 f0       	brcs	.+10     	; 0x189c <__ltsf2+0x56>
    1892:	c8 01       	movw	r24, r16
    1894:	b7 01       	movw	r22, r14
    1896:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fpcmp_parts_f>
    189a:	01 c0       	rjmp	.+2      	; 0x189e <__ltsf2+0x58>
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	68 96       	adiw	r28, 0x18	; 24
    18a0:	e6 e0       	ldi	r30, 0x06	; 6
    18a2:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

000018a6 <__fixsfsi>:
    18a6:	ac e0       	ldi	r26, 0x0C	; 12
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e9 e5       	ldi	r30, 0x59	; 89
    18ac:	fc e0       	ldi	r31, 0x0C	; 12
    18ae:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__prologue_saves__+0x20>
    18b2:	69 83       	std	Y+1, r22	; 0x01
    18b4:	7a 83       	std	Y+2, r23	; 0x02
    18b6:	8b 83       	std	Y+3, r24	; 0x03
    18b8:	9c 83       	std	Y+4, r25	; 0x04
    18ba:	ce 01       	movw	r24, r28
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	be 01       	movw	r22, r28
    18c0:	6b 5f       	subi	r22, 0xFB	; 251
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	82 30       	cpi	r24, 0x02	; 2
    18cc:	81 f1       	breq	.+96     	; 0x192e <__fixsfsi+0x88>
    18ce:	82 30       	cpi	r24, 0x02	; 2
    18d0:	70 f1       	brcs	.+92     	; 0x192e <__fixsfsi+0x88>
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	21 f4       	brne	.+8      	; 0x18de <__fixsfsi+0x38>
    18d6:	8e 81       	ldd	r24, Y+6	; 0x06
    18d8:	88 23       	and	r24, r24
    18da:	69 f1       	breq	.+90     	; 0x1936 <__fixsfsi+0x90>
    18dc:	0a c0       	rjmp	.+20     	; 0x18f2 <__fixsfsi+0x4c>
    18de:	2f 81       	ldd	r18, Y+7	; 0x07
    18e0:	38 85       	ldd	r19, Y+8	; 0x08
    18e2:	37 fd       	sbrc	r19, 7
    18e4:	24 c0       	rjmp	.+72     	; 0x192e <__fixsfsi+0x88>
    18e6:	6e 81       	ldd	r22, Y+6	; 0x06
    18e8:	2f 31       	cpi	r18, 0x1F	; 31
    18ea:	31 05       	cpc	r19, r1
    18ec:	3c f0       	brlt	.+14     	; 0x18fc <__fixsfsi+0x56>
    18ee:	66 23       	and	r22, r22
    18f0:	11 f1       	breq	.+68     	; 0x1936 <__fixsfsi+0x90>
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	50 e8       	ldi	r21, 0x80	; 128
    18fa:	21 c0       	rjmp	.+66     	; 0x193e <__fixsfsi+0x98>
    18fc:	8e e1       	ldi	r24, 0x1E	; 30
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	82 1b       	sub	r24, r18
    1902:	93 0b       	sbc	r25, r19
    1904:	29 85       	ldd	r18, Y+9	; 0x09
    1906:	3a 85       	ldd	r19, Y+10	; 0x0a
    1908:	4b 85       	ldd	r20, Y+11	; 0x0b
    190a:	5c 85       	ldd	r21, Y+12	; 0x0c
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <__fixsfsi+0x70>
    190e:	56 95       	lsr	r21
    1910:	47 95       	ror	r20
    1912:	37 95       	ror	r19
    1914:	27 95       	ror	r18
    1916:	8a 95       	dec	r24
    1918:	d2 f7       	brpl	.-12     	; 0x190e <__fixsfsi+0x68>
    191a:	66 23       	and	r22, r22
    191c:	81 f0       	breq	.+32     	; 0x193e <__fixsfsi+0x98>
    191e:	50 95       	com	r21
    1920:	40 95       	com	r20
    1922:	30 95       	com	r19
    1924:	21 95       	neg	r18
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
    1928:	4f 4f       	sbci	r20, 0xFF	; 255
    192a:	5f 4f       	sbci	r21, 0xFF	; 255
    192c:	08 c0       	rjmp	.+16     	; 0x193e <__fixsfsi+0x98>
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	a9 01       	movw	r20, r18
    1934:	04 c0       	rjmp	.+8      	; 0x193e <__fixsfsi+0x98>
    1936:	2f ef       	ldi	r18, 0xFF	; 255
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f ef       	ldi	r20, 0xFF	; 255
    193c:	5f e7       	ldi	r21, 0x7F	; 127
    193e:	b9 01       	movw	r22, r18
    1940:	ca 01       	movw	r24, r20
    1942:	2c 96       	adiw	r28, 0x0c	; 12
    1944:	e2 e0       	ldi	r30, 0x02	; 2
    1946:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__epilogue_restores__+0x20>

0000194a <__pack_f>:
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	fc 01       	movw	r30, r24
    1958:	24 81       	ldd	r18, Z+4	; 0x04
    195a:	35 81       	ldd	r19, Z+5	; 0x05
    195c:	46 81       	ldd	r20, Z+6	; 0x06
    195e:	57 81       	ldd	r21, Z+7	; 0x07
    1960:	61 81       	ldd	r22, Z+1	; 0x01
    1962:	80 81       	ld	r24, Z
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	20 f4       	brcc	.+8      	; 0x1970 <__pack_f+0x26>
    1968:	40 61       	ori	r20, 0x10	; 16
    196a:	ef ef       	ldi	r30, 0xFF	; 255
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	a3 c0       	rjmp	.+326    	; 0x1ab6 <__pack_f+0x16c>
    1970:	84 30       	cpi	r24, 0x04	; 4
    1972:	09 f4       	brne	.+2      	; 0x1976 <__pack_f+0x2c>
    1974:	9b c0       	rjmp	.+310    	; 0x1aac <__pack_f+0x162>
    1976:	82 30       	cpi	r24, 0x02	; 2
    1978:	09 f4       	brne	.+2      	; 0x197c <__pack_f+0x32>
    197a:	92 c0       	rjmp	.+292    	; 0x1aa0 <__pack_f+0x156>
    197c:	21 15       	cp	r18, r1
    197e:	31 05       	cpc	r19, r1
    1980:	41 05       	cpc	r20, r1
    1982:	51 05       	cpc	r21, r1
    1984:	09 f4       	brne	.+2      	; 0x1988 <__pack_f+0x3e>
    1986:	8f c0       	rjmp	.+286    	; 0x1aa6 <__pack_f+0x15c>
    1988:	02 80       	ldd	r0, Z+2	; 0x02
    198a:	f3 81       	ldd	r31, Z+3	; 0x03
    198c:	e0 2d       	mov	r30, r0
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	e2 38       	cpi	r30, 0x82	; 130
    1992:	f8 07       	cpc	r31, r24
    1994:	0c f0       	brlt	.+2      	; 0x1998 <__pack_f+0x4e>
    1996:	5a c0       	rjmp	.+180    	; 0x1a4c <__pack_f+0x102>
    1998:	c2 e8       	ldi	r28, 0x82	; 130
    199a:	df ef       	ldi	r29, 0xFF	; 255
    199c:	ce 1b       	sub	r28, r30
    199e:	df 0b       	sbc	r29, r31
    19a0:	ca 31       	cpi	r28, 0x1A	; 26
    19a2:	d1 05       	cpc	r29, r1
    19a4:	6c f5       	brge	.+90     	; 0x1a00 <__pack_f+0xb6>
    19a6:	79 01       	movw	r14, r18
    19a8:	8a 01       	movw	r16, r20
    19aa:	0c 2e       	mov	r0, r28
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <__pack_f+0x6c>
    19ae:	16 95       	lsr	r17
    19b0:	07 95       	ror	r16
    19b2:	f7 94       	ror	r15
    19b4:	e7 94       	ror	r14
    19b6:	0a 94       	dec	r0
    19b8:	d2 f7       	brpl	.-12     	; 0x19ae <__pack_f+0x64>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a0 e0       	ldi	r26, 0x00	; 0
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	0c 2e       	mov	r0, r28
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <__pack_f+0x84>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	aa 1f       	adc	r26, r26
    19cc:	bb 1f       	adc	r27, r27
    19ce:	0a 94       	dec	r0
    19d0:	d2 f7       	brpl	.-12     	; 0x19c6 <__pack_f+0x7c>
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	a1 09       	sbc	r26, r1
    19d6:	b1 09       	sbc	r27, r1
    19d8:	82 23       	and	r24, r18
    19da:	93 23       	and	r25, r19
    19dc:	a4 23       	and	r26, r20
    19de:	b5 23       	and	r27, r21
    19e0:	21 e0       	ldi	r18, 0x01	; 1
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	a1 05       	cpc	r26, r1
    19ec:	b1 05       	cpc	r27, r1
    19ee:	19 f4       	brne	.+6      	; 0x19f6 <__pack_f+0xac>
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	a9 01       	movw	r20, r18
    19f6:	2e 29       	or	r18, r14
    19f8:	3f 29       	or	r19, r15
    19fa:	40 2b       	or	r20, r16
    19fc:	51 2b       	or	r21, r17
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <__pack_f+0xbc>
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	a9 01       	movw	r20, r18
    1a06:	da 01       	movw	r26, r20
    1a08:	c9 01       	movw	r24, r18
    1a0a:	8f 77       	andi	r24, 0x7F	; 127
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	a0 70       	andi	r26, 0x00	; 0
    1a10:	b0 70       	andi	r27, 0x00	; 0
    1a12:	80 34       	cpi	r24, 0x40	; 64
    1a14:	91 05       	cpc	r25, r1
    1a16:	a1 05       	cpc	r26, r1
    1a18:	b1 05       	cpc	r27, r1
    1a1a:	39 f4       	brne	.+14     	; 0x1a2a <__pack_f+0xe0>
    1a1c:	27 ff       	sbrs	r18, 7
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <__pack_f+0xe8>
    1a20:	20 5c       	subi	r18, 0xC0	; 192
    1a22:	3f 4f       	sbci	r19, 0xFF	; 255
    1a24:	4f 4f       	sbci	r20, 0xFF	; 255
    1a26:	5f 4f       	sbci	r21, 0xFF	; 255
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <__pack_f+0xe8>
    1a2a:	21 5c       	subi	r18, 0xC1	; 193
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a30:	5f 4f       	sbci	r21, 0xFF	; 255
    1a32:	e1 e0       	ldi	r30, 0x01	; 1
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	20 30       	cpi	r18, 0x00	; 0
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	38 07       	cpc	r19, r24
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	48 07       	cpc	r20, r24
    1a40:	80 e4       	ldi	r24, 0x40	; 64
    1a42:	58 07       	cpc	r21, r24
    1a44:	28 f5       	brcc	.+74     	; 0x1a90 <__pack_f+0x146>
    1a46:	e0 e0       	ldi	r30, 0x00	; 0
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	22 c0       	rjmp	.+68     	; 0x1a90 <__pack_f+0x146>
    1a4c:	e0 38       	cpi	r30, 0x80	; 128
    1a4e:	f1 05       	cpc	r31, r1
    1a50:	6c f5       	brge	.+90     	; 0x1aac <__pack_f+0x162>
    1a52:	e1 58       	subi	r30, 0x81	; 129
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	da 01       	movw	r26, r20
    1a58:	c9 01       	movw	r24, r18
    1a5a:	8f 77       	andi	r24, 0x7F	; 127
    1a5c:	90 70       	andi	r25, 0x00	; 0
    1a5e:	a0 70       	andi	r26, 0x00	; 0
    1a60:	b0 70       	andi	r27, 0x00	; 0
    1a62:	80 34       	cpi	r24, 0x40	; 64
    1a64:	91 05       	cpc	r25, r1
    1a66:	a1 05       	cpc	r26, r1
    1a68:	b1 05       	cpc	r27, r1
    1a6a:	39 f4       	brne	.+14     	; 0x1a7a <__pack_f+0x130>
    1a6c:	27 ff       	sbrs	r18, 7
    1a6e:	09 c0       	rjmp	.+18     	; 0x1a82 <__pack_f+0x138>
    1a70:	20 5c       	subi	r18, 0xC0	; 192
    1a72:	3f 4f       	sbci	r19, 0xFF	; 255
    1a74:	4f 4f       	sbci	r20, 0xFF	; 255
    1a76:	5f 4f       	sbci	r21, 0xFF	; 255
    1a78:	04 c0       	rjmp	.+8      	; 0x1a82 <__pack_f+0x138>
    1a7a:	21 5c       	subi	r18, 0xC1	; 193
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a80:	5f 4f       	sbci	r21, 0xFF	; 255
    1a82:	57 ff       	sbrs	r21, 7
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <__pack_f+0x146>
    1a86:	56 95       	lsr	r21
    1a88:	47 95       	ror	r20
    1a8a:	37 95       	ror	r19
    1a8c:	27 95       	ror	r18
    1a8e:	31 96       	adiw	r30, 0x01	; 1
    1a90:	87 e0       	ldi	r24, 0x07	; 7
    1a92:	56 95       	lsr	r21
    1a94:	47 95       	ror	r20
    1a96:	37 95       	ror	r19
    1a98:	27 95       	ror	r18
    1a9a:	8a 95       	dec	r24
    1a9c:	d1 f7       	brne	.-12     	; 0x1a92 <__pack_f+0x148>
    1a9e:	0b c0       	rjmp	.+22     	; 0x1ab6 <__pack_f+0x16c>
    1aa0:	e0 e0       	ldi	r30, 0x00	; 0
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <__pack_f+0x166>
    1aa6:	e0 e0       	ldi	r30, 0x00	; 0
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	05 c0       	rjmp	.+10     	; 0x1ab6 <__pack_f+0x16c>
    1aac:	ef ef       	ldi	r30, 0xFF	; 255
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	a9 01       	movw	r20, r18
    1ab6:	8e 2f       	mov	r24, r30
    1ab8:	87 95       	ror	r24
    1aba:	88 27       	eor	r24, r24
    1abc:	87 95       	ror	r24
    1abe:	94 2f       	mov	r25, r20
    1ac0:	9f 77       	andi	r25, 0x7F	; 127
    1ac2:	67 95       	ror	r22
    1ac4:	66 27       	eor	r22, r22
    1ac6:	67 95       	ror	r22
    1ac8:	e6 95       	lsr	r30
    1aca:	e2 2e       	mov	r14, r18
    1acc:	a9 2f       	mov	r26, r25
    1ace:	a8 2b       	or	r26, r24
    1ad0:	fe 2f       	mov	r31, r30
    1ad2:	f6 2b       	or	r31, r22
    1ad4:	62 2f       	mov	r22, r18
    1ad6:	73 2f       	mov	r23, r19
    1ad8:	8a 2f       	mov	r24, r26
    1ada:	9f 2f       	mov	r25, r31
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	e6 e0       	ldi	r30, 0x06	; 6
    1ae2:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x18>

00001ae6 <__unpack_f>:
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	fb 01       	movw	r30, r22
    1aea:	2c 91       	ld	r18, X
    1aec:	11 96       	adiw	r26, 0x01	; 1
    1aee:	3c 91       	ld	r19, X
    1af0:	11 97       	sbiw	r26, 0x01	; 1
    1af2:	12 96       	adiw	r26, 0x02	; 2
    1af4:	8c 91       	ld	r24, X
    1af6:	12 97       	sbiw	r26, 0x02	; 2
    1af8:	48 2f       	mov	r20, r24
    1afa:	4f 77       	andi	r20, 0x7F	; 127
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	98 2f       	mov	r25, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	99 27       	eor	r25, r25
    1b04:	99 1f       	adc	r25, r25
    1b06:	13 96       	adiw	r26, 0x03	; 3
    1b08:	6c 91       	ld	r22, X
    1b0a:	13 97       	sbiw	r26, 0x03	; 3
    1b0c:	86 2f       	mov	r24, r22
    1b0e:	88 0f       	add	r24, r24
    1b10:	89 2b       	or	r24, r25
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	66 1f       	adc	r22, r22
    1b16:	66 27       	eor	r22, r22
    1b18:	66 1f       	adc	r22, r22
    1b1a:	61 83       	std	Z+1, r22	; 0x01
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	39 f5       	brne	.+78     	; 0x1b6e <__unpack_f+0x88>
    1b20:	21 15       	cp	r18, r1
    1b22:	31 05       	cpc	r19, r1
    1b24:	41 05       	cpc	r20, r1
    1b26:	51 05       	cpc	r21, r1
    1b28:	11 f4       	brne	.+4      	; 0x1b2e <__unpack_f+0x48>
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	29 c0       	rjmp	.+82     	; 0x1b80 <__unpack_f+0x9a>
    1b2e:	82 e8       	ldi	r24, 0x82	; 130
    1b30:	9f ef       	ldi	r25, 0xFF	; 255
    1b32:	93 83       	std	Z+3, r25	; 0x03
    1b34:	82 83       	std	Z+2, r24	; 0x02
    1b36:	67 e0       	ldi	r22, 0x07	; 7
    1b38:	22 0f       	add	r18, r18
    1b3a:	33 1f       	adc	r19, r19
    1b3c:	44 1f       	adc	r20, r20
    1b3e:	55 1f       	adc	r21, r21
    1b40:	6a 95       	dec	r22
    1b42:	d1 f7       	brne	.-12     	; 0x1b38 <__unpack_f+0x52>
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	80 83       	st	Z, r24
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <__unpack_f+0x76>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	93 83       	std	Z+3, r25	; 0x03
    1b5a:	82 83       	std	Z+2, r24	; 0x02
    1b5c:	20 30       	cpi	r18, 0x00	; 0
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	38 07       	cpc	r19, r24
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	48 07       	cpc	r20, r24
    1b66:	80 e4       	ldi	r24, 0x40	; 64
    1b68:	58 07       	cpc	r21, r24
    1b6a:	78 f3       	brcs	.-34     	; 0x1b4a <__unpack_f+0x64>
    1b6c:	20 c0       	rjmp	.+64     	; 0x1bae <__unpack_f+0xc8>
    1b6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b70:	91 05       	cpc	r25, r1
    1b72:	79 f4       	brne	.+30     	; 0x1b92 <__unpack_f+0xac>
    1b74:	21 15       	cp	r18, r1
    1b76:	31 05       	cpc	r19, r1
    1b78:	41 05       	cpc	r20, r1
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	19 f4       	brne	.+6      	; 0x1b84 <__unpack_f+0x9e>
    1b7e:	84 e0       	ldi	r24, 0x04	; 4
    1b80:	80 83       	st	Z, r24
    1b82:	08 95       	ret
    1b84:	44 ff       	sbrs	r20, 4
    1b86:	03 c0       	rjmp	.+6      	; 0x1b8e <__unpack_f+0xa8>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	80 83       	st	Z, r24
    1b8c:	10 c0       	rjmp	.+32     	; 0x1bae <__unpack_f+0xc8>
    1b8e:	10 82       	st	Z, r1
    1b90:	0e c0       	rjmp	.+28     	; 0x1bae <__unpack_f+0xc8>
    1b92:	8f 57       	subi	r24, 0x7F	; 127
    1b94:	90 40       	sbci	r25, 0x00	; 0
    1b96:	93 83       	std	Z+3, r25	; 0x03
    1b98:	82 83       	std	Z+2, r24	; 0x02
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
    1b9c:	80 83       	st	Z, r24
    1b9e:	87 e0       	ldi	r24, 0x07	; 7
    1ba0:	22 0f       	add	r18, r18
    1ba2:	33 1f       	adc	r19, r19
    1ba4:	44 1f       	adc	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	8a 95       	dec	r24
    1baa:	d1 f7       	brne	.-12     	; 0x1ba0 <__unpack_f+0xba>
    1bac:	50 64       	ori	r21, 0x40	; 64
    1bae:	24 83       	std	Z+4, r18	; 0x04
    1bb0:	35 83       	std	Z+5, r19	; 0x05
    1bb2:	46 83       	std	Z+6, r20	; 0x06
    1bb4:	57 83       	std	Z+7, r21	; 0x07
    1bb6:	08 95       	ret

00001bb8 <__fpcmp_parts_f>:
    1bb8:	fc 01       	movw	r30, r24
    1bba:	db 01       	movw	r26, r22
    1bbc:	90 81       	ld	r25, Z
    1bbe:	92 30       	cpi	r25, 0x02	; 2
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <__fpcmp_parts_f+0xc>
    1bc2:	49 c0       	rjmp	.+146    	; 0x1c56 <__fpcmp_parts_f+0x9e>
    1bc4:	8c 91       	ld	r24, X
    1bc6:	82 30       	cpi	r24, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <__fpcmp_parts_f+0x14>
    1bca:	45 c0       	rjmp	.+138    	; 0x1c56 <__fpcmp_parts_f+0x9e>
    1bcc:	94 30       	cpi	r25, 0x04	; 4
    1bce:	51 f4       	brne	.+20     	; 0x1be4 <__fpcmp_parts_f+0x2c>
    1bd0:	61 81       	ldd	r22, Z+1	; 0x01
    1bd2:	84 30       	cpi	r24, 0x04	; 4
    1bd4:	b1 f5       	brne	.+108    	; 0x1c42 <__fpcmp_parts_f+0x8a>
    1bd6:	11 96       	adiw	r26, 0x01	; 1
    1bd8:	2c 91       	ld	r18, X
    1bda:	11 97       	sbiw	r26, 0x01	; 1
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	26 1b       	sub	r18, r22
    1be0:	31 09       	sbc	r19, r1
    1be2:	41 c0       	rjmp	.+130    	; 0x1c66 <__fpcmp_parts_f+0xae>
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <__fpcmp_parts_f+0x38>
    1be8:	92 30       	cpi	r25, 0x02	; 2
    1bea:	41 f4       	brne	.+16     	; 0x1bfc <__fpcmp_parts_f+0x44>
    1bec:	82 30       	cpi	r24, 0x02	; 2
    1bee:	b1 f1       	breq	.+108    	; 0x1c5c <__fpcmp_parts_f+0xa4>
    1bf0:	11 96       	adiw	r26, 0x01	; 1
    1bf2:	8c 91       	ld	r24, X
    1bf4:	11 97       	sbiw	r26, 0x01	; 1
    1bf6:	88 23       	and	r24, r24
    1bf8:	a1 f1       	breq	.+104    	; 0x1c62 <__fpcmp_parts_f+0xaa>
    1bfa:	2d c0       	rjmp	.+90     	; 0x1c56 <__fpcmp_parts_f+0x9e>
    1bfc:	61 81       	ldd	r22, Z+1	; 0x01
    1bfe:	82 30       	cpi	r24, 0x02	; 2
    1c00:	01 f1       	breq	.+64     	; 0x1c42 <__fpcmp_parts_f+0x8a>
    1c02:	11 96       	adiw	r26, 0x01	; 1
    1c04:	8c 91       	ld	r24, X
    1c06:	11 97       	sbiw	r26, 0x01	; 1
    1c08:	68 17       	cp	r22, r24
    1c0a:	d9 f4       	brne	.+54     	; 0x1c42 <__fpcmp_parts_f+0x8a>
    1c0c:	22 81       	ldd	r18, Z+2	; 0x02
    1c0e:	33 81       	ldd	r19, Z+3	; 0x03
    1c10:	12 96       	adiw	r26, 0x02	; 2
    1c12:	8d 91       	ld	r24, X+
    1c14:	9c 91       	ld	r25, X
    1c16:	13 97       	sbiw	r26, 0x03	; 3
    1c18:	82 17       	cp	r24, r18
    1c1a:	93 07       	cpc	r25, r19
    1c1c:	94 f0       	brlt	.+36     	; 0x1c42 <__fpcmp_parts_f+0x8a>
    1c1e:	28 17       	cp	r18, r24
    1c20:	39 07       	cpc	r19, r25
    1c22:	bc f0       	brlt	.+46     	; 0x1c52 <__fpcmp_parts_f+0x9a>
    1c24:	24 81       	ldd	r18, Z+4	; 0x04
    1c26:	35 81       	ldd	r19, Z+5	; 0x05
    1c28:	46 81       	ldd	r20, Z+6	; 0x06
    1c2a:	57 81       	ldd	r21, Z+7	; 0x07
    1c2c:	14 96       	adiw	r26, 0x04	; 4
    1c2e:	8d 91       	ld	r24, X+
    1c30:	9d 91       	ld	r25, X+
    1c32:	0d 90       	ld	r0, X+
    1c34:	bc 91       	ld	r27, X
    1c36:	a0 2d       	mov	r26, r0
    1c38:	82 17       	cp	r24, r18
    1c3a:	93 07       	cpc	r25, r19
    1c3c:	a4 07       	cpc	r26, r20
    1c3e:	b5 07       	cpc	r27, r21
    1c40:	18 f4       	brcc	.+6      	; 0x1c48 <__fpcmp_parts_f+0x90>
    1c42:	66 23       	and	r22, r22
    1c44:	41 f0       	breq	.+16     	; 0x1c56 <__fpcmp_parts_f+0x9e>
    1c46:	0d c0       	rjmp	.+26     	; 0x1c62 <__fpcmp_parts_f+0xaa>
    1c48:	28 17       	cp	r18, r24
    1c4a:	39 07       	cpc	r19, r25
    1c4c:	4a 07       	cpc	r20, r26
    1c4e:	5b 07       	cpc	r21, r27
    1c50:	28 f4       	brcc	.+10     	; 0x1c5c <__fpcmp_parts_f+0xa4>
    1c52:	66 23       	and	r22, r22
    1c54:	31 f0       	breq	.+12     	; 0x1c62 <__fpcmp_parts_f+0xaa>
    1c56:	21 e0       	ldi	r18, 0x01	; 1
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <__fpcmp_parts_f+0xae>
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <__fpcmp_parts_f+0xae>
    1c62:	2f ef       	ldi	r18, 0xFF	; 255
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	c9 01       	movw	r24, r18
    1c68:	08 95       	ret

00001c6a <__divmodhi4>:
    1c6a:	97 fb       	bst	r25, 7
    1c6c:	09 2e       	mov	r0, r25
    1c6e:	07 26       	eor	r0, r23
    1c70:	0a d0       	rcall	.+20     	; 0x1c86 <__divmodhi4_neg1>
    1c72:	77 fd       	sbrc	r23, 7
    1c74:	04 d0       	rcall	.+8      	; 0x1c7e <__divmodhi4_neg2>
    1c76:	0c d0       	rcall	.+24     	; 0x1c90 <__udivmodhi4>
    1c78:	06 d0       	rcall	.+12     	; 0x1c86 <__divmodhi4_neg1>
    1c7a:	00 20       	and	r0, r0
    1c7c:	1a f4       	brpl	.+6      	; 0x1c84 <__divmodhi4_exit>

00001c7e <__divmodhi4_neg2>:
    1c7e:	70 95       	com	r23
    1c80:	61 95       	neg	r22
    1c82:	7f 4f       	sbci	r23, 0xFF	; 255

00001c84 <__divmodhi4_exit>:
    1c84:	08 95       	ret

00001c86 <__divmodhi4_neg1>:
    1c86:	f6 f7       	brtc	.-4      	; 0x1c84 <__divmodhi4_exit>
    1c88:	90 95       	com	r25
    1c8a:	81 95       	neg	r24
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8e:	08 95       	ret

00001c90 <__udivmodhi4>:
    1c90:	aa 1b       	sub	r26, r26
    1c92:	bb 1b       	sub	r27, r27
    1c94:	51 e1       	ldi	r21, 0x11	; 17
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <__udivmodhi4_ep>

00001c98 <__udivmodhi4_loop>:
    1c98:	aa 1f       	adc	r26, r26
    1c9a:	bb 1f       	adc	r27, r27
    1c9c:	a6 17       	cp	r26, r22
    1c9e:	b7 07       	cpc	r27, r23
    1ca0:	10 f0       	brcs	.+4      	; 0x1ca6 <__udivmodhi4_ep>
    1ca2:	a6 1b       	sub	r26, r22
    1ca4:	b7 0b       	sbc	r27, r23

00001ca6 <__udivmodhi4_ep>:
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	5a 95       	dec	r21
    1cac:	a9 f7       	brne	.-22     	; 0x1c98 <__udivmodhi4_loop>
    1cae:	80 95       	com	r24
    1cb0:	90 95       	com	r25
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	08 95       	ret

00001cb8 <__prologue_saves__>:
    1cb8:	2f 92       	push	r2
    1cba:	3f 92       	push	r3
    1cbc:	4f 92       	push	r4
    1cbe:	5f 92       	push	r5
    1cc0:	6f 92       	push	r6
    1cc2:	7f 92       	push	r7
    1cc4:	8f 92       	push	r8
    1cc6:	9f 92       	push	r9
    1cc8:	af 92       	push	r10
    1cca:	bf 92       	push	r11
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	ca 1b       	sub	r28, r26
    1ce2:	db 0b       	sbc	r29, r27
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	09 94       	ijmp

00001cf0 <__epilogue_restores__>:
    1cf0:	2a 88       	ldd	r2, Y+18	; 0x12
    1cf2:	39 88       	ldd	r3, Y+17	; 0x11
    1cf4:	48 88       	ldd	r4, Y+16	; 0x10
    1cf6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cf8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cfa:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cfc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cfe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d00:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d02:	b9 84       	ldd	r11, Y+9	; 0x09
    1d04:	c8 84       	ldd	r12, Y+8	; 0x08
    1d06:	df 80       	ldd	r13, Y+7	; 0x07
    1d08:	ee 80       	ldd	r14, Y+6	; 0x06
    1d0a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d0c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d0e:	1b 81       	ldd	r17, Y+3	; 0x03
    1d10:	aa 81       	ldd	r26, Y+2	; 0x02
    1d12:	b9 81       	ldd	r27, Y+1	; 0x01
    1d14:	ce 0f       	add	r28, r30
    1d16:	d1 1d       	adc	r29, r1
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	ed 01       	movw	r28, r26
    1d24:	08 95       	ret

00001d26 <atoi>:
    1d26:	fc 01       	movw	r30, r24
    1d28:	88 27       	eor	r24, r24
    1d2a:	99 27       	eor	r25, r25
    1d2c:	e8 94       	clt
    1d2e:	21 91       	ld	r18, Z+
    1d30:	20 32       	cpi	r18, 0x20	; 32
    1d32:	e9 f3       	breq	.-6      	; 0x1d2e <atoi+0x8>
    1d34:	29 30       	cpi	r18, 0x09	; 9
    1d36:	10 f0       	brcs	.+4      	; 0x1d3c <atoi+0x16>
    1d38:	2e 30       	cpi	r18, 0x0E	; 14
    1d3a:	c8 f3       	brcs	.-14     	; 0x1d2e <atoi+0x8>
    1d3c:	2b 32       	cpi	r18, 0x2B	; 43
    1d3e:	41 f0       	breq	.+16     	; 0x1d50 <atoi+0x2a>
    1d40:	2d 32       	cpi	r18, 0x2D	; 45
    1d42:	39 f4       	brne	.+14     	; 0x1d52 <atoi+0x2c>
    1d44:	68 94       	set
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <atoi+0x2a>
    1d48:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__mulhi_const_10>
    1d4c:	82 0f       	add	r24, r18
    1d4e:	91 1d       	adc	r25, r1
    1d50:	21 91       	ld	r18, Z+
    1d52:	20 53       	subi	r18, 0x30	; 48
    1d54:	2a 30       	cpi	r18, 0x0A	; 10
    1d56:	c0 f3       	brcs	.-16     	; 0x1d48 <atoi+0x22>
    1d58:	1e f4       	brtc	.+6      	; 0x1d60 <atoi+0x3a>
    1d5a:	90 95       	com	r25
    1d5c:	81 95       	neg	r24
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	08 95       	ret

00001d62 <memset>:
    1d62:	dc 01       	movw	r26, r24
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <memset+0x6>
    1d66:	6d 93       	st	X+, r22
    1d68:	41 50       	subi	r20, 0x01	; 1
    1d6a:	50 40       	sbci	r21, 0x00	; 0
    1d6c:	e0 f7       	brcc	.-8      	; 0x1d66 <memset+0x4>
    1d6e:	08 95       	ret

00001d70 <itoa>:
    1d70:	fb 01       	movw	r30, r22
    1d72:	9f 01       	movw	r18, r30
    1d74:	e8 94       	clt
    1d76:	42 30       	cpi	r20, 0x02	; 2
    1d78:	c4 f0       	brlt	.+48     	; 0x1daa <itoa+0x3a>
    1d7a:	45 32       	cpi	r20, 0x25	; 37
    1d7c:	b4 f4       	brge	.+44     	; 0x1daa <itoa+0x3a>
    1d7e:	4a 30       	cpi	r20, 0x0A	; 10
    1d80:	29 f4       	brne	.+10     	; 0x1d8c <itoa+0x1c>
    1d82:	97 fb       	bst	r25, 7
    1d84:	1e f4       	brtc	.+6      	; 0x1d8c <itoa+0x1c>
    1d86:	90 95       	com	r25
    1d88:	81 95       	neg	r24
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	64 2f       	mov	r22, r20
    1d8e:	77 27       	eor	r23, r23
    1d90:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__udivmodhi4>
    1d94:	80 5d       	subi	r24, 0xD0	; 208
    1d96:	8a 33       	cpi	r24, 0x3A	; 58
    1d98:	0c f0       	brlt	.+2      	; 0x1d9c <itoa+0x2c>
    1d9a:	89 5d       	subi	r24, 0xD9	; 217
    1d9c:	81 93       	st	Z+, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	a1 f7       	brne	.-24     	; 0x1d8c <itoa+0x1c>
    1da4:	16 f4       	brtc	.+4      	; 0x1daa <itoa+0x3a>
    1da6:	5d e2       	ldi	r21, 0x2D	; 45
    1da8:	51 93       	st	Z+, r21
    1daa:	10 82       	st	Z, r1
    1dac:	c9 01       	movw	r24, r18
    1dae:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <strrev>

00001db2 <__mulhi_const_10>:
    1db2:	7a e0       	ldi	r23, 0x0A	; 10
    1db4:	97 9f       	mul	r25, r23
    1db6:	90 2d       	mov	r25, r0
    1db8:	87 9f       	mul	r24, r23
    1dba:	80 2d       	mov	r24, r0
    1dbc:	91 0d       	add	r25, r1
    1dbe:	11 24       	eor	r1, r1
    1dc0:	08 95       	ret

00001dc2 <strrev>:
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	67 2f       	mov	r22, r23
    1dc8:	71 91       	ld	r23, Z+
    1dca:	77 23       	and	r23, r23
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <strrev+0x4>
    1dce:	32 97       	sbiw	r30, 0x02	; 2
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <strrev+0x18>
    1dd2:	7c 91       	ld	r23, X
    1dd4:	6d 93       	st	X+, r22
    1dd6:	70 83       	st	Z, r23
    1dd8:	62 91       	ld	r22, -Z
    1dda:	ae 17       	cp	r26, r30
    1ddc:	bf 07       	cpc	r27, r31
    1dde:	c8 f3       	brcs	.-14     	; 0x1dd2 <strrev+0x10>
    1de0:	08 95       	ret

00001de2 <_exit>:
    1de2:	f8 94       	cli

00001de4 <__stop_program>:
    1de4:	ff cf       	rjmp	.-2      	; 0x1de4 <__stop_program>
